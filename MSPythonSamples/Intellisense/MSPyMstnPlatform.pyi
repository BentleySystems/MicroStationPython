from typing import Any, Optional, overload, Type, Sequence, Iterable, Union, Callable
from enum import Enum
import MSPyMstnPlatform

class ACS:
    """
    None
    """

    @staticmethod
    def AttachNamed(acsName: str, useRot: bool, useOrg: bool) -> int:
        """
        @description Attaches the named auxiliary coordinate system (ACS) to
        the active model.
        
        :param unparsed:
        the name of the coordinate system to attach
        
        :param useRot:
        true means apply the rotation stored in the named ACS, and false
        means ignore it
        
        :param useOrg:
        true means apply the origin stored in the named ACS, and false
        means ignore it
        
        :returns:
        SUCCESS if the coordinate system is successfully attached and
        MDLERR_ACSNOTFOUND if the specified coordinate system is not
        found.
        
        See also:
        ACS.DeleteNamed ACS.SaveNamed @See ACS.SaveNamed
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateElmdscrFromParams(type: int, origin: MSPyBentleyGeom.DPoint3d, rotation: MSPyBentleyGeom.RotMatrix, name: str, description: str) -> tuple:
        """
        @description Creates an ACS element descriptor from the given
        parameters.
        
        :param edPP:
        is the newly created ACS element descriptor, which you must free
        when done.
        
        :param type:
        is one of the valid ACS type constants. Possible values are:<UL>
        <LI>ACS_TYPE_NONE <LI>ACS_TYPE_RECT <LI>ACS_TYPE_CYL
        <LI>ACS_TYPE_SPHERE </UL>
        
        :param originP:
        origin of the ACS.
        
        :param rotationP:
        rotation of the ACS.
        
        :param nameP:
        name of the ACS.
        
        :param descriptionP:
        the description of the ACS.
        
        :returns:
        SUCCESS if the element descriptor was created successfully,
        MDLERR_BADARG if any of the parameters was not valid.
        
        Remark:
        """
        ...
    
    @staticmethod
    def DeleteNamed(acsName: str) -> int:
        """
        @description Deletes the named coordinate system specified.
        
        :param acsName:
        name of the coordinate system
        
        :returns:
        SUCCESS if the coordinate system is successfully deleted and
        MDLERR_ACSNOTFOUND if the specified coordinate system is not
        found.
        
        See also:
        ACS.AttachNamed ACS.SaveNamed
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCanonicalDescription(descr: str) -> tuple:
        """
        @description Canonize the specified ACS description string. The result
        is the name string stripped of leading and trailing whitespace
        characters, whose length and content has been validated.
        
        :param canonicalP:
        points to a string buffer where the canonized description is
        placed. This buffer should be MAX_ACS_DESCR_LENGTH MSWChars long.
        
        :param descrP:
        ACS description to be canonized.
        
        :returns:
        SUCCESS unless the name string is too large (MDLERR_BADARG) or
        there is not enough memory to allocate working buffers
        (MDLERR_INSFMEMORY).
        
        See also:
        ACS.GetDescriptionOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCanonicalName(name: str) -> tuple:
        """
        @description Canonizes the specified ACS name string. The result is
        the name string stripped of leading and trailing whitespace
        characters, whose length and content has been validated.
        
        :param canonicalP:
        is a pointer to a string buffer where the canonized name is
        placed. This buffer should be MAX_ACS_NAME_LENGTH MSWChars long.
        
        :param nameP:
        ACS name to be canonized.
        
        :returns:
        SUCCESS unless the name string is too large or there is not enough
        memory to allocate working buffers.
        
        See also:
        ACS.GetNameOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCurrent() -> tuple:
        """
        @description Returns the current ACS's origin, rotation matrix, and
        type. @Remarks The coordinate system type is specified by one of the
        following types from msdefs.h:<UL> <LI>ACS_RECTANGULAR
        <LI>ACS_CYLINDRICAL <LI>ACS_SPHERICAL </UL>
        
        :param originP:
        current ACS origin
        
        :param rotMatrixP:
        current ACS orientation
        
        :param typeP:
        current ACS type
        
        :param nameP:
        points to a buffer where the name is copied. This buffer should be
        MAX_ACS_NAME_LENGTH MSWChars long.
        
        :param descriptionP:
        points to a buffer where the description is copied. This buffer
        should be MAX_ACS_DESCR_LENGTH MSWChars long
        
        :returns:
        SUCCESS if an ACS is active and MDLERR_NOACSDEFINED if no system
        is currently defined.
        
        See also:
        ACS.SetCurrent
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDescriptionOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        """
        @description Gets the description from the specified ACS element.
        
        :param acsDescriptionP:
        points to a buffer where the description is copied. This buffer
        should be MAX_ACS_DESCR_LENGTH MSWChars long
        
        :param edP:
        points to the ACS element to get the description from.
        
        :returns:
        SUCCESS if the operation was completed successfully, otherwise
        ERROR.
        
        See also:
        ACS.SetDescriptionOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetNameOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        """
        @description Gets the name from the specified ACS element descriptor.
        
        :param acsNameP:
        points to a buffer where the name is copied. This buffer should be
        MAX_ACS_NAME_LENGTH MSWChars long.
        
        :param edP:
        points to the ACS element to get the name from.
        
        :returns:
        SUCCESS if the operation was completed successfully, otherwise
        ERROR.
        
        See also:
        ACS.SetNameOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetTypeOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        """
        @description Get the ACS type of the ACS element descriptor.
        
        :param acsTypeP:
        points to a variable which will contain one of the following
        values upon a return of SUCCESS. <UL> <LI>ACS_TYPE_NONE
        <LI>ACS_TYPE_RECT <LI>ACS_TYPE_CYL <LI>ACS_TYPE_SPHERE </UL>
        
        :param edP:
        points to the ACS element.
        
        :returns:
        SUCCESS if the element is an ACS element, MDLERR_BADARG if it is
        not.
        
        See also:
        ACS.SetTypeOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsDefined() -> bool:
        ...
    
    @staticmethod
    def Locate(name: str, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @description Searches for an ACS using its assigned name.
        
        :param edPP:
        Copy of ACS element descriptor. You must free it when done.
        
        :param filePosP:
        file position of the located ACS element.
        
        :param inName:
        name of the ACS element to find.
        
        :param modelRef:
        model to search for the ACS element.
        
        :returns:
        SUCCESS if the operation completed successfully, otherwise ERROR.
        
        See also:
        ACS.TraverseElements
        
        Remark:
        """
        ...
    
    @staticmethod
    def SaveNamed(name: str, description: str) -> int:
        """
        @description Saves the current coordinate system with the specified
        name and description. The name must consist of one to
        MAX_ACS_NAME_LENGTH MSWChars, and the description can contain up to
        MAX_ACS_DESCR_LENGTH MSWChars. The user or an MDL application can
        recall saved coordinate systems with the ACS.AttachNamed function.
        
        :param name:
        name of the ACS
        
        :param description:
        description of the ACS
        
        :returns:
        SUCCESS if the coordinate system is successfully saved. If the
        coordinate system name already exists, the existing ACS is
        overwritten. If no ACS is active, MDLERR_NOACSDEFINED is returned.
        
        See also:
        ACS.AttachNamed ACS.DeleteNamed
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetCurrent(origin: MSPyBentleyGeom.DPoint3d, rotMatrix: MSPyBentleyGeom.RotMatrix, type: MSPyDgnPlatform.ACSType) -> int:
        """
        @description Defines the ACS of the active model. <UL>
        <LI>ACS_RECTANGULAR <LI>ACS_CYLINDRICAL <LI>ACS_SPHERICAL </UL>
        
        :param originP:
        new ACS origin or pass NULL to leave unchanged
        
        :param rotMatrixP:
        new ACS orientation or pass NULL to leave unchanged
        
        :param type:
        new ACS type or pass NULL to leave unchanged
        
        :returns:
        SUCCESS if the coordinate system is successfully defined.
        
        See also:
        ACS.GetCurrent
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDescriptionOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr, description: str) -> tuple:
        """
        @description Sets the description on the specified ACS element.
        
        :param edPP:
        points to ACS element descriptor pointer.
        
        :param description:
        points to a buffer where the description is stored.
        
        :returns:
        SUCCESS if the operation was completed successfully, otherwise
        ERROR.
        
        See also:
        ACS.GetDescriptionOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetNameOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr, name: str) -> tuple:
        """
        @description Sets the name on the specified ACS element.
        
        :param edPP:
        points to ACS element descriptor pointer.
        
        :param name:
        points to a buffer where the name is stored.
        
        :returns:
        SUCCESS if the operation was completed successfully, otherwise
        ERROR.
        
        See also:
        ACS.GetNameOfElmdscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetTypeOfElmdscr(edP: MSPyDgnPlatform.MSElementDescr, acsType: int) -> int:
        """
        @description Sets the ACS type of the ACS element descriptor.
        
        :param edP:
        ACS element descriptor which is being accessed
        
        :param acsTypeP:
        type to set in the ACS, and should be one of:<UL>
        <LI>ACS_TYPE_NONE <LI>ACS_TYPE_RECT <LI>ACS_TYPE_CYL
        <LI>ACS_TYPE_SPHERE </UL>
        
        :returns:
        SUCCESS if the element is an ACS element, MDLERR_BADARG if it is
        not.
        
        See also:
        ACS.GetTypeOfElmdscr
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class AcsChangeType:
    """
    Members:
    
    eACS_CHANGE_SAVE
    
    eACS_CHANGE_DELETE
    
    eACS_CHANGE_REWRITE
    
    eACS_SYNCH_TO_DATA
    """

    def __init__(self: MSPyMstnPlatform.AcsChangeType, value: int) -> None:
        ...
    
    eACS_CHANGE_DELETE: AcsChangeType
    
    eACS_CHANGE_REWRITE: AcsChangeType
    
    eACS_CHANGE_SAVE: AcsChangeType
    
    eACS_SYNCH_TO_DATA: AcsChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.AcsChangeType) -> int:
        ...
    
class ActionButtonValue:
    """
    Members:
    
    eACTIONBUTTON_APPLY
    
    eACTIONBUTTON_RESET
    
    eACTIONBUTTON_OK
    
    eACTIONBUTTON_CANCEL
    
    eACTIONBUTTON_DEFAULT
    
    eACTIONBUTTON_YES
    
    eACTIONBUTTON_NO
    
    eACTIONBUTTON_RETRY
    
    eACTIONBUTTON_STOP
    
    eACTIONBUTTON_HELP
    
    eACTIONBUTTON_YESTOALL
    
    eACTIONBUTTON_NOTOALL
    
    eACTIONBUTTON_OPEN
    """

    def __init__(self: MSPyMstnPlatform.ActionButtonValue, value: int) -> None:
        ...
    
    eACTIONBUTTON_APPLY: ActionButtonValue
    
    eACTIONBUTTON_CANCEL: ActionButtonValue
    
    eACTIONBUTTON_DEFAULT: ActionButtonValue
    
    eACTIONBUTTON_HELP: ActionButtonValue
    
    eACTIONBUTTON_NO: ActionButtonValue
    
    eACTIONBUTTON_NOTOALL: ActionButtonValue
    
    eACTIONBUTTON_OK: ActionButtonValue
    
    eACTIONBUTTON_OPEN: ActionButtonValue
    
    eACTIONBUTTON_RESET: ActionButtonValue
    
    eACTIONBUTTON_RETRY: ActionButtonValue
    
    eACTIONBUTTON_STOP: ActionButtonValue
    
    eACTIONBUTTON_YES: ActionButtonValue
    
    eACTIONBUTTON_YESTOALL: ActionButtonValue
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ActionButtonValue) -> int:
        ...
    
class ActiveModel:
    """
    None
    """

    @staticmethod
    def Is3d() -> bool:
        ...
    
    @staticmethod
    def IsReadonly() -> bool:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Angle3dConstraint:
    """
    None
    """

    class AngleSettings:
        """
        Members:
        
        eNO_INVERTED_AXIS
        
        eINVERTED_AXIS
        """
    
        def __init__(self: MSPyMstnPlatform.Angle3dConstraint.AngleSettings, value: int) -> None:
            ...
        
        eINVERTED_AXIS: AngleSettings
        
        eNO_INVERTED_AXIS: AngleSettings
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.Angle3dConstraint.AngleSettings) -> int:
            ...
        
    @staticmethod
    def Create(geometryIds: MSPyMstnPlatform.GeometryIdPtrArray, axis: MSPyBentleyGeom.DRay3d, flags: int, value: float, variableAccess: MSPyBentley.WString, settings: int) -> MSPyMstnPlatform.Constraint3dBase:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_SurfaceOrientation
        
        eFlagMask_GroupLock
        
        eFlagMask_HalfSpace1
        
        eFlagMask_HalfSpace2
        """
    
        def __init__(self: MSPyMstnPlatform.Constraint3dBase.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_GroupLock: FlagMasks
        
        eFlagMask_HalfSpace1: FlagMasks
        
        eFlagMask_HalfSpace2: FlagMasks
        
        eFlagMask_SurfaceOrientation: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.Constraint3dBase.FlagMasks) -> int:
            ...
        
    @property
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    @Flags.setter
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: int) -> None:
        ...
    
    def GetElementRefs(self: MSPyMstnPlatform.Constraint3dBase, elemRefs: Set[MSPyDgnPlatform.ElementRefBase]) -> None:
        ...
    
    def GetFlags(self: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    
    def GetGroupLock(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def GetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.Constraint3dBase, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    
    def GetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    
    def GetType(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    @property
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    @GroupLock.setter
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: bool) -> None:
        ...
    
    @property
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace1.setter
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    @property
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace2.setter
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def HasBoundVariable(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def HasElementRef(self: MSPyMstnPlatform.Constraint3dBase, elemRef: MSPyDgnPlatform.ElementRefBase) -> bool:
        ...
    
    def IsRedundant(self: MSPyMstnPlatform.Constraint3dBase, other: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def SetFlags(self: MSPyMstnPlatform.Constraint3dBase, flags: int) -> None:
        ...
    
    def SetGeometryIds(self: MSPyMstnPlatform.Constraint3dBase, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray) -> None:
        ...
    
    def SetGroupLock(self: MSPyMstnPlatform.Constraint3dBase, groupLock: bool) -> None:
        ...
    
    def SetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.Constraint3dBase, status: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    def SetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase, orientation: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    @property
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    @SurfaceOrientation.setter
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eDCM3_D_BETWEEN_FIXED: Status
    
    eDCM3_D_BETWEEN_SET_MEMBERS: Status
    
    eDCM3_D_NOT_CHANGED: Status
    
    eDCM3_D_NOT_CONSISTENT: Status
    
    eDCM3_D_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_D_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_D_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_D_NOT_SOLVED: Status
    
    eDCM3_D_OVER_DEFINED: Status
    
    eDCM3_D_SOLVED: Status
    
    eDCM3_D_UNKNOWN: Status
    
    eFlagMask_GroupLock: FlagMasks
    
    eFlagMask_HalfSpace1: FlagMasks
    
    eFlagMask_HalfSpace2: FlagMasks
    
    eFlagMask_SurfaceOrientation: FlagMasks
    
    eINVERTED_AXIS: AngleSettings
    
    eNO_INVERTED_AXIS: AngleSettings
    
    eRedundant: Status
    
class AngularUnits:
    """
    Members:
    
    eANGULAR_UNITS_DecimalDegrees
    
    eANGULAR_UNITS_DegreesMinutesSeconds
    
    eANGULAR_UNITS_Gradians
    
    eANGULAR_UNITS_Radians
    
    eANGULAR_UNITS_Bearing
    """

    def __init__(self: MSPyMstnPlatform.AngularUnits, value: int) -> None:
        ...
    
    eANGULAR_UNITS_Bearing: AngularUnits
    
    eANGULAR_UNITS_DecimalDegrees: AngularUnits
    
    eANGULAR_UNITS_DegreesMinutesSeconds: AngularUnits
    
    eANGULAR_UNITS_Gradians: AngularUnits
    
    eANGULAR_UNITS_Radians: AngularUnits
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.AngularUnits) -> int:
        ...
    
class Assoc:
    """
    None
    """

    @staticmethod
    def CreateArc(assoc: MSPyDgnPlatform.AssocPoint, angle: float, keyPoint: int, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents a point on an arc
        or ellipse element.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. @Param(input) angle the angle (in
        radians) from the primary axis of the arc or ellipse to the
        association point. This argument is used only when the value of
        *keyPoint* is
        
        ```
        ASSOC_ARC_ANGLE
        ```
        
        @Param(input) keyPoint determines the type of association that is
        created.
        
        @Param(input) path display path for the element.
        @Param(input) elemId used if path is NULL...i.e. creating assoc to
        element that has not been added to the file yet. No verification on
        the association can be done in this case.
        
        @Return SUCCESS (zero) if it
        is able to create a valid association. Otherwise, it returns a non-
        zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateBCurve(assoc: MSPyDgnPlatform.AssocPoint, u: float, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents a point along a
        B-spline curve.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. @Param(input) u the parameter along the
        B-spline curve representing the associative point. @Param(input) path
        display path for the element. @Param(input) elemId used if path is
        NULL...i.e. creating assoc to element that has @Return SUCCESS (zero)
        if it is able to create a valid association. Otherwise, it returns a
        non-zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateIntersection(assoc: MSPyDgnPlatform.AssocPoint, index: int, seg1: int, seg2: int, nSeg1: int, nSeg2: int, path1: MSPyDgnPlatform.DisplayPath, path2: MSPyDgnPlatform.DisplayPath, elemId1: int, elemId2: int) -> int:
        """
        @Description Create an intersection association between the two
        elements identified by the elemId1 and elemId2 parameters.
        
        @Param(output) assoc is the intersection association created by the
        operation. @Param(input) index is the index of the intersection between
        the two elements where the association will be created. The number of
        intersections between two elements can be found via the
        Intersect.AllBetweenElms function. @Param(input) seg1 is the index of
        the segment of element 1 where the intersection occurs. @Param(input)
        seg2 is the index of the segment of element 2 where the intersection
        occurs. @Param(input) nSeg1 the number of vertices of element 1. This
        parameter is optional, you can pass zero. If non-zero this value is
        used to avoid the association jumping as vertices are
        inserted/deleted. @Param(input) nSeg2 the number of vertices of element
        2. This parameter is optional, you can pass zero. If non-zero this
        value is used to avoid the association jumping as vertices are
        inserted/deleted. @Param(input) path1 display path for the element1.
        @Param(input) path2 display path for the element2. @Param(input) elemId1
        used if path1 is NULL...i.e. creating assoc to element that has not
        been added to the file yet. No verification on the association can be
        done in this case. @Param(input) elemId2 used if path2 is NULL...i.e.
        creating assoc to element that has not been added to the file yet. No
        verification on the association can be done in this case. @Return
        returns SUCCESS if the operation is successful
        
        See also:
        Assoc.GetPoint .CreateIntersection
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateKeypoint(assoc: MSPyDgnPlatform.AssocPoint, vertex: int, nVertex: int, numerator: int, divisor: int, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents a point on a
        linear element.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. Linear elements are lines, line
        strings and shapes. @Param(input) vertex the index of the vertex directly
        preceding the association point. @Param(input) nVertex the total number
        of vertices of the linear element. This parameter is optional, you can
        pass zero. If non-zero this value is used to avoid the association
        jumping as vertices are inserted/deleted. @Param(input) numerator the
        distance from vertex number vertex in units of divisor as described
        below. Its range must be between 0 and 32767. @Param(input) divisor the
        number of units (segments) to be considered between the points at
        vertex and vertex+1. The values of numerator and divisor are used
        together as the fraction of the distance between the points at vertex
        and vertex+1, where the association point will be located. The
        denominator must be between 1 and 32767. @Param(input) path display path
        for the element. @Param(input) elemId used if path is NULL...i.e.
        creating assoc to element that has not been added to the file yet. No
        verification on the association can be done in this case. @Return
        returns SUCCESS (zero) if it is able to create a valid association.
        Otherwise, it returns a non-zero value.
        
        See also:
        Assoc.CreateLinear Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateLinear(assoc: MSPyDgnPlatform.AssocPoint, inPoint: MSPyBentleyGeom.DPoint3d, vertex: int, nVertex: int, lineNo: int, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents a point on a
        linear element. This function is similar to Assoc.CreateKeypoint
        but has the advantage that it creates associations to multi-line
        elements as well as other linear elements. Also, this function does
        not require the numerator and divisor parameters as does
        Assoc.CreateKeypoint. Instead, this function automatically
        calculates the keypoint numerator and divisor based on inPoint and the
        specified segment of the linear element.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. @Param(input) inPoint is the location
        on the specified linear element that is converted to an associative
        point. @Param(input) vertex is the index of the vertex directly preceding
        the associative point. @Param(input) nVertex the total number of vertices
        of the linear element. This parameter is optional, you can pass zero.
        If non-zero this value is used to avoid the association jumping as
        vertices are inserted/deleted. @Param(input) lineNo is a line number used
        for multi-lines only. @Param(input) path display path for the element.
        @Param(input) elemId used if path is NULL...i.e. creating assoc to
        element that has not been added to the file yet. No verification on
        the association can be done in this case. @Return SUCCESS if a valid
        linear association is created. Otherwise an non-zero error status is
        returned.
        
        See also:
        Assoc.CreateKeypoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateMline(assoc: MSPyDgnPlatform.AssocPoint, vertex: int, nVertex: int, lineNo: int, offset: float, joint: int, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents a point on a
        multi-line element.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. @Param(input) vertex the index of the
        vertex directly preceding or at the association point. @Param(input)
        nVertex the total number of vertices of the linear element. This
        parameter is optional, you can pass zero. If non-zero this value is
        used to avoid the association jumping as vertices are
        inserted/deleted. @Param(input) lineNo indicates which line in the multi-
        line is the association's object. This value is an index into the
        multi-line profile information that was copied into the multi-line
        from the tcb when the multi-line was created. @Param(input) offset the
        distance from the specified vertex to the association point, measured
        along the work line and divided by the work line length. The
        information needed to calculate this parameter can be obtained using
        the Vec.... functions. offset is not used if joint is set to true.
        @Param(input) joint If joint is true, the association point is at the
        intersection of the line specified by lineNo and the joint vector is
        at vertex. In other words, the association point will always be on the
        joint. @Param(input) path display path for the element. @Param(input) elemId
        used if path is NULL...i.e. creating assoc to element that has @Return
        SUCCESS (zero) if it is able to create a valid association. Otherwise,
        it returns a non-zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateOrigin(assoc: MSPyDgnPlatform.AssocPoint, option: int, path: MSPyDgnPlatform.DisplayPath, elemId: int) -> int:
        """
        @Description Creates an association that represents the origin of the
        base element. Origin associations can currently be created for cell
        headers, shared cells, text nodes and text elements. For elements
        other than these, an associative point representing the lower left-
        hand corner of the range block for the element is created.
        
        @Param(output) assoc If a valid association is created, the association
        information is returned in assoc. @Param(input) option Origin of
        association options. @Param(input) path display path for the element.
        @Param(input) elemId used if path is NULL...i.e. creating assoc to
        element that has @Return SUCCESS (zero) if it is able to create a
        valid association. Otherwise, it returns a non-zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def ExtractPoint(assoc: MSPyDgnPlatform.AssocPoint, elem: MSPyDgnPlatform.MSElement, pointNum: int, maxPoints: int) -> int:
        """
        @Description Extracts the association information from the specified
        point on the given element
        
        @Param(output) assoc Association information @Param(input) elemP element to
        extract point from @Param(input) pointNum index of point to extract
        @Param(input) maxPoints max assoc pts on element @Return SUCCESS if the
        information is found, ERROR if an error occurs
        
        See also:
        Assoc.InsertPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCurrent(assoc: MSPyDgnPlatform.AssocPoint, point: MSPyBentleyGeom.DPoint3d, option: int, createMask: int) -> bool:
        """
        @Description Gets the current associative point.
        
        @Param(output) assoc the current association point @Param(output) pointP
        location of current association @Param(input) option Option (pass zero)
        @Param(input) createMask element categories not to create associations
        for, use ASSOC_CREATE_MASK_ defines or pass 0 to not restrict allowed
        associations. For example to create an associative dimension you would
        want to check that dimension associations are enabled so you would
        pass ASSOC_CREATE_MASK_DIMENSION. @Return true if associative point
        returned
        
        See also:
        Assoc.ExtractPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElement(outElem: MSPyDgnPlatform.MSElement, tagValue: int, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Attempts to locate the element with the unique ID elemID
        in the model specified by modelRef.
        
        @Param(output) outElmP If found, the element is returned in element If
        NULL is passed for element or filePos, the corresponding data is not
        returned. @Param(output) filePosP If found, the element's file position
        is returned in filePos. @Param(input) tagValue the tag (unique ID number)
        of the element that is the association's object (or root). @Param(input)
        modelRef indicates the model that the element is in. @Return SUCCESS
        (zero) if the requested element is located. If the function is unable
        to locate the element, it returns a non-zero value.
        
        See also:
        $Remark:
        """
        ...
    
    @staticmethod
    def GetElementDescr(tagValue: int, modelRef: MSPyDgnPlatform.DgnModelRef, expandShared: bool) -> tuple:
        """
        @Description Search for the element with the unique ID specified by
        elemID and, if found, return an element descriptor that contains the
        element and any child elements it might have if it is a complex
        element.
        
        @Param(output) outElDPP Return element descr or NULL @Param(output) filePosP
        Return file position or NULL @Param(input) tagValue Tag value to search
        for @Param(input) modelRef source of tagged element @Param(input)
        expandShared expand shared cells @Return SUCCESS if the element is
        found and an element descriptor was successfully created.
        MDLERR_BADFILENUMBER is returned if modelRef is not valid. May return
        ERROR if the element descriptor could not be created.
        
        See also:
        Element.GetID
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetPoint(outPoint: MSPyBentleyGeom.DPoint3d, assocPoint: MSPyDgnPlatform.AssocPoint, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Uses the information in assocPoint to create a 3D data
        point that is returned in outPoint. An Assoc.Create... function
        must create the information in assocPoint.
        
        @Param(output) outPoint the point created by the function. @Param(input)
        assoc association information used to create the point. @Param(input)
        modelRef the model that contains the element and the association.
        @Return SUCCESS (zero) if a valid point is created in dPoint. If the
        information in assocPoint is invalid, the function returns a non-zero
        value.
        
        See also:
        Assoc.CreateArc Assoc.CreateIntersection
        Assoc.CreateKeypoint Assoc.CreateMline
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetPointFromElement(outPoint: MSPyBentleyGeom.DPoint3d, elem: MSPyDgnPlatform.MSElement, pointNum: int, maxPoints: int, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Uses the element and point number to create a 3D data
        point that is returned in outPoint. An Assoc.Create... function
        must create the information in assocPoint.
        
        @Param(output) outPoint the point created by the function. @Param(input)
        elemP element to get the point from. @Param(input) pointNum point number
        to get. @Param(input) maxPoints total number of points on element.
        @Param(input) modelRef the model that contains the element and the
        association. @Return SUCCESS (zero) if a valid point is created in
        dPoint. If the information in assocPoint is invalid, the function
        returns a non-zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetRoot(assocPoint: MSPyDgnPlatform.AssocPoint, modelRef: MSPyDgnPlatform.DgnModelRef, rootIndex: int) -> tuple:
        ...
    
    @staticmethod
    def InsertPoint(elem: MSPyDgnPlatform.MSElement, assocPoint: MSPyDgnPlatform.AssocPoint, pointNum: int, maxPoints: int) -> int:
        """
        @Description Insert an association point to the specified element.
        
        @Param(input) elemP element to add association information to @Param(input)
        assocPointP Association information @Param(input) pointNum index of point
        to insert @Param(input) maxPoints max assoc pts on element @Return
        SUCCESS if the information is found, ERROR if an error occurs
        
        See also:
        Assoc.ExtractPoint
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def RemovePoint(elem: MSPyDgnPlatform.MSElement, pointNum: int, maxPoints: int) -> int:
        """
        @Description Removes from element. An Assoc.Create... function must
        create the information in assocPoint.
        
        @Param(input) elemP element to remove assoc point from. @Param(input)
        pointNum point number to remove. @Param(input) maxPoints total number of
        points on element. @Return SUCCESS (zero) if point was associative and
        was removed. If the information is invalid, the function returns a
        non-zero value.
        
        See also:
        Assoc.GetPoint
        
        Remark:
        """
        ...
    
    @staticmethod
    def ResolveAssociations(elem: MSPyDgnPlatform.MSElement, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Removes all association points from an element.
        
        @Param(input) elemP element to remove assoc point from. @Param(input)
        modelRef the model that contains the element and the association.
        @Return SUCCESS (zero) if associative points removed. If the
        information is invalid, the function returns a non-zero value.
        
        See also:
        Assoc.GetPoint @Remarks For an ATTRIBUTE_ELM element (tag
        element) that is associated with a base element, this computes the
        distance from the tag to the base element and adds that distance
        to the origin of the tag. Then it breaks the association between
        the tag and the base element. @Remarks For all element types, the
        final step is to remove all association point dependency linkages.
        
        Remark:
        """
        ...
    
    @staticmethod
    def StripTag(elem: MSPyDgnPlatform.MSElement) -> int:
        """
        @Description Remove an association tag from a single element
        
        @Param(input) elemP element to strip tag from @Return SUCCESS if the
        operation is complete successfully, ERROR otherwise
        
        See also:
        Assoc.StripTags
        
        Remark:
        """
        ...
    
    @staticmethod
    def TagElementDescr(elDescr: MSPyDgnPlatform.MSElementDescr, mnodelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Get the tag value from an element at the specified offset
        within the specified element descriptor. If the specified element does
        not have a tag, then it is assigned a tag and the new tag value is
        returned in the newTagP argument. This function will return an error
        if the element descriptor has the complex bit set.
        
        @Param(output) newTagP is the new tag created by the function.
        @Param[in,out] elDscrP is the element descriptor to which the tag is
        added. @Param(input) modelRef indicates the model containing the element
        receiving the tag. @Return SUCCESS if the operation is completed
        successfully, otherwise ERROR
        
        See also:
        Assoc.TagElementValue
        
        Remark:
        """
        ...
    
    @staticmethod
    def TagElementValue(elem: MSPyDgnPlatform.MSElement, modelRef: MSPyDgnPlatform.DgnModelRef, tag: int) -> tuple:
        """
        @Description Assign a new tag value to the specified element if it
        doesn't already have one.
        
        @Param(output) tagValue is the tag value assigned to the element.
        @Param(input) elemP is the element that receives the tag. @Param(input)
        modelRef inidcates the model containing the element. @Param(input) inTag
        is the input tag value, or zero. @Return SUCCESS if the operation
        completed successfully, otherwise ERROR.
        
        See also:
        Assoc.TagElementDescr
        
        Remark:
        """
        ...
    
    @staticmethod
    def VertexAddedOrRemoved(elem: MSPyDgnPlatform.MSElement, pointNum: int, maxPoints: int, inserted: bool) -> int:
        """
        @Description Adjust association point indices for the specified
        element.
        
        @Param(input) elemP element to add association information to @Param(input)
        pointNum index of point added/removed @Param(input) maxPoints max assoc
        pts on element @Param(input) inserted pass true is vertex has been added;
        false if it's been removed @Return SUCCESS if the information is
        found, ERROR if an error occurs
        
        See also:
        Assoc.ExtractPoint
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class AssociativeExtractSettings:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.AssociativeExtractSettings) -> None
        
        2. __init__(self: MSPyMstnPlatform.AssociativeExtractSettings, dgnModel: MSPyDgnPlatform.DgnModel) -> None
        """
        ...
    
    @property
    def deleteWithParent(arg0: MSPyMstnPlatform.AssociativeExtractSettings) -> bool:
        ...
    @deleteWithParent.setter
    def deleteWithParent(arg0: MSPyMstnPlatform.AssociativeExtractSettings, arg1: bool) -> None:
        ...
    
    @property
    def keepAssociative(arg0: MSPyMstnPlatform.AssociativeExtractSettings) -> bool:
        ...
    @keepAssociative.setter
    def keepAssociative(arg0: MSPyMstnPlatform.AssociativeExtractSettings, arg1: bool) -> None:
        ...
    
    @property
    def moveElement(arg0: MSPyMstnPlatform.AssociativeExtractSettings) -> bool:
        ...
    @moveElement.setter
    def moveElement(arg0: MSPyMstnPlatform.AssociativeExtractSettings, arg1: bool) -> None:
        ...
    
    @property
    def offset(self: MSPyMstnPlatform.AssociativeExtractSettings) -> float:
        ...
    @offset.setter
    def offset(self: MSPyMstnPlatform.AssociativeExtractSettings, arg0: float) -> None:
        ...
    
    @property
    def type(self: MSPyMstnPlatform.AssociativeExtractSettings) -> int:
        ...
    @type.setter
    def type(self: MSPyMstnPlatform.AssociativeExtractSettings, arg0: int) -> None:
        ...
    
class AssociativeExtractSymbologySettings:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> None
        
        2. __init__(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings, dgnModel: MSPyDgnPlatform.DgnModel) -> None
        """
        ...
    
    @property
    def circularProfile(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting) -> bool:
        ...
    @circularProfile.setter
    def circularProfile(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting, arg1: bool) -> None:
        ...
    
    @property
    def classOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @classOverride.setter
    def classOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
    @property
    def color(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> int:
        ...
    @color.setter
    def color(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg0: int) -> None:
        ...
    
    @property
    def colorOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @colorOverride.setter
    def colorOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
    @property
    def doEditmode(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting) -> bool:
        ...
    @doEditmode.setter
    def doEditmode(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting, arg1: bool) -> None:
        ...
    
    @property
    def doInsideDiameter(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting) -> bool:
        ...
    @doInsideDiameter.setter
    def doInsideDiameter(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting, arg1: bool) -> None:
        ...
    
    @property
    def doOutsideDiameter(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting) -> bool:
        ...
    @doOutsideDiameter.setter
    def doOutsideDiameter(arg0: MSPyMstnPlatform.ExtrudeAlongProfileSetting, arg1: bool) -> None:
        ...
    
    @property
    def elementclass(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @elementclass.setter
    def elementclass(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
    @property
    def level(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> int:
        ...
    @level.setter
    def level(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg0: int) -> None:
        ...
    
    @property
    def levelOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @levelOverride.setter
    def levelOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
    @property
    def style(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> int:
        ...
    @style.setter
    def style(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg0: int) -> None:
        ...
    
    @property
    def styleOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @styleOverride.setter
    def styleOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
    @property
    def weight(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> int:
        ...
    @weight.setter
    def weight(self: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg0: int) -> None:
        ...
    
    @property
    def weightOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings) -> bool:
        ...
    @weightOverride.setter
    def weightOverride(arg0: MSPyMstnPlatform.AssociativeExtractSymbologySettings, arg1: bool) -> None:
        ...
    
class Asynch_update_view:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.Asynch_update_view) -> None:
        ...
    
    @property
    def active(self: MSPyMstnPlatform.Asynch_update_view) -> int:
        ...
    @active.setter
    def active(self: MSPyMstnPlatform.Asynch_update_view, arg0: int) -> None:
        ...
    
    @property
    def gw(arg0: MSPyMstnPlatform.Asynch_update_view) -> MSWindow:
        ...
    
    @property
    def incremental(self: MSPyMstnPlatform.Asynch_update_view) -> int:
        ...
    @incremental.setter
    def incremental(self: MSPyMstnPlatform.Asynch_update_view, arg0: int) -> None:
        ...
    
    @property
    def levelClassMask(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyDgnPlatform.LevelClassMask:
        ...
    @levelClassMask.setter
    def levelClassMask(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyDgnPlatform.LevelClassMask) -> None:
        ...
    
    @property
    def phys_screen(self: MSPyMstnPlatform.Asynch_update_view) -> int:
        ...
    @phys_screen.setter
    def phys_screen(self: MSPyMstnPlatform.Asynch_update_view, arg0: int) -> None:
        ...
    
    @property
    def rotmatrix(arg0: MSPyMstnPlatform.Asynch_update_view) -> list:
        ...
    
    @property
    def screen_corner(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.Point3d:
        ...
    @screen_corner.setter
    def screen_corner(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.Point3d) -> None:
        ...
    
    @property
    def screen_origin(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.Point3d:
        ...
    @screen_origin.setter
    def screen_origin(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.Point3d) -> None:
        ...
    
    @property
    def update_corner(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.Point3d:
        ...
    @update_corner.setter
    def update_corner(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.Point3d) -> None:
        ...
    
    @property
    def update_origin(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.Point3d:
        ...
    @update_origin.setter
    def update_origin(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.Point3d) -> None:
        ...
    
    @property
    def viewFlags(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyDgnPlatform.ViewFlags:
        ...
    @viewFlags.setter
    def viewFlags(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyDgnPlatform.ViewFlags) -> None:
        ...
    
    @property
    def viewdelta(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.DPoint3d:
        ...
    @viewdelta.setter
    def viewdelta(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.DPoint3d) -> None:
        ...
    
    @property
    def viewnum(self: MSPyMstnPlatform.Asynch_update_view) -> int:
        ...
    @viewnum.setter
    def viewnum(self: MSPyMstnPlatform.Asynch_update_view, arg0: int) -> None:
        ...
    
    @property
    def vieworg(self: MSPyMstnPlatform.Asynch_update_view) -> MSPyBentleyGeom.DPoint3d:
        ...
    @vieworg.setter
    def vieworg(self: MSPyMstnPlatform.Asynch_update_view, arg0: MSPyBentleyGeom.DPoint3d) -> None:
        ...
    
    @property
    def window(self: MSPyMstnPlatform.Asynch_update_view) -> int:
        ...
    @window.setter
    def window(self: MSPyMstnPlatform.Asynch_update_view, arg0: int) -> None:
        ...
    
class BRepVertexGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, subEntity: MSPyDgnPlatform.ISubEntity) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class BaseWindow:
    """
    None
    """

    def GetDockExtent(self: MSPyMstnPlatform.BaseWindow) -> MSPyBentleyGeom.Point2d:
        """
        Returns the size of the Window as docked
        """
        ...
    
    def GetDockPosition(self: MSPyMstnPlatform.BaseWindow) -> MSPyMstnPlatform.DockPosition:
        """
        Returns the dock position of the Window
        
        See also:
        DockPosition
        """
        ...
    
    def GetDockPriority(self: MSPyMstnPlatform.BaseWindow) -> MSPyMstnPlatform.DockPriority:
        """
        Returns the dock priority of the Window
        
        See also:
        DockPriority
        """
        ...
    
    def GetDoubleBufferContext(self: MSPyMstnPlatform.BaseWindow) -> int:
        """
        Returns the double-buffer context for the Window
        """
        ...
    
    def GetGraphHandle(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the Graphics Handle for the Window. In Microsoft Windows, this
        is an HWND.
        """
        ...
    
    def GetNext(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the next Window in the linked list
        """
        ...
    
    def GetPrevious(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the previous Window in the linked list
        """
        ...
    
    def GetScreenContext(self: MSPyMstnPlatform.BaseWindow) -> int:
        """
        Returns the screen device context for the Window
        """
        ...
    
    def GetScreenNumber(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the screen number for the Window
        """
        ...
    
    def GetTitle(self: MSPyMstnPlatform.BaseWindow) -> str:
        """
        Gets the title for the Window. @Param(output) title A WString that
        receives a copy of the Window's title
        """
        ...
    
    def IsDisplayed(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window has been displayed initially
        """
        ...
    
    def Maximized(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window is currently maximized
        """
        ...
    
    def Minimized(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window is currently minimized
        """
        ...
    
    def SetTitle(self: MSPyMstnPlatform.BaseWindow, title: str) -> int:
        """
        Sets the title for the Window. @Param(input) title The new title for the
        Window
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class BatchProcessing_States:
    """
    Members:
    
    ePROCESSSTATE_Inactive
    
    ePROCESSSTATE_Processing
    
    ePROCESSSTATE_Paused
    
    ePROCESSSTATE_Done
    
    ePROCESSSTATE_Cancelled
    
    ePROCESSSTATE_OpeningFile
    
    ePROCESSSTATE_AnalyzeFile
    
    ePROCESSSTATE_ClosedFile
    """

    def __init__(self: MSPyMstnPlatform.BatchProcessing_States, value: int) -> None:
        ...
    
    ePROCESSSTATE_AnalyzeFile: BatchProcessing_States
    
    ePROCESSSTATE_Cancelled: BatchProcessing_States
    
    ePROCESSSTATE_ClosedFile: BatchProcessing_States
    
    ePROCESSSTATE_Done: BatchProcessing_States
    
    ePROCESSSTATE_Inactive: BatchProcessing_States
    
    ePROCESSSTATE_OpeningFile: BatchProcessing_States
    
    ePROCESSSTATE_Paused: BatchProcessing_States
    
    ePROCESSSTATE_Processing: BatchProcessing_States
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.BatchProcessing_States) -> int:
        ...
    
class ButtonTrans:
    """
    Members:
    
    eUp
    
    eDown
    
    eTimeout
    
    eMotion
    
    eClick
    
    eStartDrag
    
    eUndefined
    """

    def __init__(self: MSPyMstnPlatform.ButtonTrans, value: int) -> None:
        ...
    
    eClick: ButtonTrans
    
    eDown: ButtonTrans
    
    eMotion: ButtonTrans
    
    eStartDrag: ButtonTrans
    
    eTimeout: ButtonTrans
    
    eUndefined: ButtonTrans
    
    eUp: ButtonTrans
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ButtonTrans) -> int:
        ...
    
class CadInputType:
    """
    Members:
    
    eCadInputTypeNone
    
    eCadInputTypeCommand
    
    eCadInputTypeReset
    
    eCadInputTypeDataPoint
    
    eCadInputTypeKeyin
    
    eCadInputTypeAny
    """

    def __init__(self: MSPyMstnPlatform.CadInputType, value: int) -> None:
        ...
    
    eCadInputTypeAny: CadInputType
    
    eCadInputTypeCommand: CadInputType
    
    eCadInputTypeDataPoint: CadInputType
    
    eCadInputTypeKeyin: CadInputType
    
    eCadInputTypeNone: CadInputType
    
    eCadInputTypeReset: CadInputType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CadInputType) -> int:
        ...
    
class Cell:
    """
    None
    """

    @staticmethod
    def AddLibDescr(cellEdP: MSPyDgnPlatform.MSElementDescr, cellType: MSPyMstnPlatform.CellAddType, convertNestedCellsToRefs: bool) -> int:
        """
        @Description Create a new cell in the currently attached cell library.
        This function also handles copying styles, dependencies, etc. into the
        library. @Param(input) cellEdP a cell element descriptor (type 2) to add
        to the library. @Param(input) cellType the type of the cell in the
        library. Use CellAddType.FromContext to choose GRAPHIC or POINT based
        on the type of the cell. Otherwise, possible values for cellType are
        CellAddType.NormalCell for a normal graphic cell or
        CellAddType.PointCell for a point cell. @Param(input)
        convertNestedCellsToRefs if true, a nested cell with the same name as
        a cell (model) in the destination library will be replaced by a
        reference to that cell, which matches the behavior of the MicroStation
        cell creation tool. When deciding whether to replace, only the cell
        names are compared, not the geometry. Pre-V8 behavior of this function
        was to set this to false. Cell.CreateFromFence calls this function
        with convertNestedCellsToRefs set to true. @Return SUCCESS if the cell
        is added to the library, or an error otherwise. mdlErrno is set to the
        value that indicates the error cause. Possible values include
        MDLERR_INVALIDLIBRARY, MDLERR_NOCELLLIBRARY and MDLERR_FILEREADONLY.
        @Remarks If a cell with the same name already exists in the library,
        it will be replaced.
        
        See also:
        Cell.Create Cell.CreateFromFence
        
        Remark:
        """
        ...
    
    @staticmethod
    def AttachLibrary(fileName: MSPyBentley.BeFileName, inputName: MSPyBentley.BeFileName, defaultDir: str, fromKeyin: int) -> int:
        """
        @Description Attaches a new cell library to the current design file.
        If a library is successfully attached, filename is set to the cell
        library's full file specification. If the library is a V7 cell library
        then this function will fail. It is the equivalent of calling
        Cell.AttachLibraryEx with LIBRARY_IgnoreV7Libraries. @Param(output)
        filename name of cell library opened. This should be a string buffer
        at least MAXFILELENGTH characters long. @Param(input) inputname is the
        name of the cell library. inputName may contain a path specification.
        However, if it does not, then MS_CELL and defaultDir (if defined) are
        searched for the file. If this parameter is NULL, then the active
        library is detached. @Param(input) defaultDir additional path to search.
        Can be NULL. @Param(input) fromkeyin if true, the path information from
        inputName is used. If it is false, Cell.AttachLibrary assumes that
        inputName came from the information stored in the design file header
        (where the path information is not always correct), and it only uses
        the path information from inputName if the library cannot be found
        anywhere else. MDL applications should normally set fromKeyin to true.
        @Remarks To detach a cell library, pass a NULL string for inputName.
        @Return SUCCESS if a cell library is attached. If it cannot find the
        cell library, it returns a non-zero value.
        
        See also:
        Cell.AttachLibraryEx
        
        Remark:
        """
        ...
    
    @staticmethod
    def AttachLibraryEx(fileName: MSPyBentley.BeFileName, inputName: MSPyBentley.BeFileName, defaultDir: str, fromKeyin: int, libraryFlag: int) -> int:
        """
        @Description Attach a new cell library to the current design file. If
        a library is successfully attached, filename is set to the cell
        library's full file specification. @Param(output) filename name of cell
        library opened. This should be a string buffer at least MAXFILELENGTH
        characters long. @Param(input) inputname is the name of the cell library.
        inputName may contain a path specification. However, if it does not,
        then MS_CELL and defaultDir (if defined) are searched for the file. If
        this parameter is NULL, then the active library is detached.
        @Param(input) defaultDir additional path to search. Can be NULL.
        @Param(input) fromkeyin if true, the path information from inputName is
        used. If it is false, Cell.AttachLibraryEx assumes that inputName
        came from the information stored in the design file header (where the
        path information is not always correct), and it only uses the path
        information from inputName if the library cannot be found anywhere
        else. MDL applications should normally set fromKeyin to true.
        @Param(input) libraryFlag specifies how to handle the cell library if its
        format is not up to date. If the cell library is a V7 cell library,
        then it can be upgraded. See for the possible values. @Return SUCCESS
        if the operation is completed and a cell library was attached,
        otherwise an error value.
        
        See also:
        Cell.AttachLibrary
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyCellDefinition(destLibrary: MSPyDgnPlatform.DgnFile, cellName: str, sourceLibrary: MSPyDgnPlatform.DgnFile) -> int:
        """
        @Description Duplicate a cell definition from one cell library to
        another.
        
        Remark:
        s This function always try to convert nested cells to references
        (see Cell.AddLibDescr). @Param(input) destLibrary the cell library
        to copy the cell to. @Param(input) cellName the name of the cell to
        copy. @Param(input) sourceLibrary the cell library to copy the cell
        from. @Return SUCCESS if the cell is copied, otherwise an error
        code.
        
        Remark:
        
        
        @See Cell.GetLibraryObject
        """
        ...
    
    @staticmethod
    def Create(cellElm: MSPyDgnPlatform.MSElement, cellName: str, origin: MSPyBentleyGeom.DPoint3d, pointCell: bool) -> int:
        """
        @Description Creates a new cell element based on the data provided.
        This can be used as an orphan cell, or later added to a cell library
        using Cell.AddLibDescr. Typically this function is used to create a
        cell header, and Elmdscr.AppendDscr is then used to add elements.
        @Param(output) cellElm This is a pointer to a full MSElement union which
        is filled in. @Param(input) cellName the name of the cell; may be NULL.
        @Param(input) origin the origin of the cell. If NULL is passed for
        cellOrigin, the (0, 0, 0) point for the current coordinate system is
        used. @Param(input) pointCell true if the cell is to be a point cell,
        otherwise false. @Return SUCCESS if the operation is completed
        successfully, otherwise ERROR
        
        See also:
        Cell.AddLibDescr Cell.CreateFromFence
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateFromFence(cellName: str, description: str, origin: MSPyBentleyGeom.DPoint3d, pointCell: bool) -> int:
        """
        @Description Create a new cell in the current cell library that
        contains the elements in the fence. It creates the new cell from the
        current selection set if no fence is defined. @Param(input) cellName the
        name of the cell in the library. This must be less than
        MSPyDgnPlatform.MAX_CELLNAME_LENGTH characters, and must be valid as
        tested by Model.NameIsValid. @Param(input) descr is the cell
        description; it may not exceed MAX_CELLDSCR_LENGTH characters.
        @Param(input) rOrigin the origin of the cell. If NULL is passed for
        cellOrigin, tcb->celor is used. @Param(input) pointCell true if the cell
        is to be a point cell, otherwise false. @Remarks This function
        collects up all the elements in the fence or selection set and creates
        a cell element out of them. @Return SUCCESS or the error that occurred
        which prevented the cell creation. mdlErrno is also set to the error
        value. Possible values include MDLERR_INVALIDLIBRARY,
        MDLERR_NOCELLLIBRARY and MDLERR_FILEREADONLY.
        
        See also:
        Cell.Create Cell.AddLibDescr
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateFromFenceByType(cellName: str, description: str, origin: MSPyBentleyGeom.DPoint3d, cellType: int) -> int:
        """
        @Description Create a new cell in the current cell library that
        contains the elements in the fence. It creates the new cell from the
        current selection set if no fence is defined. @Param(input) cellName the
        name of the cell in the library. This must be less than
        MSPyDgnPlatform.MAX_CELLNAME_LENGTH characters, and must be valid as
        tested by Model.NameIsValid. @Param(input) descr is the cell
        description; it may not exceed MAX_CELLDSCR_LENGTH characters.
        @Param(input) rOrigin the origin of the cell. If NULL is passed for
        cellOrigin, tcb->celor is used. @Param(input) cellType the type of cell
        to create (point, graphic, parametric) @Remarks This function collects
        up all the elements in the fence or selection set and creates a cell
        element out of them. @Return SUCCESS or the error that occurred which
        prevented the cell creation. mdlErrno is also set to the error value.
        Possible values include MDLERR_INVALIDLIBRARY, MDLERR_NOCELLLIBRARY
        and MDLERR_FILEREADONLY.
        
        See also:
        Cell.Create Cell.AddLibDescr
        
        Remark:
        """
        ...
    
    @staticmethod
    def DeleteInLibrary(cellName: str) -> int:
        """
        @Description Remove a cell from the current active cell library by
        name. @Param(input) cellName name of cell to be deleted. @Return SUCCESS
        if the specified cell was deleted or one of the following error
        values:MDLERR_CELLNOTFOUND, MDLERR_CELLEXISTS, MDLERR_INVALIDLIBRARY,
        MDLERR_NOCELLLIBRARY or MDLERR_FILEREADONLY.
        
        Remark:
        """
        ...
    
    @staticmethod
    def ExistsInLibrary(cellName: str) -> bool:
        """
        @Description Indicates whether a cell with the specified name exists
        in the current cell library. @Param(input) cellName name of the cell to
        search for. @Return true if the cell name exists in the library;
        otherwise it returns false.
        
        See also:
        Cell.PlaceCell Cell.GetElmDscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def Extract(origin: MSPyBentleyGeom.DPoint3d, shape: MSPyBentleyGeom.DPoint3d, rMatrix: MSPyBentleyGeom.RotMatrix, scale: MSPyBentleyGeom.DPoint3d, cellName: MSPyBentley.WString, cell: MSPyDgnPlatform.MSElement) -> int:
        """
        @Description Extracts the information from a cell header element. If
        any parameters are NULL, this function does not attempt to fill them
        in. All parameters are returned in the current (design file)
        coordinate system. @Param(output) origin is the cell origin. @Param(output)
        shape returns an array of eight Dpoint3d's which represent the minimum
        bounding box for the cell in the coordinate system of the cell. This
        idea can be illustrated by using MicroStation's element selection tool
        to select a cell. MicroStation places handles on the boundary which
        defines the cell, and these handles correlate to the eight Dpoint3ds
        returned by Cell.Extract. Note that this must point to an array
        large enough to hold the 8 points. @Param(output) rMatrix the rotation
        matrix for the cell. @Param(output) scale the cell's X, Y and Z scale
        factors. @Param(output) cellName the cell's name in Unicode. @Param(input)
        bufferSize if extracting cell's name, number of widechars name buffer
        can hold. This is ignored if cellName is NULL. @Param(input) cell cell
        element to extract information from. @Remarks The points in shape are
        transformed into the current coordinate system before they are
        returned. They do not necessarily represent a minimum bounding box in
        the current coordinate system. @Return SUCCESS if cell is a valid
        MicroStation element of type CELL_HEADER_ELM. Otherwise, it returns
        MDLERR_BADELEMENT.
        
        See also:
        Cell.Create
        
        Remark:
        """
        ...
    
    @staticmethod
    def ExtractDescription(cellDescr: MSPyBentley.WString, elem: MSPyDgnPlatform.MSElement) -> int:
        """
        @Description Retrieve the description from a cell element and copy it
        to the provided buffer. Note that graphic cells and shared cell
        instances as placed by MicroStation do not keep their descriptions.
        For shared cells, you should use this function on the definition. For
        graphic cells, you must find the cell in a library and extract its
        description that way. @Param(input) cellDescrP the buffer where the
        extracted cell description will be placed. @Param(input) bufferSize the
        maximum number of MSWChars to copy to the cellDescrP buffer.
        @Param(input) elmP is the cell element from which the description is
        extracted. @Return SUCCESS if the operation is completed successfully,
        otherwise ERROR
        
        See also:
        Cell.SetDescription Cell.ExtractName
        
        Remark:
        """
        ...
    
    @staticmethod
    def ExtractName(cellName: MSPyBentley.WString, elem: MSPyDgnPlatform.MSElement) -> int:
        """
        @Description Retrieve the name string from a non-shared or shared cell
        element and copy it to the provided buffer. @Param(output) cellNameP the
        buffer where the extracted cell name will be placed. @Param(input)
        bufferSize the maximum number of MSWChars to copy to cellNameP.
        @Param(input) elmP the cell element from which the name is extracted.
        @Return SUCCESS if the cell name is successfully found and copied to
        the buffer, otherwise ERROR.
        
        See also:
        Cell.SetName Cell.ExtractDescription
        
        Remark:
        """
        ...
    
    @staticmethod
    def FindCell(preferredLib: MSPyDgnPlatform.DgnFile, cellName: str, searchAll: int) -> tuple:
        """
        @Description Search for a cell with the specified cell name. The
        search order is first the library passed in as preferredLib; then the
        current active cell library; and then sequentially though the files
        listed in MS_CELLLIST and MS_BLOCKLIST if the searchAll parameter is
        true. The first cell found with the requested name will stop the
        search. @Remarks This function will only find cells which have export
        rights or better. Because of the rights limitation, protected
        libraries will be skipped and cells will be searched for through th
        rest of the path. To specify rights, see Cell.FindCellEx.
        @Param(output) library is the library where the cell was found, if the
        search was successful. This argument will be NULL if the cell was not
        found. @Param(input) preferredLib the cell library to search first, or
        NULL. @Param(input) cellName the name of the cell to search for.
        @Param(input) searchAll indicates whether all of the cell libraries in
        the MS_CELLLIST and MS_BLOCKLIST paths are to be searched. Setting
        this value to 0 indicates that only the preferredLib library is
        searched; setting this value to 1 indicates that all cell libraries
        are to be searched; setting this value to 2 indicates that all cell
        libraries are to be searched and messages generated as the search
        progresses. Messages are sent to the error display field in the
        MicroStation window. @Return SUCCESS if the cell was found, otherwise
        MDLERR_CELLNOTFOUND.
        
        Remark:
        """
        ...
    
    @staticmethod
    def FindCellEx(preferredLib: MSPyDgnPlatform.DgnFile, cellName: str, searchAll: int, rights: int) -> tuple:
        """
        @Description Search for a cell with the specified cell name. The
        search order is first the library passed in as preferredLib; then the
        current active cell library; and then sequentially though the files
        listed in MS_CELLLIST and MS_BLOCKLIST if the searchAll parameter is
        true. The first cell found with the requested name will stop the
        search. This function differs from Cell.FindCell by the rights
        parameter which allows the caller to specify the desired permission
        level. @Param(output) library is the library where the cell was found, if
        the search was successful. This argument will be NULL if the cell was
        not found. @Param(input) preferredLib the cell library to search first,
        or NULL. @Param(input) cellName the name of the cell to search for.
        @Param(input) searchAll indicates whether all of the cell libraries in
        the MS_CELLLIST and MS_BLOCKLIST paths are to be searched. Setting
        this value to 0 indicates that only the preferredLib library is
        searched; setting this value to 1 indicates that all cell libraries
        are to be searched; setting this value to 2 indicates that all cell
        libraries are to be searched and messages generated as the search
        progresses. Messages are sent to the error display field in the
        MicroStation window. @Param(input) rights The level of rights that should
        be tested. See DgnFileObj.CheckRights for a description of the
        choices. @Return SUCCESS if the cell was found, otherwise
        MDLERR_CELLNOTFOUND.
        
        Remark:
        """
        ...
    
    @staticmethod
    def FixLevels(elemDescr: MSPyDgnPlatform.MSElementDescr, relativeMode: int, baseLevel: int, library: MSPyDgnPlatform.DgnFile) -> int:
        """
        @Description This function is just a direct call to
        Cell.FixLevelsByCode, so that function should be called instead. It
        will adjust element levels in a cell element descriptor, elemDscr.
        This adjustment is based on the cell type and the values of
        relativeMode and baseLevel. It uses the following logic:
        
        ```
        if (cell is a point cell)
        {
        set all levels to baseLevel
        }
        else if (relativeMode is true)
        {
        adjust so the lowest level used in cell is baseLevel
        }
        ```
        
        If relative mode is chosen, the all element level ids are adjusted by
        the difference between the lowest level id in the cell and the base
        level id provided.
        
        @Param(input) elemDscr cell element descriptor @Param(input) relativeMode
        true for relative level. @Param(input) baseLevel used for point cells and
        relative mode. @Param(input) library This is no longer used and can be
        NULL. Instead the model ref from elemDscr->h.dgnModelRef is used.
        @Remarks This function is needed because Cell.GetElmDscr does not
        apply the above logic before it returns the cell's element descriptor.
        This functionality was left out of Cell.GetElmDscr so that you
        could get the original level values. @Return SUCCESS if the levels
        could be fixed.
        
        See also:
        Cell.GetElmDscr Cell.FixLevelsByCode
        
        Remark:
        """
        ...
    
    @staticmethod
    def FixLevelsByCode(elemDescr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef, relativeMode: int, baseLevel: int) -> int:
        """
        @Description Adjust element levels in a cell element descriptor,
        elemDscr. This adjustment is based on the cell type and the values of
        relativeMode and baseLevelId. It uses the following logic:
        
        ```
        if (cell is a point cell)
        {
        set all levels to baseLevel
        }
        else if (relativeMode is true)
        {
        adjust so the lowest level used in cell is baseLevel
        }
        ```
        
        If relative mode is chosen, the baseLevelId is converted to a level
        code and all element level codes are adjusted by the difference
        between the base level code and lowest level code in the cell.
        
        @Param(input) elemDscr cell element descriptor @Param(input) pModelRef model
        ref of element descriptor @Param(input) relativeMode relative or absolute
        @Param(input) baseLevelId used for point cells and relative mode. This is
        a level number, not a level code. @Remarks This function is needed
        because Cell.GetElmDscr does not apply the above logic before it
        returns the cell's element descriptor. This functionality was left out
        of Cell.GetElmDscr so that you could get the original level values.
        @Return SUCCESS if the level codes could be adjusted.
        
        See also:
        Cell.GetElmDscr Cell.FixLevels
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElmDscr(origin: MSPyBentleyGeom.DPoint3d, scale: MSPyBentleyGeom.DPoint3d, trueScale: bool, rotMatrix: MSPyBentleyGeom.RotMatrix, attributes: int, ggroup: int, sharedFlag: int, updateMasterFile: bool, cellName: str, library: MSPyDgnPlatform.DgnFile) -> tuple:
        """
        @Description Read the specified cell from the cell library and returns
        the cell's element descriptor. The address of the element descriptor
        for the cell's graphic elements is returned in cellDscrPP. @Remarks If
        empty text nodes are in a cell, MicroStation removes them before it
        places the cell. These empty text nodes are placed immediately after
        the cell. For this reason, Cell.GetElmDscr also extracts the empty
        text node elements and returns them in a separate element descriptor,
        txtNodeDscrPP. Applications should treat these empty text nodes
        similarly. If txtNodeDscrPP is NULL, then empty text nodes will be
        lost. @Remarks If sharedFlag is 1 or 2 and the user has turned shared
        cells on, the function first searches the active file for a shared
        cell instance without reading the cell library. If no shared cell is
        found, then the library is searched. @Param(output) cellDscrPP cell
        element descriptor @Param(output) txtNodeDscrPP element descriptor for
        empty text nodes. If NULL, these text nodes are lost. @Param(input)
        rOrigin the location of the cell's origin. If origin is NULL, the cell
        is transformed to the (0, 0, 0) point in the current coordinate
        system. @Param(input) scale points to a Dpoint3d structure holding the X,
        Y and (in 3D) Z scale factors to be applied to the cell's elements. If
        scale is NULL, the cell is not scaled. @Param(input) trueScale indicates
        whether the cell definition and DGN file units are used in scaling the
        cell, resulting in cells that have the same size between models with
        different units. ACTIVEMODEL is assumed for the destination.
        @Param(input) rotMatrix is the rotation matrix that defines the cell's
        orientation. If rMatrix is NULL, the identity matrix is used.
        @Param(input) attributes an array of attribute information to append to
        the cell header. This parameter has been deprecated; please see the
        mdlLinkage functions to append attributes to the cell header.
        @Param(input) ggroup is the graphic group number for the cell's elements.
        A value of 0 means that the elements will not be part of a graphic
        group. @Param(input) sharedFlag indicates whether the element descriptor
        is for a shared or unshared cell. If sharedFlag is 0, an unshared cell
        is returned. If sharedFlag is 1, a shared cell is returned if found,
        otherwise an unshared cell. If sharedFlag is 2, the state of the user-
        specified shared flag is used. @Param(input) updateMasterFile indicates
        that the cell is to be placed in the active model ref, so all
        necessary styles, etc. should be copied to the active file. If this
        parameter is set to false, then the display of the cell elements may
        not match the original model. @Param(input) cellName the name of the cell
        to be returned. @Param(input) library the library object containing the
        cell. If this argument is NULL, the cell is searched for. It is
        usually acquired via Cell.FindCell or Cell.GetLibraryObject.
        @Return SUCCESS if the cell is read and cellDscrPP is valid.
        Otherwise, it returns an error status.
        
        See also:
        Cell.PlaceCell Cell.GetElmDscrExtended
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElmDscrExtended(origin: MSPyBentleyGeom.DPoint3d, scale: MSPyBentleyGeom.DPoint3d, trueScale: bool, destModelRef: MSPyDgnPlatform.DgnModelRef, rotMatrix: MSPyBentleyGeom.RotMatrix, attributes: int, ggroup: int, sharedFlag: int, keepCellDimensionality: bool, updateDestFile: bool, cellName: str, library: MSPyDgnPlatform.DgnFile) -> tuple:
        ...
    
    @staticmethod
    def GetLibraryName(fileName: MSPyBentley.BeFileName) -> None:
        ...
    
    @staticmethod
    def GetLibraryObject(libName: str, unused: bool) -> tuple:
        """
        @Description Returns a pointer to the cell library object of the given
        name. This is used by Cell.GetElmDscr, Cell.PlaceCell, and other
        functions that require a cell library handle. @Param(output) ppLibraryObj
        pointer to the cell library object. @Param(input) pLibName name of the
        cell library to find. @Param(input) unused Unused; pass false. @Return
        SUCCESS if the library of the given name is found, otherwise ERROR.
        
        See also:
        Cell.PlaceCell Cell.GetElmDscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsPointCell(hdr: MSPyDgnPlatform.MSElement) -> bool:
        """
        @Description Determine whether the cell cellHeader is a point cell.
        @Param(input) hdr cell header element @Return true if cellHeader is a
        point cell, false for any other type.
        
        Remark:
        """
        ...
    
    @staticmethod
    def ModifyInfo(newName: str, newDescr: str, cellName: str, library: MSPyDgnPlatform.DgnFile) -> int:
        """
        @Description Replace the name and description of a cell in a library.
        @Param(input) newName is the new cell name. Pass NULL to use the old
        name. @Param(input) newdescr is the new cell description. Pass NULL to
        use the old description. @Param(input) cellName is the name of the cell
        to modify. @Param(input) library is the pointer to the cell library to
        use. @Return SUCCESS if the operation is completed successfully,
        otherwise ERROR. @Remarks Cell names are case-insensitive, so this
        function will not work to change only the case of a name. If the cell
        name contains invalid characters, this operation will fail. See
        Model.NameIsValid to test for validity. Cell names are limited to
        MSPyDgnPlatform.MAX_CELLNAME_LENGTH wchars.
        
        Remark:
        
        
        @See Cell.ReadLibraryElements mdlCell_getElmDscr
        Cell.ReplaceLibraryHeaderElement
        """
        ...
    
    @staticmethod
    def PlaceCell(origin: MSPyBentleyGeom.DPoint3d, scale: MSPyBentleyGeom.DPoint3d, trueScale: bool, rotMatrix: MSPyBentleyGeom.RotMatrix, attributes: int, ggroup: int, relativeMode: bool, baseLevel: int, sharedFlag: int, cellName: str, library: MSPyDgnPlatform.DgnFile) -> int:
        """
        @Description Place a cell in the active model of the current design
        file.
        
        Remark:
        s If library is NULL, Cell.PlaceCell scans the current cell
        library for the cell using cellName, and if not found then scans
        libraries in the MS_CELLLIST path.
        
        Remark:
        s If sharedFlag is 1 and a shared cell definition for cellName
        exists in the design file, a new shared cell instance is placed
        without the cell library being read, and library is ignored. If
        the sharedFlag is 1 and no shared cell definition exists, the cell
        will be read from the library and both the shared cell definition
        and instance will be created.
        
        Remark:
        s If the active model's Annotation Scale lock is ON, the active
        annotation scale is propagated to the cell. The cell model (from
        cell library) needs to have the " Can be placed as annotation cell "
        toggle ON in order to be placed as an annotation cell. If that
        toggle is OFF, the active annotation scale is propagated only to
        the annotations contained in that cell model. @Param(input) rOrigin
        the location to place the cell origin. If origin is NULL, the cell
        is placed at the (0, 0, 0) point in the current coordinate system.
        @Param(input) scale points to a Dpoint3d structure holding the X, Y,
        and (in 3D) Z scale factors to be applied to the cell elements
        before they are placed. If scale is NULL, the cell is placed at a
        scale factor of 1.0. @Param(input) trueScale if true, use cell model
        and master model units to scale the cell. @Param(input) rotMatrix the
        rotation matrix that defines the orientation for cell placement.
        If rMatrix is NULL, the identity matrix is used. rMatrix does not
        necessarily need to be orthogonal or normalized. (Cells can be
        placed skewed). @Param(input) attributes is an array of attribute
        information to append to the cell header before it is placed. The
        first short of this array is the length, in shorts, of the
        attribute data. Note that attribute linkage lengths must be a
        multiple of four words. If attributes is NULL, the cell has no
        attributes attached to the header. @Param(input) ggroup the graphic
        group number for the cell's elements. A value of 0 means that the
        elements will not be part of a graphic group. @Param(input)
        relativeMode determines how the levels for the cell's elements are
        assigned. All elements for a point cell are assigned to baseLevel.
        If relativeMode is true, the lowest level used in the cell
        definition is assigned to baseLevel and all other element levels
        are adjusted accordingly. If relativeMode is false, the levels are
        taken from the cell library unchanged. @Param(input) baseLevel
        determines how the levels for the cell's elements are assigned.
        All elements for a point cell are assigned to baseLevel. For a
        graphic cell, this is ignored if relativeMode is false. This is a
        level ID, gotten through functions such as Level.GetIdFromName.
        Relative placement internally works by level numbers. @Param(input)
        sharedFlag indicates whether the cell should be placed as shared
        or unshared. If sharedFlag is 0, an unshared cell is placed. If
        sharedFlag is 1, a shared cell is created. If sharedFlag is 2, the
        state of the user-specified shared flag is used. Cell.PlaceCell
        also creates and places the shared cell definition if it does not
        exist in the file. @Param(input) cellName is the name of the cell to
        be placed. @Param(input) library name of library or NULL. If the
        library is NULL, the cell will be searched for in the active cell
        library, then all files found on MS_CELLLIST. If the shared flag
        is 1, then the active file will be searched for a shared cell
        definition first. @Remarks The rotation matrix, rotMatrix, is
        applied before the scale factors. @Return the file position of a
        newly placed cell. If an error occurs, it returns 0 and sets
        mdlErrno to the specific error cause.
        
        See also:
        Cell.GetElmDscr
        
        Remark:
        """
        ...
    
    @staticmethod
    def ReadLibraryElements(celName: str, library: MSPyDgnPlatform.DgnFile, justHeader: bool) -> tuple:
        """
        @Description Get the component elements of the specified cell from the
        cell library. Calling this function with justHeader false is the same
        as calling Cell.GetElmDscr with no transformations. @Param(output)
        cellElementsPP is an element descriptor containing the elements of the
        cell. @Param(input) cellName the name of the cell to find and read.
        @Param(input) library the cell library to read the cell from, or NULL to
        search. @Param(input) justHeader if set true, only the cell header is
        read and returned. @Return SUCCESS if the operation is completed
        successfully, otherwise ERROR.
        
        Remark:
        """
        ...
    
    @staticmethod
    def Rename(newName: str, oldName: str) -> int:
        """
        @Description Changes the name of cell in the current cell library.
        @Param(input) newName is the new name of the cell in the library. This
        must be less than MSPyDgnPlatform.MAX_CELLNAME_LENGTH characters, and
        must be valid as tested by Model.NameIsValid. @Param(input) oldName
        old name for cell in library @Return SUCCESS if the specified cell was
        renamed. If an error occurs, they return one the following values:
        MDLERR_CELLNOTFOUND, MDLERR_CELLEXISTS, MDLERR_INVALIDLIBRARY,
        MDLERR_NOCELLLIBRARY or MDLERR_FILEREADONLY.
        
        Remark:
        """
        ...
    
    @staticmethod
    def ReplaceLibraryHeaderElement(library: MSPyDgnPlatform.DgnFile, cellEdP: MSPyDgnPlatform.MSElementDescr, cellType: MSPyMstnPlatform.CellAddType) -> int:
        """
        @Description Replace the data for a cell header in a library. Since
        this will replace all linkages on the element except name and
        description, care must be taken to avoid removing linkages that should
        remain. Typically Cell.ReadLibraryElements is used to get the cell
        header so that the original linkages are in place. @Param(input) library
        is the pointer to the cell library to use. @Param(input) cellEdP is the
        new cell element to use to replace the header. @Param(input) cellType is
        the cell type; see Cell.AddLibDescr for a description of types.
        @Return SUCCESS if the operation is completed successfully, otherwise
        ERROR.
        
        Remark:
        
        
        @See Cell.ReadLibraryElements Cell.GetElmDscr Cell.ModifyInfo
        """
        ...
    
    @staticmethod
    def SetDescription(elem: MSPyDgnPlatform.MSElement, cellDescr: str) -> int:
        """
        @Description Set the description of the specified cell element. When
        setting the description of a cell using an element descriptor you need
        to be careful about changing the length of the cell description as the
        element descriptor has only been allocated to be large enough for the
        current description length. The proper way to change the cell
        descriptor is:
        
        ```
        MSElement element;
        memcpy (&element, &cellDP->el, Element.Size (&cellDP->el));
        Cell.SetDescription (&element, L" NEW DESCRIPTION ");
        Elmdscr.ReplaceElement (&cellDP, &element);
        ```
        
        @Param(input) elmP the cell element on which the description will be set.
        @Param(input) cellDescrP the description to give the cell. @Return
        SUCCESS if the operation is completed successfully, otherwise ERROR.
        
        See also:
        Cell.ExtractDescription Cell.SetName
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetName(elem: MSPyDgnPlatform.MSElement, cellName: str) -> int:
        """
        @Description Set the name of the specified cell. When setting the name
        of a cell using an element descriptor you need to be careful about
        changing the length of the cell name as the element descriptor has
        only been allocated to be large enough for the current name length.
        The proper way to change the cell descriptor is:<BR>
        
        ```
        MSElement element;
        memcpy (&element, &cellDP->el, Element.Size (&cellDP->el));
        Cell.SetName (&element, L" NEW NAME ");
        Elmdscr.ReplaceElement (&cellDP, &element);
        ```
        
        @Param(input) elmP the cell element on which the name will be set.
        @Param(input) cellNameP the name to give to the cell. @Return SUCCESS if
        the operation is completed successfully, otherwise ERROR .
        
        See also:
        Cell.ExtractName Cell.SetDescription
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetOriginAndRange(cellDP: MSPyDgnPlatform.MSElementDescr) -> None:
        """
        @Description Set the cell's range, range diagonal, and origin. The
        origin is set to the middle of the range. This function only validates
        the range of the cell against the ACTIVEMODEL. If you are working with
        a different modelRef, you must use Elmdscr.Validate and
        Cell.SetRange. @Param(input) cellDP the cell's element descriptor.
        
        See also:
        Cell.SetRange
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetRange(cellDP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> None:
        """
        @Description The Cell.Create and Cell.SetRange functions are
        generally used to create library cells in memory for subsequent
        addition to a cell library using Cell.AddLibDescr. The programmer
        typically creates a cell element, creates a new element descriptor,
        adds the component elements to that element descriptor, calls
        Cell.SetRange, and then adds the cell to the library using
        Cell.AddLibDescr. @Param[in,out] cellDP the element descriptor of
        the cell. @Param(input) modelRef indicates the model to validate the cell
        range against. ACTIVEMODEL is typically used. @Remarks The
        Cell.SetRange function must be called to update the range block
        diagonal in the header of a cell library element descriptor. The range
        block diagonal is the range of the un-rotated cell, so this function
        must be called after the cell definition is complete (immediately
        before Cell.AddLibDescr is called). The cell range is used when
        creating cell handles.
        
        See also:
        Cell.AddLibDescr Cell.SetOriginAndRange
        
        Remark:
        """
        ...
    
    @staticmethod
    def UpgradeLibrary(*args, **kwargs):
        """
        UpgradeLibrary(libraryFileName: MSPyBentley.WString, backupFileName: str, haveUnits: bool, uorPerStorage: float, unitNumerator: float, unitDenominator: float, unitLabel: str, unitFlags: MSPyDgnPlatform.UnitFlags, libraryFlag: int, feedbackFunc: std::function<void __cdecl(wchar_t const * __ptr64,int)>) -> int
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class CellAddType:
    """
    Members:
    
    eFronContext
    
    eNormalCell
    
    ePointCell
    """

    def __init__(self: MSPyMstnPlatform.CellAddType, value: int) -> None:
        ...
    
    eFronContext: CellAddType
    
    eNormalCell: CellAddType
    
    ePointCell: CellAddType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CellAddType) -> int:
        ...
    
class CellLibAsyncMsgType:
    """
    Members:
    
    eCELL_LIBRARY_MSG_ERROR
    
    eCELL_LIBRARY_PRE_ATTACH
    
    eCELL_LIBRARY_POST_ATTACH
    
    eCELL_LIBRARY_PRE_DETACH
    
    eCELL_LIBRARY_POST_DETACH
    
    eCELL_LIBRARY_PRE_CREATE
    
    eCELL_LIBRARY_POST_CREATE
    """

    def __init__(self: MSPyMstnPlatform.CellLibAsyncMsgType, value: int) -> None:
        ...
    
    eCELL_LIBRARY_MSG_ERROR: CellLibAsyncMsgType
    
    eCELL_LIBRARY_POST_ATTACH: CellLibAsyncMsgType
    
    eCELL_LIBRARY_POST_CREATE: CellLibAsyncMsgType
    
    eCELL_LIBRARY_POST_DETACH: CellLibAsyncMsgType
    
    eCELL_LIBRARY_PRE_ATTACH: CellLibAsyncMsgType
    
    eCELL_LIBRARY_PRE_CREATE: CellLibAsyncMsgType
    
    eCELL_LIBRARY_PRE_DETACH: CellLibAsyncMsgType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CellLibAsyncMsgType) -> int:
        ...
    
class CellLibraryOptions:
    """
    Members:
    
    eCELL_LIBRARY_OPT_None
    
    eCELL_LIBRARY_OPT_Include3d
    
    eCELL_LIBRARY_OPT_IncludeAllLibraries
    
    eCELL_LIBRARY_OPT_IncludeParametric
    
    eCELL_LIBRARY_OPT_IncludeNonParametric
    
    eCELL_LIBRARY_OPT_IncludeShared
    """

    def __init__(self: MSPyMstnPlatform.CellLibraryOptions, value: int) -> None:
        ...
    
    eCELL_LIBRARY_OPT_Include3d: CellLibraryOptions
    
    eCELL_LIBRARY_OPT_IncludeAllLibraries: CellLibraryOptions
    
    eCELL_LIBRARY_OPT_IncludeNonParametric: CellLibraryOptions
    
    eCELL_LIBRARY_OPT_IncludeParametric: CellLibraryOptions
    
    eCELL_LIBRARY_OPT_IncludeShared: CellLibraryOptions
    
    eCELL_LIBRARY_OPT_None: CellLibraryOptions
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CellLibraryOptions) -> int:
        ...
    
class ChamferEdgeSettings:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ChamferEdgeSettings) -> None
        
        2. __init__(self: MSPyMstnPlatform.ChamferEdgeSettings, dgnModel: MSPyDgnPlatform.DgnModel) -> None
        """
        ...
    
    @property
    def angle(self: MSPyMstnPlatform.ChamferEdgeSettings) -> float:
        ...
    @angle.setter
    def angle(self: MSPyMstnPlatform.ChamferEdgeSettings, arg0: float) -> None:
        ...
    
    @property
    def distance(self: MSPyMstnPlatform.ChamferEdgeSettings) -> float:
        ...
    @distance.setter
    def distance(self: MSPyMstnPlatform.ChamferEdgeSettings, arg0: float) -> None:
        ...
    
    @property
    def distance2(self: MSPyMstnPlatform.ChamferEdgeSettings) -> float:
        ...
    @distance2.setter
    def distance2(self: MSPyMstnPlatform.ChamferEdgeSettings, arg0: float) -> None:
        ...
    
    @property
    def length(self: MSPyMstnPlatform.ChamferEdgeSettings) -> float:
        ...
    @length.setter
    def length(self: MSPyMstnPlatform.ChamferEdgeSettings, arg0: float) -> None:
        ...
    
    @property
    def maxChamferDistance(self: MSPyMstnPlatform.ChamferEdgeSettings) -> float:
        ...
    @maxChamferDistance.setter
    def maxChamferDistance(self: MSPyMstnPlatform.ChamferEdgeSettings, arg0: float) -> None:
        ...
    
    @property
    def method(arg0: MSPyMstnPlatform.ChamferEdgeSettings) -> int:
        ...
    @method.setter
    def method(arg0: MSPyMstnPlatform.ChamferEdgeSettings, arg1: int) -> None:
        ...
    
    @property
    def propogateToSmoothEdges(arg0: MSPyMstnPlatform.ChamferEdgeSettings) -> bool:
        ...
    @propogateToSmoothEdges.setter
    def propogateToSmoothEdges(arg0: MSPyMstnPlatform.ChamferEdgeSettings, arg1: bool) -> None:
        ...
    
    @property
    def reversed(arg0: MSPyMstnPlatform.ChamferEdgeSettings) -> bool:
        ...
    @reversed.setter
    def reversed(arg0: MSPyMstnPlatform.ChamferEdgeSettings, arg1: bool) -> None:
        ...
    
class ChangeTrackCallback:
    """
    None
    """

    @staticmethod
    def AddChangedFunction(newFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called whenever an element is directly changed in MicroStation.
        @Remarks <i>NOTE</i>: A single MDL application can have multiple
        callbacks for the same event. If <code>newFunc</code> is NULL, then
        *all* callbacks for this event for this MDL application are removed.
        To remove callback individually use ChangeTrackCallback.RemoveChangedFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddMarkFunction(newFunc: Callable[[], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called when a change track "mark" happens. A mark signals the end of a
        logically related set of changes. A mark generally means that a
        Command just completed, but it may also occur in between commands.
        @Remarks <i>NOTE</i>: A single MDL application can have multiple
        callbacks for the same event. If <code>newFunc</code> is NULL, then
        *all* callbacks for this event for this MDL application are removed.
        To remove callback individually use
        ChangeTrackCallback.RemoveMarkFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddTransientChangedFunction(newFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called when a transient element is directly changed in MicroStation.
        @Remarks <i>NOTE</i>: A single MDL application can have multiple
        callbacks for the same event. If <code>newFunc</code> is NULL, then
        *all* callbacks for this event for this MDL application are removed.
        To remove callback individually use
        ChangeTrackCallback.RemoveTransientChangedFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddUndoRedoFinishedFunction(newFunc: Callable[[bool], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called after undo or redo command has completed. This means that all
        of the changes between the start and end marks have been undone or
        redone. @Remarks <i>NOTE</i>: A single MDL application can have
        multiple callbacks for the same event. If <code>newFunc</code> is
        NULL, then *all* callbacks for this event for this MDL application are
        removed. To remove callback individually use
        ChangeTrackCallback.RemoveUndoRedoFinishedFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddUndoRedoFunction(newFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackAction, bool, MSPyDgnPlatform.ChangeTrackInfo, MSPyDgnPlatform.ChangeTrackSource], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called whenever an element is changed by either the Undo or Redo
        command in MicroStation. @Remarks <i>NOTE</i>: A single MDL
        application can have multiple callbacks for the same event. If
        <code>newFunc</code> is NULL, then *all* callbacks for this event for
        this MDL application are removed. To remove callback individually use
        ChangeTrackCallback.RemoveUndoRedoFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddUndoRedoXAttributeFunction(newFunc: Callable[[MSPyDgnPlatform.XAttributeHandle, MSPyDgnPlatform.ChangeTrackAction, bool, MSPyDgnPlatform.ChangeTrackInfo, MSPyDgnPlatform.ChangeTrackSource], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called whenever an XAttribute is changed by either the Undo or Redo
        command in MicroStation. @Remarks <i>NOTE</i>: A single MDL
        application can have multiple callbacks for the same event. If
        <code>newFunc</code> is NULL, then *all* callbacks for this event for
        this MDL application are removed. To remove callback individually use
        ChangeTrackCallback.RemoveXAttributeUndoRedoFunction.
        @Param(input)newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def AddXAttributeChangedFunction(newFunc: Callable[[MSPyDgnPlatform.XAttributeHandle, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> None:
        """
        @Description An MDL application can use this to set a function to be
        called whenever an XAttribute is directly changed in MicroStation.
        @Remarks <i>NOTE</i>: A single MDL application can have multiple
        callbacks for the same event. If <code>newFunc</code> is NULL, then
        *all* callbacks for this event for this MDL application are removed.
        To remove callback individually use
        ChangeTrackCallback.RemoveXAttributeChangedFunction.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveChangedFunction(oldFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddChangedFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveMarkFunction(oldFunc: Callable[[], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddMarkFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveTransientChangedFunction(oldFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddTransientChangedFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveUndoRedoFinishedFunction(oldFunc: Callable[[bool], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddUndoRedoFinishedFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveUndoRedoFunction(oldFunc: Callable[[MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.ChangeTrackAction, bool, MSPyDgnPlatform.ChangeTrackInfo, MSPyDgnPlatform.ChangeTrackSource], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddUndoRedoFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveUndoRedoXAttributeFunction(oldFunc: Callable[[MSPyDgnPlatform.XAttributeHandle, MSPyDgnPlatform.ChangeTrackAction, bool, MSPyDgnPlatform.ChangeTrackInfo, MSPyDgnPlatform.ChangeTrackSource], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddXAttributeUndoRedoFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    @staticmethod
    def RemoveXAttributeChangedFunction(oldFunc: Callable[[MSPyDgnPlatform.XAttributeHandle, MSPyDgnPlatform.ChangeTrackInfo, MSPyMstnPlatform.MsPyBool], None], funcID: str) -> bool:
        """
        @Description Removes a callback function previously installed using
        ChangeTrackCallback.AddXAttributeChangedFunction
        @Param(input) oldFunc The callback function to remove.
        @Param(input) funcID Unique ID of the callback function that user defines.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ChooseMasterFileStatus:
    """
    Members:
    
    eCHOOSEMASTERFILE_STATUS_Invalid
    
    eCHOOSEMASTERFILE_STATUS_Handled
    
    eCHOOSEMASTERFILE_STATUS_Canceled
    """

    def __init__(self: MSPyMstnPlatform.ChooseMasterFileStatus, value: int) -> None:
        ...
    
    eCHOOSEMASTERFILE_STATUS_Canceled: ChooseMasterFileStatus
    
    eCHOOSEMASTERFILE_STATUS_Handled: ChooseMasterFileStatus
    
    eCHOOSEMASTERFILE_STATUS_Invalid: ChooseMasterFileStatus
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ChooseMasterFileStatus) -> int:
        ...
    
class ClearFeaturesAreaMode:
    """
    Members:
    
    eClearFeaturesAreaMode_All
    
    eClearFeaturesAreaMode_Fence
    
    eClearFeaturesAreaMode_SelectionSet
    """

    def __init__(self: MSPyMstnPlatform.ClearFeaturesAreaMode, value: int) -> None:
        ...
    
    eClearFeaturesAreaMode_All: ClearFeaturesAreaMode
    
    eClearFeaturesAreaMode_Fence: ClearFeaturesAreaMode
    
    eClearFeaturesAreaMode_SelectionSet: ClearFeaturesAreaMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ClearFeaturesAreaMode) -> int:
        ...
    
class CommandFilterReturnValue:
    """
    Members:
    
    eINPUT_COMMAND_ACCEPT
    
    eINPUT_COMMAND_REJECT
    
    eINPUT_COMMAND_CHANGED
    """

    def __init__(self: MSPyMstnPlatform.CommandFilterReturnValue, value: int) -> None:
        ...
    
    eINPUT_COMMAND_ACCEPT: CommandFilterReturnValue
    
    eINPUT_COMMAND_CHANGED: CommandFilterReturnValue
    
    eINPUT_COMMAND_REJECT: CommandFilterReturnValue
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CommandFilterReturnValue) -> int:
        ...
    
class CommandTableStatus:
    """
    Members:
    
    eCT_Success
    
    eCT_ResourceNotFound
    
    eCT_BadResourceType
    
    eCT_BadResource
    
    eCT_ExceedsMaximumNestLevel
    
    eCT_XmlMissingRootTable
    
    eCT_XmlDuplicateRootTable
    
    eCT_XmlMissingCommandWord
    
    eCT_XmlMissingSubtable
    
    eCT_XmlDuplicateSubtable
    
    eCT_XmlBadFeatureAspect
    
    eCT_XmlDuplicateKeyinHandlersNode
    
    eCT_XmlMissingKeyinNode
    
    eCT_XmlMissingFunctionNode
    
    eCT_NoCommandMatch
    
    eCT_AmbiguousMatch
    
    eCT_ERROR
    """

    def __init__(self: MSPyMstnPlatform.CommandTableStatus, value: int) -> None:
        ...
    
    eCT_AmbiguousMatch: CommandTableStatus
    
    eCT_BadResource: CommandTableStatus
    
    eCT_BadResourceType: CommandTableStatus
    
    eCT_ERROR: CommandTableStatus
    
    eCT_ExceedsMaximumNestLevel: CommandTableStatus
    
    eCT_NoCommandMatch: CommandTableStatus
    
    eCT_ResourceNotFound: CommandTableStatus
    
    eCT_Success: CommandTableStatus
    
    eCT_XmlBadFeatureAspect: CommandTableStatus
    
    eCT_XmlDuplicateKeyinHandlersNode: CommandTableStatus
    
    eCT_XmlDuplicateRootTable: CommandTableStatus
    
    eCT_XmlDuplicateSubtable: CommandTableStatus
    
    eCT_XmlMissingCommandWord: CommandTableStatus
    
    eCT_XmlMissingFunctionNode: CommandTableStatus
    
    eCT_XmlMissingKeyinNode: CommandTableStatus
    
    eCT_XmlMissingRootTable: CommandTableStatus
    
    eCT_XmlMissingSubtable: CommandTableStatus
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CommandTableStatus) -> int:
        ...
    
class CompressType:
    """
    Members:
    
    ePRE_COMPRESS_DGNFILE
    
    ePOST_COMPRESS_DGNFILE
    """

    def __init__(self: MSPyMstnPlatform.CompressType, value: int) -> None:
        ...
    
    ePOST_COMPRESS_DGNFILE: CompressType
    
    ePRE_COMPRESS_DGNFILE: CompressType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.CompressType) -> int:
        ...
    
class ConnectionManager:
    """
    None
    """

    def ActivateConnection(self: MSPyMstnPlatform.ConnectionManager, connection: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Activate a connection to the server
        """
        ...
    
    @staticmethod
    def ClearAllFeatureInstances(mode: MSPyMstnPlatform.ClearFeaturesAreaMode) -> tuple:
        """
        Clear all feature instances from the active model for any connection (active, inactive, or deleted) based on the specified area mode.
        The method returns the number of features cleared.
        
        Parameter ``mode``:
        The Clear area mode.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def ClearAllFeatureInstancesByNamedBoundary(boundaryName: MSPyBentley.WString) -> tuple:
        """
        Clear all feature instances from the active model for any active, inactive, or deleted connection within a specified named boundary.
        The method returns the number of features cleared.
        Named boundary is a user defined boundary that can be used to clear features within a specific area.
        Named boundaries can be created using the FenceManager class.
        
        Parameter ``boundaryName``:
        The Named boundary name.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def ClearAllFeatureInstancesByView(viewIndex: int) -> tuple:
        """
        Clear all feature instances from the active model for any active, inactive, or deleted connection within a view.
        The method returns the number of features cleared.
        
        Parameter ``viewIndex``:
        The View index.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def ClearConnectionsFeatureInstances(self: MSPyMstnPlatform.ConnectionManager, mode: MSPyMstnPlatform.ClearFeaturesAreaMode, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Clear feature instances from the active model for specified active connections.
        This method clears the features from the specified connections based on the specified area mode.
        The method returns the number of features cleared.
        
        Parameter ``mode``:
        The Clear area mode.
        
        Parameter ``connections``:
        The List of connections to clear features from.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def ClearConnectionsFeatureInstancesByNamedBoundary(self: MSPyMstnPlatform.ConnectionManager, boundaryName: MSPyBentley.WString, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Clear feature instances from the active model within a specified named boundary for specified active connections.
        This method clears the features from the specified connections within the specified named boundary.
        The method returns the number of features cleared.
        Named boundary is a user defined boundary that can be used to clear features within a specific area.
        Named boundaries can be created using the FenceManager class.
        
        Parameter ``boundaryName``:
        The Named boundary name.
        
        Parameter ``connections``:
        The List of connections to clear features from.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def ClearConnectionsFeatureInstancesByView(self: MSPyMstnPlatform.ConnectionManager, viewIndex: int, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Clear feature instances from the active model within a view for specified active connections.
        This method clears the features from the specified connections within the specified view.
        The method returns the number of features cleared.
        
        Parameter ``viewIndex``:
        The View index.
        
        Parameter ``connections``:
        The List of connections to clear features from.
        
        Parameter ``[out]``:
        The returned Number of features cleared.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateArcGISConnection(self: MSPyMstnPlatform.ConnectionManager, url: MSPyBentley.WString, connectionName: MSPyBentley.WString, userName: MSPyBentley.WString, password: MSPyBentley.WString) -> tuple:
        """
        Create a new connection to an ArcGIS server.
        After creating the connection, all features are selected and default element templates with associated item types for the features are created.
        See also : #ConnectionManager.CreateArcGISConnectionWithoutDefaultElementTemplates which does not create element templates for all layers in the connection.
        
        Parameter ``[out]``:
        The new Connection to the server.
        
        Parameter ``url``:
        The Server URL of the new connection. Cannot be empty.
        
        Parameter ``connectionName``:
        The Name of the new connection. Cannot be empty. See also GetDefaultConnectionNameForURL.
        
        Parameter ``userName``:
        The User Name for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``password``:
        The User Password for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateArcGISConnectionWithoutDefaultElementTemplates(self: MSPyMstnPlatform.ConnectionManager, url: MSPyBentley.WString, connectionName: MSPyBentley.WString, userName: MSPyBentley.WString, password: MSPyBentley.WString) -> tuple:
        """
        Create a new connection to an ArcGIS server without creating default element templates for each feature.
        By default, after creating the connection, all features are selected. The caller may want to select specific features for the connection before creating default element templates.
        To create the element templates with associated item types for the selected features, call @See ServerConnection.CreateDefaultElementTemplates.
        See also: #ConnectionManager.CreateArcGISConnection which creates element templates for all features in the connection.
        See also: #ServerConnection.CreateDefaultElementTemplates which creates element templates for only selected features in the connection.
        
        Parameter ``[out]``:
        The new Connection to the server.
        
        Parameter ``url``:
        The Server URL of the new connection. Cannot be empty.
        
        Parameter ``connectionName``:
        The Name of the new connection. Cannot be empty. See also GetDefaultConnectionNameForURL.
        
        Parameter ``userName``:
        The User Name for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``password``:
        The User Password for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateWFSConnection(self: MSPyMstnPlatform.ConnectionManager, url: MSPyBentley.WString, connectionName: MSPyBentley.WString, userName: MSPyBentley.WString, password: MSPyBentley.WString, flipCoordinates: bool, preferHttpPost: bool) -> tuple:
        """
        Create a new connection to a WFS server.
        After creating the connection, all features are selected and default element templates with associated item types for the features are created.
        See also : #ConnectionManager.CreateWFSConnectionWithoutDefaultElementTemplates which does not create element templates for all layers in the connection.
        
        Parameter ``[out]``:
        The new Connection to the server.
        
        Parameter ``url``:
        The Server URL of the new connection. Cannot be empty.
        
        Parameter ``connectionName``:
        The Name of the new connection. Cannot be empty. See also GetDefaultConnectionNameForURL.
        
        Parameter ``userName``:
        The User Name for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``password``:
        The User Password for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``flipCoordinates``:
        The Flip Coordinates value for the connection.
        WFS 1.0.0 servers specify the axis order for geographic coordinates as longitude/latitude (X/Y).
        WFS 1.1.0 and 2.0.0 servers specify the axis order as latitude/longitude (Y/X). This may result in queried features being rotated or flipped.
        To avoid this, enable Flip Coordinates.
        
        Parameter ``preferHttpPost``:
        The Prefer Http post value for the connection. Default method for WFS requests is HTTP Get. Use this property to enforce usage of Http Post. This may help to resolve issues during query.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateWFSConnectionWithoutDefaultElementTemplates(self: MSPyMstnPlatform.ConnectionManager, url: MSPyBentley.WString, connectionName: MSPyBentley.WString, userName: MSPyBentley.WString, password: MSPyBentley.WString, flipCoordinates: bool, preferHttpPost: bool) -> tuple:
        """
        Create a new connection to an WFS server without creating default element templates for each feature.
        By default, after creating the connection, all features are selected. The caller may want to select specific features for the connection before creating default element templates.
        To create the element templates with associated item types for the selected features, call See also: #ServerConnection.CreateDefaultElementTemplates.
        See also: #ConnectionManager.CreateWFSConnection which creates element templates for all features in the connection.
        See also: #ServerConnection.CreateDefaultElementTemplates which creates element templates for only selected features in the connection.
        
        Parameter ``[out]``:
        The new Connection to the server.
        
        Parameter ``url``:
        The Server URL of the new connection. Cannot be empty.
        
        Parameter ``connectionName``:
        The Name of the new connection. Cannot be empty. See also GetDefaultConnectionNameForURL.
        
        Parameter ``userName``:
        The User Name for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``password``:
        The User Password for the connection. Default value is empty. See also ServerConnection.GetNeedsUserNameAndPassword.
        
        Parameter ``flipCoordinates``:
        The Flip Coordinates value for the connection.
        WFS 1.0.0 servers specify the axis order for geographic coordinates as longitude/latitude (X/Y).
        WFS 1.1.0 and 2.0.0 servers specify the axis order as latitude/longitude (Y/X). This may result in queried features being rotated or flipped.
        To avoid this, enable Flip Coordinates.
        
        Parameter ``preferHttpPost``:
        The Prefer Http post value for the connection. Default method for WFS requests is HTTP Get. Use this property to enforce usage of Http Post. This may help to resolve issues during query.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def DeleteConnection(self: MSPyMstnPlatform.ConnectionManager, connection: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Delete an existing connection.
        The connection information is updated in the session and the active model.
        
        Parameter ``connection``:
        The Connection to the server.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def GetActiveConnections(self: MSPyMstnPlatform.ConnectionManager, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> None:
        """
        Get the active connections)
        
        Parameter ``connections``:
        The List of active connections.
        
        Returns:
        None.
        """
        ...
    
    def GetLastError(self: MSPyMstnPlatform.ConnectionManager, error: MSPyBentley.WString) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Get the last recorded error message during a ConnectionManager operation.
        
        Parameter ``error``:
        The last Error message.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.ConnectionManager:
        ...
    
    @staticmethod
    def GetSavedConnections(connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> None:
        """
        Get the connections saved in the active model)
        
        Parameter ``connections``:
        The List of saved connections.
        
        Returns:
        None.
        """
        ...
    
    @staticmethod
    def GetServerFeatureClassNameFromElement(featureClassName: MSPyBentley.WString, element: MSPyDgnPlatform.ElementHandle) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Get the server feature class name from the given element
        """
        ...
    
    def IsConnectionActivated(self: MSPyMstnPlatform.ConnectionManager, connection: MSPyMstnPlatform.ServerConnection) -> bool:
        """
        Is a connection activated in the session.
        
        Parameter ``connection``:
        The Connection to check.
        
        Returns:
        Bool value.
        """
        ...
    
    @staticmethod
    def IsQueriedServerFeatureElement(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        """
        Is this element a server feature element that has been queried from the server.
        
        Parameter ``element``:
        The Element to check.
        
        Returns:
        Bool value.
        """
        ...
    
    Manager: ConnectionManager
    
    def QueryConnectionsFeatureInstances(self: MSPyMstnPlatform.ConnectionManager, mode: MSPyMstnPlatform.QueryFeaturesAreaMode, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Query the feature instances into the active model for a list of connections within a specified area.
        Parameter ``mode``:
        The Query area mode.
        
        Parameter ``connections``:
        The List of connections to query.
        
        Parameter ``[out]``:
        The returned Number of features queried.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def QueryConnectionsFeatureInstancesByNamedBoundary(self: MSPyMstnPlatform.ConnectionManager, boundaryName: MSPyBentley.WString, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Query the feature instances into the active model for a list of connections within a specified named boundary.
        Parameter ``boundaryName``:
        The Named boundary name.
        Named boundary is a user defined boundary that can be used to query features within a specific area.
        Named boundaries can be created using the FenceManager class.
        
        Parameter ``connections``:
        The List of connections to query.
        
        Parameter ``[out]``:
        The returned Number of features queried.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def QueryConnectionsFeatureInstancesByView(self: MSPyMstnPlatform.ConnectionManager, viewIndex: int, connections: MSPyMstnPlatform.ServerConnectionPtrArray) -> tuple:
        """
        Query the feature instances into the active model for a list of connections within a view.
        Parameter ``viewIndex``:
        The View index.
        
        Parameter ``connections``:
        The List of connections to query.
        
        Parameter ``[out]``:
        The returned Number of features queried.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def UpdateConnectionFeatureSelections(self: MSPyMstnPlatform.ConnectionManager, connection: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Update an existing connection with modified feature selections.
        The connection information is updated in the session and the active model.
        
        Parameter ``connection``:
        The Connection to the server.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ConnectionServerType:
    """
    Members:
    
    eConnectionServerType_All
    
    eConnectionServerType_ArcGIS
    
    eConnectionServerType_WFS
    """

    def __init__(self: MSPyMstnPlatform.ConnectionServerType, value: int) -> None:
        ...
    
    eConnectionServerType_All: ConnectionServerType
    
    eConnectionServerType_ArcGIS: ConnectionServerType
    
    eConnectionServerType_WFS: ConnectionServerType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ConnectionServerType) -> int:
        ...
    
class Constraint2dData:
    """
    None
    """

    def AddCurveIdentifier(self: MSPyMstnPlatform.Constraint2dData, id: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        @description Add curve identifier
        
        :param id:
        The id to be added
        """
        ...
    
    @property
    def ConstraintStatus(arg0: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dStatus:
        ...
    @ConstraintStatus.setter
    def ConstraintStatus(arg0: MSPyMstnPlatform.Constraint2dData, arg1: MSPyMstnPlatform.Constraint2dStatus) -> None:
        ...
    
    @property
    def ConstraintType(arg0: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dType:
        ...
    @ConstraintType.setter
    def ConstraintType(arg0: MSPyMstnPlatform.Constraint2dData, arg1: MSPyMstnPlatform.Constraint2dType) -> None:
        ...
    
    def GetConstraintStatus(self: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dStatus:
        """
        @description Get the constraint status
        
        :returns:
        The constraint status
        """
        ...
    
    def GetConstraintType(self: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dType:
        """
        @description Get the constraint type
        
        :returns:
        The constraint type
        """
        ...
    
    def SetConstraintStatus(self: MSPyMstnPlatform.Constraint2dData, status: MSPyMstnPlatform.Constraint2dStatus) -> None:
        """
        @description Set the constraint status
        
        :param status:
        A new constraint status to set
        """
        ...
    
    def SetConstraintType(self: MSPyMstnPlatform.Constraint2dData, type: MSPyMstnPlatform.Constraint2dType) -> None:
        """
        @description Set the constraint type
        
        :param type:
        The constraint type
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Constraint2dData) -> None
        
        2. __init__(self: MSPyMstnPlatform.Constraint2dData, constraintType: MSPyMstnPlatform.Constraint2dType) -> None
        """
        ...
    
class Constraint2dDataArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Constraint2dDataArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.Constraint2dDataArray, arg0: MSPyMstnPlatform.Constraint2dDataArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.Constraint2dDataArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.Constraint2dDataArray, x: MSPyMstnPlatform.Constraint2dData) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.Constraint2dDataArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.Constraint2dDataArray, x: MSPyMstnPlatform.Constraint2dData) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.Constraint2dDataArray, L: MSPyMstnPlatform.Constraint2dDataArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.Constraint2dDataArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.Constraint2dDataArray, i: int, x: MSPyMstnPlatform.Constraint2dData) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.Constraint2dDataArray) -> MSPyMstnPlatform.Constraint2dData
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.Constraint2dDataArray, i: int) -> MSPyMstnPlatform.Constraint2dData
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.Constraint2dDataArray, x: MSPyMstnPlatform.Constraint2dData) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class Constraint2dManager:
    """
    None
    """

    @staticmethod
    def AddConstraint(*args, **kwargs):
        """
        Overloaded function.
        
        1. AddConstraint(constraintedElements: MSPyDgnPlatform.ElementAgenda, constraintType: MSPyMstnPlatform.Constraint2dType, primitiveId1: int = 0, defaultSubIndex1: int = 0, primitiveId2: int = 0, defaultSubIndex2: int = 0, dimValue: float = 0.0, varName: str = '') -> bool
        
        2. AddConstraint(constraintedElements: MSPyDgnPlatform.ElementAgenda, constraintType: MSPyMstnPlatform.Constraint2dType, primitiveIndexes: MSPyBentleyGeom.Int32Array, subIndexes: MSPyBentleyGeom.Int32Array, vertexTypes: MSPyMstnPlatform.VertexTypeArray, dimValue: float = 0.0, varName: str = '') -> bool
        """
        ...
    
    @staticmethod
    def AddSolverData(eh: MSPyDgnPlatform.ElementHandle, solverData: MSPyMstnPlatform.Constraint2dSolverData) -> int:
        """
        @description Store constraints data.
        
        :param (input):
        eh An element handle to specify where to store the data. *eh* can
        be any of the member elements that are constructing the profile.
        
        :param (input):
        solverData A Constraint2dSolverData object holding constraint
        model data to store.
        
        :returns:
        SUCCESS if implemented successfully; otherwise an error code
        indicating the failing reason.
        
        Remark:
        s This method will merge the passed-in *solverData* with the
        previous constraints if any.
        
        See also:
        GetSolverData, Constraint2dSolverData
        """
        ...
    
    @staticmethod
    def EvaluateAndUpdate(solverData: MSPyMstnPlatform.Constraint2dSolverData, dgnModel: MSPyDgnPlatform.DgnModel, directChanges: MSPyDgnPlatform.ElementRefPArray, isDynamic: bool = False, results: MSPyDgnPlatform.ElementAgenda = None, inconsistentConstraints: MSPyMstnPlatform.Constraint2dDataArray = None) -> bool:
        ...
    
    @staticmethod
    def GetSolverData(solverData: MSPyMstnPlatform.Constraint2dSolverData, eh: MSPyDgnPlatform.ElementHandle, includingDeleted: bool = False) -> int:
        """
        @description Get constraint data of the specified profile.
        
        :param (output):
        solverData A Constraint2dSolverData object receiving constraint
        model data.
        
        :param (input):
        eh An element handle to specify where to get the data. *eh* can be
        any element of the members constructing the profile.
        
        :param (input):
        includingDeleted A boolean to specify whether to include being-
        deleted elements. If set to **True**, this method will check and
        try to resolve members if they are deleted; otherwise if set to
        **False**(by default) deleted elements will be left unresolved.
        
        :returns:
        SUCCESS if implemented successfully; otherwise an error code
        indicating the failing reason.
        
        See also:
        AddSolverData, Constraint2dSolverData
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint2dSolver:
    """
    None
    """

    def Evaluate(self: MSPyMstnPlatform.Constraint2dSolver, dragInfos: List[MSPyDgnPlatform.Constraint2d.Drag2dInfo], isDynamic: bool) -> MSPyDgnPlatform.BentleyStatus:
        """
        @description Perform a evaluation
        
        :param (input):
        dragInfos An array of dragging information representing direct
        changes.
        
        :param (input):
        isDynamic A boolean indicating whether for " dynamic " purpose.
        
        :returns:
        SUCCESS if implemented successfully; otherwise ERROR if failed.
        """
        ...
    
    def GetData(self: MSPyMstnPlatform.Constraint2dSolver, data: MSPyDgnPlatform.Constraint2d.Constraint2dSolverData) -> None:
        """
        @description Initialize model
        
        :param (input):
        data The 2d constraint model to evaluate.
        
        Remark:
        s The curvevector in *data* must have CurvePrimitiveIds; scale is
        equal to the solid's scale, i.e., DCube(parasolid)=>Uor. It should
        more than 1.0
        """
        ...
    
    def GetResultCurveVector(self: MSPyMstnPlatform.Constraint2dSolver, elemRef: MSPyDgnPlatform.ElementRefBase) -> tuple:
        """
        @description Get results for the given element
        
        :param (output):
        resultCurve A curve vector reference to receive the result
        
        :param (input):
        elementRef A reference to element to specify what element is to
        query
        """
        ...
    
    def SetData(self: MSPyMstnPlatform.Constraint2dSolver, data: MSPyDgnPlatform.Constraint2d.Constraint2dSolverData, uorPerMaster: float = 1.0) -> bool:
        """
        @description Initialize model
        
        :param (input):
        data The 2d constraint model to evaluate.
        
        :param (input):
        uorPerMaster A float-point value to specify the UOR unit in master
        unit
        
        Remark:
        s The curvevector must have CurvePrimitiveIds; scale is equal to
        the solid's scale, i.e., DCube(parasolid)=>Uor. It should more
        than 1.0
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.Constraint2dSolver, localToWorldScale: float, isAutoConstraining: bool = False) -> None:
        ...
    
class Constraint2dSolverData:
    """
    None
    """

    def Clear(self: MSPyMstnPlatform.Constraint2dSolverData) -> None:
        """
        @description Clear all data and set to empty
        """
        ...
    
    def CollateByElement(self: MSPyMstnPlatform.Constraint2dSolverData, childGroups: MSPyMstnPlatform.Constraint2dSolverDataArray) -> int:
        """
        @description Check and divide this constraint model into child per
        links among elements.
        
        :param (output):
        childGroups Separate child constraint model whose member elements
        have links with each other.
        
        :returns:
        The number of child constraint models.
        """
        ...
    
    def GetElementRefs(self: MSPyMstnPlatform.Constraint2dSolverData, elemRefs: MSPyDgnPlatform.ElementRefPArray) -> None:
        """
        @description Query all member elements.
        
        :param (output):
        elementRefs A set receiving member elements.
        
        :returns:
        The number of member elements.
        """
        ...
    
    def IsComplete(self: MSPyMstnPlatform.Constraint2dSolverData) -> bool:
        """
        @description Determine if it is complete, i.e., its actual topology is
        identical to the datum description used.
        
        :returns:
        True if it is complete; otherwise False.
        """
        ...
    
    def IsCurvePlaneConstrained(self: MSPyMstnPlatform.Constraint2dSolverData, curveId: MSPyMstnPlatform.CurveEntityIdentifier) -> bool:
        """
        A curve plane is constrained if is by a plane distance dimension.
        """
        ...
    
    def IsCurvePlaneFixed(self: MSPyMstnPlatform.Constraint2dSolverData, curveId: MSPyMstnPlatform.CurveEntityIdentifier) -> bool:
        """
        A curve plane is considered to be fixed if any portion of the curve is
        fixed.
        """
        ...
    
    def IsEmpty(self: MSPyMstnPlatform.Constraint2dSolverData) -> bool:
        """
        @description Determine if it is empty.
        
        :returns:
        True if it is empty; otherwise False.
        """
        ...
    
    def IsResolved(self: MSPyMstnPlatform.Constraint2dSolverData) -> bool:
        """
        @description Determine if it is resolved, i.e., all member elements
        are available
        
        :returns:
        True if it is resolved; otherwise False.
        """
        ...
    
    def Merge(self: MSPyMstnPlatform.Constraint2dSolverData, rhs: MSPyMstnPlatform.Constraint2dSolverData) -> bool:
        """
        @description Merge another constraint model into this one. Identital
        data items will be excluded while merging.
        
        :param (input):
        rhs A data instance to merge into.
        
        :returns:
        True if there are some items being merged into; otherwise False if
        nothing being merged.
        """
        ...
    
    def RemoveElementRef(self: MSPyMstnPlatform.Constraint2dSolverData, elemRef: MSPyDgnPlatform.ElementRefBase) -> bool:
        """
        @description Remove all constraint data which are correlated to the
        the given element.
        
        :param (input):
        elementRef Specify an element ref whose constraints will be
        removed
        
        :returns:
        True if any removal occurred; otherwise false.
        """
        ...
    
    def RemoveInvalidConstraints(self: MSPyMstnPlatform.Constraint2dSolverData, elemRef: MSPyDgnPlatform.ElementRefBase) -> int:
        """
        @description Remove all invalid constraint data which are correlated
        to the the given element.
        
        :param (output):
        invalidCount An integer to receive the number of invalid
        constraints
        
        :param (input):
        elementRef Specify an element ref whose constraints will be
        removed
        """
        ...
    
    def RemoveUnresolvedElementRefs(self: MSPyMstnPlatform.Constraint2dSolverData) -> None:
        """
        @description Remove all constraint data whose target elements are not
        resolved.
        """
        ...
    
    def Replace(self: MSPyMstnPlatform.Constraint2dSolverData, oldElemRef: MSPyDgnPlatform.ElementRefBase, newElemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def Reverse(self: MSPyMstnPlatform.Constraint2dSolverData, elemRef: MSPyDgnPlatform.ElementRefBase, curveVector: MSPyBentleyGeom.CurveVector = None) -> bool:
        """
        @description Update constraint data assuming the curve's direction was
        reversed.
        
        :param (input):
        elementRef A element to specify what curve's direction was
        reversed
        
        :param (input):
        curveVector An optional update-to-date curve vector to set
        specific to *elementRef*
        
        :returns:
        True if any change was made, or false if not
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.Constraint2dSolverData) -> None:
        ...
    
    @property
    def m_constraints(arg0: MSPyMstnPlatform.Constraint2dSolverData) -> MSPyMstnPlatform.Constraint2dDataArray:
        ...
    
    @property
    def m_dimensions(arg0: MSPyMstnPlatform.Constraint2dSolverData) -> List[MSPyDgnPlatform.Constraint2d.Dimension2dData]:
        ...
    
class Constraint2dSolverDataArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Constraint2dSolverDataArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.Constraint2dSolverDataArray, arg0: MSPyMstnPlatform.Constraint2dSolverDataArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.Constraint2dSolverDataArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.Constraint2dSolverDataArray, x: MSPyMstnPlatform.Constraint2dSolverData) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.Constraint2dSolverDataArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.Constraint2dSolverDataArray, L: MSPyMstnPlatform.Constraint2dSolverDataArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.Constraint2dSolverDataArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.Constraint2dSolverDataArray, i: int, x: MSPyMstnPlatform.Constraint2dSolverData) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.Constraint2dSolverDataArray) -> MSPyMstnPlatform.Constraint2dSolverData
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.Constraint2dSolverDataArray, i: int) -> MSPyMstnPlatform.Constraint2dSolverData
        
        Remove and return the item at index ``i``
        """
        ...
    
class Constraint2dStatus:
    """
    Members:
    
    eUnknown
    
    eBetween_Fixed
    
    eBetween_Set_Members
    
    eOver_Defined
    
    eNon_Algebraic
    
    eNot_Consistent
    
    eNot_Consistent_Dimensions
    
    eNot_Consistent_Other
    
    eNot_Consistent_Unknown
    
    eNot_Solved
    
    eNot_Changed
    
    eSolved
    """

    def __init__(self: MSPyMstnPlatform.Constraint2dStatus, value: int) -> None:
        ...
    
    eBetween_Fixed: Constraint2dStatus
    
    eBetween_Set_Members: Constraint2dStatus
    
    eNon_Algebraic: Constraint2dStatus
    
    eNot_Changed: Constraint2dStatus
    
    eNot_Consistent: Constraint2dStatus
    
    eNot_Consistent_Dimensions: Constraint2dStatus
    
    eNot_Consistent_Other: Constraint2dStatus
    
    eNot_Consistent_Unknown: Constraint2dStatus
    
    eNot_Solved: Constraint2dStatus
    
    eOver_Defined: Constraint2dStatus
    
    eSolved: Constraint2dStatus
    
    eUnknown: Constraint2dStatus
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint2dStatus) -> int:
        ...
    
class Constraint2dType:
    """
    Members:
    
    eDistance
    
    eAngle
    
    eConcentric
    
    eRadius
    
    eParallel
    
    ePerpendicular
    
    eCoincident
    
    eTangent
    
    eIdentical
    
    eSymmetric
    
    eMajor_Radius
    
    eMinor_Radius
    
    eEqual_Radius
    
    eEqual_Distance
    
    eMidpoint
    
    eDependence
    
    ePatterned
    
    eEqual_Parameter
    
    eNormal
    
    eEqual_Direction
    
    eEqual_Curvature
    
    eEqual_First_Derivative
    
    eEqual_Second_Derivative
    
    eOffset
    
    eSimple_Dependence
    
    eCurve_Length
    
    ePatterned_2d
    
    ePattern_Value
    
    ePattern_2d_value_1
    
    ePattern_2d_value_2
    
    eEqual_Relative_Transform
    
    eArc_length
    
    eOffset_Dimension
    
    eArea
    
    ePerimeter
    
    eFix
    
    eHorizontal
    
    eVertical
    
    eEqual
    
    ePlanar_Distance
    
    eDistanceLL
    
    eDistancePL
    
    eDistancePP
    
    eDistanceCL
    
    eDistanceCP
    
    eDistanceCC
    
    eDummy
    """

    def __init__(self: MSPyMstnPlatform.Constraint2dType, value: int) -> None:
        ...
    
    eAngle: Constraint2dType
    
    eArc_length: Constraint2dType
    
    eArea: Constraint2dType
    
    eCoincident: Constraint2dType
    
    eConcentric: Constraint2dType
    
    eCurve_Length: Constraint2dType
    
    eDependence: Constraint2dType
    
    eDistance: Constraint2dType
    
    eDistanceCC: Constraint2dType
    
    eDistanceCL: Constraint2dType
    
    eDistanceCP: Constraint2dType
    
    eDistanceLL: Constraint2dType
    
    eDistancePL: Constraint2dType
    
    eDistancePP: Constraint2dType
    
    eDummy: Constraint2dType
    
    eEqual: Constraint2dType
    
    eEqual_Curvature: Constraint2dType
    
    eEqual_Direction: Constraint2dType
    
    eEqual_Distance: Constraint2dType
    
    eEqual_First_Derivative: Constraint2dType
    
    eEqual_Parameter: Constraint2dType
    
    eEqual_Radius: Constraint2dType
    
    eEqual_Relative_Transform: Constraint2dType
    
    eEqual_Second_Derivative: Constraint2dType
    
    eFix: Constraint2dType
    
    eHorizontal: Constraint2dType
    
    eIdentical: Constraint2dType
    
    eMajor_Radius: Constraint2dType
    
    eMidpoint: Constraint2dType
    
    eMinor_Radius: Constraint2dType
    
    eNormal: Constraint2dType
    
    eOffset: Constraint2dType
    
    eOffset_Dimension: Constraint2dType
    
    eParallel: Constraint2dType
    
    ePattern_2d_value_1: Constraint2dType
    
    ePattern_2d_value_2: Constraint2dType
    
    ePattern_Value: Constraint2dType
    
    ePatterned: Constraint2dType
    
    ePatterned_2d: Constraint2dType
    
    ePerimeter: Constraint2dType
    
    ePerpendicular: Constraint2dType
    
    ePlanar_Distance: Constraint2dType
    
    eRadius: Constraint2dType
    
    eSimple_Dependence: Constraint2dType
    
    eSymmetric: Constraint2dType
    
    eTangent: Constraint2dType
    
    eVertical: Constraint2dType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint2dType) -> int:
        ...
    
class Constraint3dBase:
    """
    None
    """

    @staticmethod
    def Create(*args, **kwargs):
        """
        Overloaded function.
        
        1. Create(type: MSPyMstnPlatform.Constraint3dType) -> MSPyMstnPlatform.Constraint3dBase
        
        2. Create(type: MSPyMstnPlatform.Constraint3dType, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray, flags: int) -> MSPyMstnPlatform.Constraint3dBase
        """
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_SurfaceOrientation
        
        eFlagMask_GroupLock
        
        eFlagMask_HalfSpace1
        
        eFlagMask_HalfSpace2
        """
    
        def __init__(self: MSPyMstnPlatform.Constraint3dBase.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_GroupLock: FlagMasks
        
        eFlagMask_HalfSpace1: FlagMasks
        
        eFlagMask_HalfSpace2: FlagMasks
        
        eFlagMask_SurfaceOrientation: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.Constraint3dBase.FlagMasks) -> int:
            ...
        
    @property
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    @Flags.setter
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: int) -> None:
        ...
    
    def GetElementRefs(self: MSPyMstnPlatform.Constraint3dBase, elemRefs: Set[MSPyDgnPlatform.ElementRefBase]) -> None:
        ...
    
    def GetFlags(self: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    
    def GetGroupLock(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def GetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.Constraint3dBase, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    
    def GetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    
    def GetType(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    @property
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    @GroupLock.setter
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: bool) -> None:
        ...
    
    @property
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace1.setter
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    @property
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace2.setter
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def HasBoundVariable(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def HasElementRef(self: MSPyMstnPlatform.Constraint3dBase, elemRef: MSPyDgnPlatform.ElementRefBase) -> bool:
        ...
    
    def IsRedundant(self: MSPyMstnPlatform.Constraint3dBase, other: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def SetFlags(self: MSPyMstnPlatform.Constraint3dBase, flags: int) -> None:
        ...
    
    def SetGeometryIds(self: MSPyMstnPlatform.Constraint3dBase, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray) -> None:
        ...
    
    def SetGroupLock(self: MSPyMstnPlatform.Constraint3dBase, groupLock: bool) -> None:
        ...
    
    def SetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.Constraint3dBase, status: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    def SetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase, orientation: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    @property
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    @SurfaceOrientation.setter
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eDCM3_D_BETWEEN_FIXED: Status
    
    eDCM3_D_BETWEEN_SET_MEMBERS: Status
    
    eDCM3_D_NOT_CHANGED: Status
    
    eDCM3_D_NOT_CONSISTENT: Status
    
    eDCM3_D_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_D_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_D_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_D_NOT_SOLVED: Status
    
    eDCM3_D_OVER_DEFINED: Status
    
    eDCM3_D_SOLVED: Status
    
    eDCM3_D_UNKNOWN: Status
    
    eFlagMask_GroupLock: FlagMasks
    
    eFlagMask_HalfSpace1: FlagMasks
    
    eFlagMask_HalfSpace2: FlagMasks
    
    eFlagMask_SurfaceOrientation: FlagMasks
    
    eRedundant: Status
    
class Constraint3dDisplay:
    """
    None
    """

    @staticmethod
    def DrawConstraints(eh: MSPyDgnPlatform.ElementHandle, viewContext: MSPyDgnPlatform.ViewContext, drawConstraintMarkers: bool, drawDimensions: bool) -> None:
        ...
    
    @staticmethod
    def DrawPath(path: MSPyDgnPlatform.DisplayPath, viewContext: MSPyDgnPlatform.ViewContext) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint3dElement:
    """
    None
    """

    @staticmethod
    def Create(eeh: MSPyDgnPlatform.EditElementHandle, destinationModelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def GetConstraintDescription(description: MSPyBentley.WString, type: MSPyMstnPlatform.Constraint3dType, geometryStatus: MSPyMstnPlatform.GeometryId.Status) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def GetConstraints(constraints: MSPyMstnPlatform.Constraint3dPtrArray, hostEh: MSPyDgnPlatform.ElementHandle) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def GetDegreesOfFreedom(constraints: MSPyMstnPlatform.Constraint3dPtrArray, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def GetExistingConstraints(hosts: Set[MSPyDgnPlatform.ElementRefBase], constraints: MSPyMstnPlatform.Constraint3dPtrArray, elemRefs: Set[MSPyDgnPlatform.ElementRefBase], modelRef: MSPyDgnPlatform.DgnModelRef, doGroups: bool) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def GetHostElement(hostEeh: MSPyDgnPlatform.EditElementHandle, eh: MSPyDgnPlatform.ElementHandle, searchGroup: bool = False) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def HasConstraints(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        ...
    
    @staticmethod
    def IsConstraintElement(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        ...
    
    @staticmethod
    def IsGroupedToConstraint(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        ...
    
    @staticmethod
    def ReevaluateAndUpdate(dependentEh: MSPyDgnPlatform.ElementHandle, constraints: MSPyMstnPlatform.Constraint3dPtrArray, constraintsModified: bool, rootSet: MSPyDgnPlatform.ElementRefPArray) -> tuple:
        ...
    
    @staticmethod
    def RemoveElementConstraints(eh: MSPyDgnPlatform.ElementHandle) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def SaveConstraints(eeh: MSPyDgnPlatform.EditElementHandle, constraints: MSPyMstnPlatform.Constraint3dPtrArray) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint3dGUI:
    """
    None
    """

    @staticmethod
    def CloseDimensionDialog() -> None:
        ...
    
    @staticmethod
    def OpenAngleDialog(dimensionValue: float, variableAccess: MSPyBentley.WString, modelRef: MSPyDgnPlatform.DgnModelRef, viewport: MSPyDgnPlatform.Viewport, origin: MSPyBentleyGeom.DPoint3d) -> float:
        ...
    
    @staticmethod
    def OpenDimensionDialog(dimensionValue: float, variableAccess: MSPyBentley.WString, modelRef: MSPyDgnPlatform.DgnModelRef, viewport: MSPyDgnPlatform.Viewport, origin: MSPyBentleyGeom.DPoint3d) -> float:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint3dHalfSpace:
    """
    Members:
    
    eNotSpecified
    
    ePositive
    
    eNegative
    """

    def __init__(self: MSPyMstnPlatform.Constraint3dHalfSpace, value: int) -> None:
        ...
    
    eNegative: Constraint3dHalfSpace
    
    eNotSpecified: Constraint3dHalfSpace
    
    ePositive: Constraint3dHalfSpace
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint3dHalfSpace) -> int:
        ...
    
class Constraint3dManager:
    """
    None
    """

    @staticmethod
    def AddConstraint(constrainedElements: MSPyDgnPlatform.ElementAgenda, subEntities: MSPyDgnPlatform.ISubEntityPtrArray, consType: MSPyMstnPlatform.Constraint3dType, flags: int = 0, dimValue: float = 0.0, varName: str = '') -> tuple:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint3dPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Constraint3dPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.Constraint3dPtrArray, arg0: MSPyMstnPlatform.Constraint3dPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.Constraint3dPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.Constraint3dPtrArray, x: MSPyMstnPlatform.Constraint3dBase) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.Constraint3dPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.Constraint3dPtrArray, x: MSPyMstnPlatform.Constraint3dBase) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.Constraint3dPtrArray, L: MSPyMstnPlatform.Constraint3dPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.Constraint3dPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.Constraint3dPtrArray, i: int, x: MSPyMstnPlatform.Constraint3dBase) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.Constraint3dPtrArray) -> MSPyMstnPlatform.Constraint3dBase
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.Constraint3dPtrArray, i: int) -> MSPyMstnPlatform.Constraint3dBase
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.Constraint3dPtrArray, x: MSPyMstnPlatform.Constraint3dBase) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class Constraint3dSolver:
    """
    None
    """

    def DynamicEvaluate(*args, **kwargs):
        """
        Overloaded function.
        
        1. DynamicEvaluate(self: MSPyMstnPlatform.Constraint3dSolver, elemRefs: MSPyDgnPlatform.ElementRefPArray, transform: MSPyBentleyGeom.Transform) -> tuple
        
        2. DynamicEvaluate(self: MSPyMstnPlatform.Constraint3dSolver, transformInMap: dict) -> tuple
        """
        ...
    
    def Evaluate(*args, **kwargs):
        """
        Overloaded function.
        
        1. Evaluate(self: MSPyMstnPlatform.Constraint3dSolver) -> tuple
        
        2. Evaluate(self: MSPyMstnPlatform.Constraint3dSolver, softReferenceId: MSPyMstnPlatform.GeometryId) -> tuple
        
        3. Evaluate(self: MSPyMstnPlatform.Constraint3dSolver, elemRefs: MSPyDgnPlatform.ElementRefPArray) -> tuple
        """
        ...
    
    def GetDegreesOfFreedom(self: MSPyMstnPlatform.Constraint3dSolver) -> tuple:
        ...
    
    def Initialize(self: MSPyMstnPlatform.Constraint3dSolver, constraints: MSPyMstnPlatform.Constraint3dPtrArray, modelRef: MSPyDgnPlatform.DgnModelRef, modifiedElements: dict = {}, debugJournal: str = None) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def __init__(self: MSPyMstnPlatform.Constraint3dSolver) -> None:
        ...
    
class Constraint3dStorageVersion:
    """
    Members:
    
    eInitial
    
    eLatest
    """

    def __init__(self: MSPyMstnPlatform.Constraint3dStorageVersion, value: int) -> None:
        ...
    
    eInitial: Constraint3dStorageVersion
    
    eLatest: Constraint3dStorageVersion
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint3dStorageVersion) -> int:
        ...
    
class Constraint3dType:
    """
    Members:
    
    eDCM3_DISTANCE
    
    eDCM3_ANGLE
    
    eDCM3_CONCENTRIC
    
    eDCM3_RADIUS
    
    eDCM3_PARALLEL
    
    eDCM3_PERPENDICULAR
    
    eDCM3_COINCIDENT
    
    eDCM3_TANGENT
    
    eDCM3_MAJOR_RADIUS
    
    eDCM3_MINOR_RADIUS
    
    eDCM3_EQUAL_RADIUS
    
    eDCM3_MIDPOINT
    
    eDCM3_DEPENDENCE
    
    eDCM3_EQUAL_PARAMETER
    
    eDCM3_EQUAL_DIRECTION
    
    eDCM3_EQUAL_CURVATURE
    
    eDCM3_EQUAL_FIRST_DERIVATIVE
    
    eDCM3_EQUAL_SECOND_DERIVATIVE
    
    eDCM3_CURVE_LENGTH
    
    eDCM3_SYMMETRIC
    
    eDCM3_HALF_ANGLE
    
    eDCM3_COINCIDENT_AROUND_SPINE
    
    eDCM3_COINCIDENT_WITH_SPINE
    
    eDCM3_EQUAL_HALF_ANGLE
    
    eDCM3_EQUAL_CURVATURE_VECTOR
    
    eFixed
    
    eUnspecified
    """

    def __init__(self: MSPyMstnPlatform.Constraint3dType, value: int) -> None:
        ...
    
    eDCM3_ANGLE: Constraint3dType
    
    eDCM3_COINCIDENT: Constraint3dType
    
    eDCM3_COINCIDENT_AROUND_SPINE: Constraint3dType
    
    eDCM3_COINCIDENT_WITH_SPINE: Constraint3dType
    
    eDCM3_CONCENTRIC: Constraint3dType
    
    eDCM3_CURVE_LENGTH: Constraint3dType
    
    eDCM3_DEPENDENCE: Constraint3dType
    
    eDCM3_DISTANCE: Constraint3dType
    
    eDCM3_EQUAL_CURVATURE: Constraint3dType
    
    eDCM3_EQUAL_CURVATURE_VECTOR: Constraint3dType
    
    eDCM3_EQUAL_DIRECTION: Constraint3dType
    
    eDCM3_EQUAL_FIRST_DERIVATIVE: Constraint3dType
    
    eDCM3_EQUAL_HALF_ANGLE: Constraint3dType
    
    eDCM3_EQUAL_PARAMETER: Constraint3dType
    
    eDCM3_EQUAL_RADIUS: Constraint3dType
    
    eDCM3_EQUAL_SECOND_DERIVATIVE: Constraint3dType
    
    eDCM3_HALF_ANGLE: Constraint3dType
    
    eDCM3_MAJOR_RADIUS: Constraint3dType
    
    eDCM3_MIDPOINT: Constraint3dType
    
    eDCM3_MINOR_RADIUS: Constraint3dType
    
    eDCM3_PARALLEL: Constraint3dType
    
    eDCM3_PERPENDICULAR: Constraint3dType
    
    eDCM3_RADIUS: Constraint3dType
    
    eDCM3_SYMMETRIC: Constraint3dType
    
    eDCM3_TANGENT: Constraint3dType
    
    eFixed: Constraint3dType
    
    eUnspecified: Constraint3dType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint3dType) -> int:
        ...
    
class Constraint3dUtil:
    """
    None
    """

    @staticmethod
    def GetConstrainedElements(elements: Set[MSPyDgnPlatform.ElementRefBase], constraints: MSPyMstnPlatform.Constraint3dPtrArray, modelRef: MSPyDgnPlatform.DgnModelRef) -> None:
        ...
    
    @staticmethod
    def GetEdgeArcAxis(axis: MSPyBentleyGeom.DRay3d, edge: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    @staticmethod
    def GetFaceAxis(face: MSPyDgnPlatform.ISubEntity) -> tuple:
        ...
    
    @staticmethod
    def GetNamedGroupMembers(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetNamedGroupMembers(members: Set[MSPyDgnPlatform.ElementRefBase], namedGroup: MSPyDgnPlatform.NamedGroup) -> MSPyDgnPlatform.BentleyStatus
        
        2. GetNamedGroupMembers(members: Set[MSPyDgnPlatform.ElementRefBase], elemRef: MSPyDgnPlatform.ElementRefBase, modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BentleyStatus
        """
        ...
    
    @staticmethod
    def RemoveInvalidConstraints(constraints: MSPyMstnPlatform.Constraint3dPtrArray, changed: MSPyDgnPlatform.ElementRefBase, hostEh: MSPyDgnPlatform.ElementHandle) -> int:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Constraint3dXAttributeIndex:
    """
    Members:
    
    eData
    
    eVariableDependency
    """

    def __init__(self: MSPyMstnPlatform.Constraint3dXAttributeIndex, value: int) -> None:
        ...
    
    eData: Constraint3dXAttributeIndex
    
    eVariableDependency: Constraint3dXAttributeIndex
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Constraint3dXAttributeIndex) -> int:
        ...
    
class CurveArcAxisGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, curvePrimitiveId: MSPyBentleyGeom.CurvePrimitiveId) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class CurveEntityIdentifier:
    """
    None
    """

    @property
    def EdgeId(arg0: MSPyMstnPlatform.CurveEntityIdentifier) -> MSPyBentleyGeom.CurvePrimitiveId:
        ...
    @EdgeId.setter
    def EdgeId(arg0: MSPyMstnPlatform.CurveEntityIdentifier, arg1: MSPyBentleyGeom.CurvePrimitiveId) -> None:
        ...
    
    @staticmethod
    def ElementToCurveVector(eh: MSPyDgnPlatform.ElementHandle) -> tuple:
        """
        @cond DONTINCLUDEINDOC @endcond @description Get an editable curve
        vector of a given element
        
        :param (output):
        curveVector The resultant curve vector
        
        :param (input):
        eh An ElementHandle to specify a curve element
        """
        ...
    
    def GetEdgeId(self: MSPyMstnPlatform.CurveEntityIdentifier) -> MSPyBentleyGeom.CurvePrimitiveId:
        """
        @description Get the edge id @retval NULL if failing to get
        """
        ...
    
    def GetPointIndex(self: MSPyMstnPlatform.CurveEntityIdentifier) -> int:
        """
        @description Get the point index
        
        :returns:
        The point index
        """
        ...
    
    def GetSubEdgeIndex(self: MSPyMstnPlatform.CurveEntityIdentifier) -> int:
        """
        @description Get the sub edge index
        
        :returns:
        The sub edge index
        """
        ...
    
    def GetVertexType(self: MSPyMstnPlatform.CurveEntityIdentifier) -> MSPyMstnPlatform.VertexType:
        """
        @description Get the vertex type
        
        :returns:
        The vertex type
        """
        ...
    
    def IsValid(self: MSPyMstnPlatform.CurveEntityIdentifier) -> bool:
        """
        @description Test the CurveEntityIdentifier is valid or not
        
        :returns:
        True if it is valid, or False if not
        """
        ...
    
    @property
    def PointIndex(arg0: MSPyMstnPlatform.CurveEntityIdentifier) -> int:
        ...
    @PointIndex.setter
    def PointIndex(arg0: MSPyMstnPlatform.CurveEntityIdentifier, arg1: int) -> None:
        ...
    
    def SetEdgeId(self: MSPyMstnPlatform.CurveEntityIdentifier, edgeId: MSPyBentleyGeom.CurvePrimitiveId) -> None:
        """
        @description Set the edge id
        
        :param edgeId:
        the edge id @note edgeId cannot be NULL
        """
        ...
    
    def SetPointIndex(self: MSPyMstnPlatform.CurveEntityIdentifier, pointIndex: int) -> None:
        """
        @description Set the point index in linestring
        
        :param pointIndex:
        the point index
        """
        ...
    
    def SetSubEdgeIndex(self: MSPyMstnPlatform.CurveEntityIdentifier, subEdgeIndex: int) -> None:
        """
        @description Set the sub edge index
        
        :param subEdgeIndex:
        the sub edge index
        """
        ...
    
    def SetVertexType(self: MSPyMstnPlatform.CurveEntityIdentifier, vertexType: MSPyMstnPlatform.VertexType) -> None:
        """
        @description Set new vertex type
        
        :param vertexType:
        A new vertex type to set
        """
        ...
    
    @property
    def SubEdgeIndex(arg0: MSPyMstnPlatform.CurveEntityIdentifier) -> int:
        ...
    @SubEdgeIndex.setter
    def SubEdgeIndex(arg0: MSPyMstnPlatform.CurveEntityIdentifier, arg1: int) -> None:
        ...
    
    @property
    def VertexType(arg0: MSPyMstnPlatform.CurveEntityIdentifier) -> MSPyMstnPlatform.VertexType:
        ...
    @VertexType.setter
    def VertexType(arg0: MSPyMstnPlatform.CurveEntityIdentifier, arg1: MSPyMstnPlatform.VertexType) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.CurveEntityIdentifier) -> None
        
        2. __init__(self: MSPyMstnPlatform.CurveEntityIdentifier, curve: MSPyBentleyGeom.CurveVector, edgeId: MSPyBentleyGeom.CurvePrimitiveId, subIndex: int, vertexType: MSPyMstnPlatform.VertexType, elemRef: MSPyDgnPlatform.ElementRefBase) -> None
        
        3. __init__(self: MSPyMstnPlatform.CurveEntityIdentifier, curve: MSPyBentleyGeom.CurveVector, location: MSPyBentleyGeom.CurveLocationDetail, vertexType: MSPyMstnPlatform.VertexType, elemRef: MSPyDgnPlatform.ElementRefBase) -> None
        """
        ...
    
class CurveEntityIdentifierArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.CurveEntityIdentifierArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.CurveEntityIdentifierArray, arg0: MSPyMstnPlatform.CurveEntityIdentifierArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.CurveEntityIdentifierArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.CurveEntityIdentifierArray, x: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.CurveEntityIdentifierArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.CurveEntityIdentifierArray, x: MSPyMstnPlatform.CurveEntityIdentifier) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.CurveEntityIdentifierArray, L: MSPyMstnPlatform.CurveEntityIdentifierArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.CurveEntityIdentifierArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.CurveEntityIdentifierArray, i: int, x: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.CurveEntityIdentifierArray) -> MSPyMstnPlatform.CurveEntityIdentifier
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.CurveEntityIdentifierArray, i: int) -> MSPyMstnPlatform.CurveEntityIdentifier
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.CurveEntityIdentifierArray, x: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class CurveGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, curveLocationDetail: MSPyBentleyGeom.CurveLocationDetail) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class CurvePointGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, curveLocationDetail: MSPyBentleyGeom.CurveLocationDetail) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class DgnDocumentManager:
    """
    None
    """

    def DeleteDocument(*args, **kwargs):
        """
        DeleteDocument(self: MSPyMstnPlatform.DgnDocumentManager, doc: MSPyDgnPlatform.DgnDocument, options: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions = <DeleteOptions.eDefault: 0>) -> int
        
        @name Methods to manage documents in the DMS repository Remove the
        document from the DMS.
        
        Remark:
        s If the DMS is the native file system, this method deletes the
        disk file.
        """
        ...
    
    def DeleteFolder(*args, **kwargs):
        """
        DeleteFolder(self: MSPyMstnPlatform.DgnDocumentManager, folderMoniker: MSPyDgnPlatform.DgnFolderMoniker, options: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions = <DeleteOptions.eDefault: 0>) -> int
        
        Remove the folder from the DMS.
        """
        ...
    
    class DeleteOptions:
        """
        Members:
        
        eDefault
        
        eAllowRestore
        
        eIncludeSubItems
        """
    
        def __init__(self: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions, value: int) -> None:
            ...
        
        eAllowRestore: DeleteOptions
        
        eDefault: DeleteOptions
        
        eIncludeSubItems: DeleteOptions
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions) -> int:
            ...
        
    class DgnBrowserStatus:
        """
        Members:
        
        eSuccess
        
        eCancel
        
        eNoIntegrationLoaded
        """
    
        def __init__(self: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus, value: int) -> None:
            ...
        
        eCancel: DgnBrowserStatus
        
        eNoIntegrationLoaded: DgnBrowserStatus
        
        eSuccess: DgnBrowserStatus
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus) -> int:
            ...
        
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.DgnDocumentManager:
        """
        Retrieves the DgnDocumentManager object
        """
        ...
    
    def OpenDocumentDialog(self: MSPyMstnPlatform.DgnDocumentManager, status: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus, defaults: MSPyDgnPlatform.DgnDocumentBrowserDefaults) -> MSPyDgnPlatform.DgnDocument:
        """
        @name GUI Methods to browse the document repository Browse for a
        document in the DMS
        """
        ...
    
    def OpenFolderBrowser(self: MSPyMstnPlatform.DgnDocumentManager, status: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus, defaults: MSPyDgnPlatform.DgnFolderBrowserDefaults) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Browse for a folder in the DMS
        """
        ...
    
    @staticmethod
    def PortableNameFromFullPath(portableName: MSPyBentley.WString, fullPath: str, basePath: str, dirCfgVar: str, relative: MSPyDgnPlatform.RelativePathPreference) -> None:
        """
        Creates a portable file name given the data that is returned from the
        File Open dialog. A portable name never includes explicit disk drive
        and path information.
        
        :param portableName:
        A portable file name that can be used in a moniker that is to be
        persisted in a design file.
        
        :param fullPath:
        The full file path to the file for which the portableName is
        generated.
        
        :param basePath:
        The full file path to the file in which the portableName will be
        persisted.
        
        :param dirCfgVar:
        If not NULL, this is a configuration variable whose value is the
        directory in fullPath.
        
        :param relative:
        The preference for relative paths. If Allow or CreateIfPossible,
        and dirCfgVar is NULL, attempts to make the portableName a
        relative path from basePath to fullPath. @note If dirCfgVar is not
        NULL, the portable name will consist of the dirCfgVar and the
        filename and extension from fullPath. @note If fullPath and
        basePath are not on the same physical drive, it is not possible to
        create a relative path between them.
        """
        ...
    
    @staticmethod
    def PortableNameFromUserEnteredFileName(portableName: MSPyBentley.WString, userEnteredPath: str, fullPath: str, basePath: str, relativePref: MSPyDgnPlatform.RelativePathPreference) -> None:
        """
        Creates a portable file name given the data that is keyed in by a
        user. A portable name never includes explicit disk drive and path
        information.
        
        :param portableName:
        A portable file name that can be used in a moniker that is to be
        persisted in a design file.
        
        :param userEnteredPath:
        The file name that the user keyed in. If not NULL, as much as
        possible of it is used to generate portableName.
        
        :param fullPath:
        Identifies the disk file to which the portable moniker should
        point. This is often the full file name as returned from the File
        Open dialog box.
        
        :param basePath:
        The base path that the caller will use relative searches for the
        file represented by the portable moniker. If the portable moniker
        is to be persisted in a DgnFile, basePath is usually the path of
        that DgnFile.
        
        :param relativePref:
        The preference for relative paths. If Allow, accepts relative
        paths that are in userEnteredPath. If CreateIfPossible, attempts
        to create a relative path. If Never, discards relative paths.
        @note If userEnteredPath does not contain an extension, but
        fullPath does contain an extension, the extension in fullPath will
        be the extension in portableName. @note If userEnteredPath starts
        with a configuration variable name followed by a colon, that
        configuration variable and any path information following it is
        retained, and relativePref is ignored. @note If fullPath and
        basePath are not on the same physical drive, it is not possible to
        create a relative path between them.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eAllowRestore: DeleteOptions
    
    eCancel: DgnBrowserStatus
    
    eDefault: DeleteOptions
    
    eIncludeSubItems: DeleteOptions
    
    eNoIntegrationLoaded: DgnBrowserStatus
    
    eSuccess: DgnBrowserStatus
    
class DgnFile:
    """
    None
    """

    @staticmethod
    def CheckRights(dgnFileObj: MSPyDgnPlatform.DgnFile, rights: int, displayError: MSPyMstnPlatform.MessageDestination) -> int:
        """
        @Description Check if the specified rights are granted to the current
        user for the specified file.
        
        Remark:
        s The rights parameter can be one or more of the following values
        OR'd together:
        
        * MSPyDgnPlatform.DGNFILE_RIGHT_Print -- Print, print preview, e-plot,
        etc.
        
        * MSPyDgnPlatform.DGNFILE_RIGHT_Export -- SaveAs, Export, Copy to
        clipboard, File Fence, etc.
        
        * MSPyDgnPlatform.DGNFILE_RIGHT_Edit -- Modify file contents (implies not
        read-only)
        
        * MSPyDgnPlatform.DGNFILE_RIGHT_Unlimited -- All rights, present and
        future
        
        :param DgnFile:
        the DgnFile of interest. @Param(input) rights the rights to query
        @Param(input) displayError display error message in message center if
        rights not granted? Else return ERROR silently @Return SUCCESS if
        all of the rights are granted.
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateModel(dgnFileObj: MSPyDgnPlatform.DgnFile, seedModelRef: MSPyDgnPlatform.DgnModelRef, modelName: str, modelDescr: str, FromSeedForModelAndIs3d: bool, modelType: MSPyDgnPlatform.DgnModelType, Is3d: bool) -> tuple:
        ...
    
    @staticmethod
    def FindElemByID(dgnFile: MSPyDgnPlatform.DgnFile, elemId: int, dictionaryOnly: bool) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    @staticmethod
    def FindModelIDByName(dgnFileObj: MSPyDgnPlatform.DgnFile, name: str) -> tuple:
        ...
    
    @staticmethod
    def GetMasterFile() -> MSPyDgnPlatform.DgnFile:
        """
        @Description Get the DgnFile for the current master file. @Return
        The DgnFileP for the current master file.
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetModelCount(dgnFileObj: MSPyDgnPlatform.DgnFile) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetModelItemById(dgnFileObj: MSPyDgnPlatform.DgnFile, modelId: int) -> MSPyDgnPlatform.ModelIndexItem:
        """
        Retrieve the model index item using a model ID.
        
        :param pDgnFile:
        The file containing the model.
        
        :param modelID:
        The ID of the model to retreive.
        
        :returns:
        NULL if the indicated model does not exist in the file, otherwise
        a pointer to the model index item. @Group " DgnFile Functions "
        @See ModelItem.GetData ModelItem.GetName
        ModelItem.GetDescription
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetModelItemByName(dgnFileObj: MSPyDgnPlatform.DgnFile, modelName: str) -> MSPyDgnPlatform.ModelIndexItem:
        """
        Retrieve the model index item using a model name.
        
        :param pDgnFile:
        The file containing the model.
        
        :param modelName:
        The name of the model to retreive.
        
        :returns:
        NULL if the indicated model does not exist in the file, otherwise
        a pointer to the model index item. @Group " DgnFile Functions "
        @See ModelItem.GetData ModelItem.GetName
        ModelItem.GetDescription
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetModelRefList(dgnFileObj: MSPyDgnPlatform.DgnFile) -> MSPyDgnPlatform.DgnModelRefList:
        """
        Create a DgnModelRefList containing an entry for each of the loaded
        models in the specified design file. Note, any DgnModelRefList created
        with this function must be freed by calling <a
        href=" usmthModelRefList.Free htm ">ModelRefList.Free</a>.
        
        :param DgnFile:
        Is a reference to the design file containing the models to add to
        the list. @Remarks The returned model ref must be freed by the
        caller.
        
        :returns:
        A pointer to the DgnModelRefList that has an entry for each model
        in the design file. @Group " DgnFile Functions "
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetVersion(dgnFilebj: MSPyDgnPlatform.DgnFile) -> tuple:
        ...
    
    @staticmethod
    def HasPendingChanges(DgnFile: MSPyDgnPlatform.DgnFile) -> bool:
        """
        @Description Determines if a design file has pending chages.
        @Param(input) DgnFile is a reference to the design file of interest
        @Return true if the design file has changes that have not been saved;
        false otherwise.
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsProtected(dgnFileObj: MSPyDgnPlatform.DgnFile) -> bool:
        """
        @Description Check if the specified file is encrypted (e.g., for
        digital rights management)
        
        :param file:
        the DgnFile of interest. @Return true if file is encrypted
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class DgnLibSelector:
    """
    Members:
    
    eNone
    
    eElementStyles
    
    eRendering
    
    eLinks
    
    ePrinting
    
    eClashDetection
    
    eGuiLibs
    
    eSystemGuiLibs
    
    eSystem
    
    eLevelsOnly
    
    eTextFavoritesOnly
    
    eTextStylesOnly
    
    eDimensionStylesOnly
    
    eDisplayStylesOnly
    
    eDrawingSeedsOnly
    
    eLineStylesOnly
    
    eDetailingSymbolStylesOnly
    
    eElementTemplatesOnly
    
    eItemTypesOnly
    
    eNamedExpressions
    """

    def __init__(self: MSPyMstnPlatform.DgnLibSelector, value: int) -> None:
        ...
    
    eClashDetection: DgnLibSelector
    
    eDetailingSymbolStylesOnly: DgnLibSelector
    
    eDimensionStylesOnly: DgnLibSelector
    
    eDisplayStylesOnly: DgnLibSelector
    
    eDrawingSeedsOnly: DgnLibSelector
    
    eElementStyles: DgnLibSelector
    
    eElementTemplatesOnly: DgnLibSelector
    
    eGuiLibs: DgnLibSelector
    
    eItemTypesOnly: DgnLibSelector
    
    eLevelsOnly: DgnLibSelector
    
    eLineStylesOnly: DgnLibSelector
    
    eLinks: DgnLibSelector
    
    eNamedExpressions: DgnLibSelector
    
    eNone: DgnLibSelector
    
    ePrinting: DgnLibSelector
    
    eRendering: DgnLibSelector
    
    eSystem: DgnLibSelector
    
    eSystemGuiLibs: DgnLibSelector
    
    eTextFavoritesOnly: DgnLibSelector
    
    eTextStylesOnly: DgnLibSelector
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DgnLibSelector) -> int:
        ...
    
class DialogIds:
    """
    Members:
    
    eDIALOGID_Locks
    
    eDIALOGID_ToolBoxDummy
    
    eDIALOGID_ElementAttributes
    
    eDIALOGID_CoordReadout
    
    eDIALOGID_MainWindow
    
    eDIALOGID_ReferenceFile
    
    eDIALOGID_FileProperties
    
    eDIALOGID_AuxCoordSystems
    
    eDIALOGID_GetSecurityKey
    
    eDIALOGID_StandardAlert
    
    eDIALOGID_ElementQuickInfo
    
    eDIALOGID_UstnMgr
    
    eDIALOGID_AcademicAdvisory
    
    eDIALOGID_PaletteItems
    
    eDIALOGID_Snaps
    
    eDIALOGID_AccuSnap
    
    eDIALOGID_GraphicsFileExport
    
    eDIALOGID_LineStyleSelect
    
    eDIALOGID_DefineNamedLevelsSort
    
    eDIALOGID_NamedLevelsTargetGroup
    
    eDIALOGID_AdvisoryDisplay
    
    eDIALOGID_CloseToolBoxes
    
    eDIALOGID_TaskNavigation
    
    eDIALOGID_WorkingUnits
    
    eDIALOGID_DefineNamedLevels
    
    eDIALOGID_DBSettings
    
    eDIALOGID_ViewRotation
    
    eDIALOGID_CellMaintenance
    
    eDIALOGID_CellEdit
    
    eDIALOGID_CellCreate
    
    eDIALOGID_DesignFileSettings
    
    eDIALOGID_ActiveAngle
    
    eDIALOGID_ReferenceAttach
    
    eDIALOGID_UserPreference
    
    eDIALOGID_V7DesignFileAlert
    
    eDIALOGID_AboutDigitalRights
    
    eDIALOGID_CustomScale
    
    eDIALOGID_ViewSettings
    
    eDIALOGID_ViewLevels
    
    eDIALOGID_CmdBrowser
    
    eDIALOGID_ActiveScale
    
    eDIALOGID_PatternSettings
    
    eDIALOGID_ColorSquare
    
    eDIALOGID_StdFileSeedCreate
    
    eDIALOGID_KeyinSettings
    
    eDIALOGID_Font
    
    eDIALOGID_ColorPalette
    
    eDIALOGID_LevSymb
    
    eDIALOGID_GridSettings
    
    eDIALOGID_DesignOptions
    
    eDIALOGID_CustomSheetSize
    
    eDIALOGID_Camera
    
    eDIALOGID_AboutConfiguration
    
    eDIALOGID_FunctionKeys
    
    eDIALOGID_TextStyleEditor
    
    eDIALOGID_OptionalInfoBox
    
    eDIALOGID_MDL
    
    eDIALOGID_MDLDetail
    
    eDIALOGID_CmdBrowserApp
    
    eDIALOGID_StdFileOpen
    
    eDIALOGID_Digitizing
    
    eDIALOGID_ExtendedFileOpen
    
    eDIALOGID_PreviewPrint
    
    eDIALOGID_OptionalOKCancelBox
    
    eDIALOGID_AboutWorkmode
    
    eDIALOGID_Display
    
    eDIALOGID_MainFrame
    
    eDIALOGID_FenceFrame
    
    eDIALOGID_FileListDirSingle
    
    eDIALOGID_ToolSettings
    
    eDIALOGID_Image
    
    eDIALOGID_ReferenceRotate
    
    eDIALOGID_ReferenceScale
    
    eDIALOGID_ImageSave
    
    eDIALOGID_TextFileDisplay
    
    eDIALOGID_AboutUstn
    
    eDIALOGID_FileList
    
    eDIALOGID_BasicLocks
    
    eDIALOGID_FileListDirMultiple
    
    eDIALOGID_FileListMultiple
    
    eDIALOGID_FileListDDSingle
    
    eDIALOGID_FileListDDMultiple
    
    eDIALOGID_LevelEdit
    
    eDIALOGID_GroupEdit
    
    eDIALOGID_DialogMessages
    
    eDIALOGID_WindowManMenu
    
    eDIALOGID_ViewToggles
    
    eDIALOGID_StandardInfoBox
    
    eDIALOGID_Help
    
    eDIALOGID_HelpFind
    
    eDIALOGID_LargeAlert
    
    eDIALOGID_ButtonAssignment
    
    eDIALOGID_ButtonMap
    
    eDIALOGID_ShowClipboard
    
    eDIALOGID_DrawComp
    
    eDIALOGID_CompletionBar
    
    eDIALOGID_AboutUstnMore
    
    eDIALOGID_GraphicsFileOpen
    
    eDIALOGID_GraphicsFileSaveAs
    
    eDIALOGID_ReferenceFullSettings
    
    eDIALOGID_ColorInterpolate
    
    eDIALOGID_MediumAlert
    
    eDIALOGID_YesNoCancelAlert
    
    eDIALOGID_ColorPalInfo
    
    eDIALOGID_NamedLevels
    
    eDIALOGID_Igen
    
    eDIALOGID_SetHiliteColor
    
    eDIALOGID_SetVectorCursorColor
    
    eDIALOGID_MediumInfoBox
    
    eDIALOGID_LargeInfoBox
    
    eDIALOGID_MsgBoxYesNo
    
    eDIALOGID_MsgBoxOK
    
    eDIALOGID_MsgBoxYesNoCancel
    
    eDIALOGID_MsgBoxOKCancel
    
    eDIALOGID_View
    
    eDIALOGID_AboutUstnLicenseMore
    
    eDIALOGID_MsgBoxMediumYesNoCancel
    
    eDIALOGID_MoreWindows
    
    eDIALOGID_ElementPreviewDialog
    
    eDIALOGID_UpdateSequence
    
    eDIALOGID_HLineSettings
    
    eDIALOGID_SnapButtonResizable
    
    eDIALOGID_TrackBar
    
    eDIALOGID_BusyBar
    
    eDIALOGID_DesignLinksCreate
    
    eDIALOGID_SelectImagePreview
    
    eDIALOGID_ModelManager
    
    eDIALOGID_V7CellLibConvert
    
    eDIALOGID_YesAllNoCancelAlert
    
    eDIALOGID_ReferenceFileOpen
    
    eDIALOGID_MsgBoxYesAllNoCancel
    
    eDIALOGID_SubEditor
    
    eDIALOGID_ReferenceFileBrowse
    
    eDIALOGID_FileSaveAsOptions
    
    eDIALOGID_ModelChoose
    
    eDIALOGID_CfgVars
    
    eDIALOGID_DockableTemplate
    
    eDIALOGID_FramedTemplate
    
    eDIALOGID_RefColorAdjust
    
    eDIALOGID_AcceleratorPrefs
    
    eDIALOGID_ReferenceDragDrop
    
    eDIALOGID_MultiSnap
    
    eDIALOGID_AdvancedColors
    
    eDIALOGID_ViewAreaBackground
    
    eDIALOGID_TransparencyPriority
    
    eDIALOGID_NamedFences
    
    eDIALOGID_ToolBoxTemplate
    
    eDIALOGID_Customize
    
    eDIALOGID_ColorBookEditor
    
    eDIALOGID_CreateColorBook
    
    eDIALOGID_CellSelectorFileOpen
    
    eDIALOGID_CellSelectorFileCreate
    
    eDIALOGID_MsgBoxYesAllNo
    
    eDIALOGID_ResetMenuOptions
    
    eDIALOGID_RefPresentation
    
    eDIALOGID_ViewBrightness
    
    eDIALOGID_YesAllNoAllCancelAlert
    
    eDIALOGID_MsgBoxMediumYesNo
    
    eDIALOGID_HiddenLineSettings
    
    eDIALOGID_CommonItems
    
    eDIALOGID_PointCloudFileBrowse
    
    eDIALOGID_CellSelect
    
    eDIALOGID_OptionalOKCancelBoxWide
    
    eDIALOGID_InputManager
    
    eDIALOGID_Transparency
    
    eDIALOGID_RasterFileBrowse
    
    eDIALOGID_SavedViewDragDrop
    
    eDIALOGID_CachedVisibleEdgeSettings
    
    eDIALOGID_MsgBoxLargeYesNo
    
    eDIALOGID_DWGAecFileAlert
    
    eDIALOGID_DeletingUsedStyles
    
    eDIALOGID_KeyboardShortcuts
    
    eDIALOGID_BothValidAndDifferent
    
    eDIALOGID_UnassociatedFile_ValidActiveWorkSet
    
    eDIALOGID_FileWorkSetNotFound_InvalidActiveWorkSet
    
    eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet
    
    eDIALOGID_Preprocessor
    
    eDIALOGID_PropertyBinding
    
    eDIALOGID_FileWorkSetFound_InvalidActiveWorkSet
    
    eDIALOGID_UnassociatedFile_Product_Mismatch
    
    eDIALOGID_UnsignedAppWarning
    
    eDIALOGID_VariableDialog
    
    eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet_ValidConfig
    """

    def __init__(self: MSPyMstnPlatform.DialogIds, value: int) -> None:
        ...
    
    eDIALOGID_AboutConfiguration: DialogIds
    
    eDIALOGID_AboutDigitalRights: DialogIds
    
    eDIALOGID_AboutUstn: DialogIds
    
    eDIALOGID_AboutUstnLicenseMore: DialogIds
    
    eDIALOGID_AboutUstnMore: DialogIds
    
    eDIALOGID_AboutWorkmode: DialogIds
    
    eDIALOGID_AcademicAdvisory: DialogIds
    
    eDIALOGID_AcceleratorPrefs: DialogIds
    
    eDIALOGID_AccuSnap: DialogIds
    
    eDIALOGID_ActiveAngle: DialogIds
    
    eDIALOGID_ActiveScale: DialogIds
    
    eDIALOGID_AdvancedColors: DialogIds
    
    eDIALOGID_AdvisoryDisplay: DialogIds
    
    eDIALOGID_AuxCoordSystems: DialogIds
    
    eDIALOGID_BasicLocks: DialogIds
    
    eDIALOGID_BothValidAndDifferent: DialogIds
    
    eDIALOGID_BusyBar: DialogIds
    
    eDIALOGID_ButtonAssignment: DialogIds
    
    eDIALOGID_ButtonMap: DialogIds
    
    eDIALOGID_CachedVisibleEdgeSettings: DialogIds
    
    eDIALOGID_Camera: DialogIds
    
    eDIALOGID_CellCreate: DialogIds
    
    eDIALOGID_CellEdit: DialogIds
    
    eDIALOGID_CellMaintenance: DialogIds
    
    eDIALOGID_CellSelect: DialogIds
    
    eDIALOGID_CellSelectorFileCreate: DialogIds
    
    eDIALOGID_CellSelectorFileOpen: DialogIds
    
    eDIALOGID_CfgVars: DialogIds
    
    eDIALOGID_CloseToolBoxes: DialogIds
    
    eDIALOGID_CmdBrowser: DialogIds
    
    eDIALOGID_CmdBrowserApp: DialogIds
    
    eDIALOGID_ColorBookEditor: DialogIds
    
    eDIALOGID_ColorInterpolate: DialogIds
    
    eDIALOGID_ColorPalInfo: DialogIds
    
    eDIALOGID_ColorPalette: DialogIds
    
    eDIALOGID_ColorSquare: DialogIds
    
    eDIALOGID_CommonItems: DialogIds
    
    eDIALOGID_CompletionBar: DialogIds
    
    eDIALOGID_CoordReadout: DialogIds
    
    eDIALOGID_CreateColorBook: DialogIds
    
    eDIALOGID_CustomScale: DialogIds
    
    eDIALOGID_CustomSheetSize: DialogIds
    
    eDIALOGID_Customize: DialogIds
    
    eDIALOGID_DBSettings: DialogIds
    
    eDIALOGID_DWGAecFileAlert: DialogIds
    
    eDIALOGID_DefineNamedLevels: DialogIds
    
    eDIALOGID_DefineNamedLevelsSort: DialogIds
    
    eDIALOGID_DeletingUsedStyles: DialogIds
    
    eDIALOGID_DesignFileSettings: DialogIds
    
    eDIALOGID_DesignLinksCreate: DialogIds
    
    eDIALOGID_DesignOptions: DialogIds
    
    eDIALOGID_DialogMessages: DialogIds
    
    eDIALOGID_Digitizing: DialogIds
    
    eDIALOGID_Display: DialogIds
    
    eDIALOGID_DockableTemplate: DialogIds
    
    eDIALOGID_DrawComp: DialogIds
    
    eDIALOGID_ElementAttributes: DialogIds
    
    eDIALOGID_ElementPreviewDialog: DialogIds
    
    eDIALOGID_ElementQuickInfo: DialogIds
    
    eDIALOGID_ExtendedFileOpen: DialogIds
    
    eDIALOGID_FenceFrame: DialogIds
    
    eDIALOGID_FileList: DialogIds
    
    eDIALOGID_FileListDDMultiple: DialogIds
    
    eDIALOGID_FileListDDSingle: DialogIds
    
    eDIALOGID_FileListDirMultiple: DialogIds
    
    eDIALOGID_FileListDirSingle: DialogIds
    
    eDIALOGID_FileListMultiple: DialogIds
    
    eDIALOGID_FileProperties: DialogIds
    
    eDIALOGID_FileSaveAsOptions: DialogIds
    
    eDIALOGID_FileWorkSetFound_InvalidActiveWorkSet: DialogIds
    
    eDIALOGID_FileWorkSetNotFound_InvalidActiveWorkSet: DialogIds
    
    eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet: DialogIds
    
    eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet_ValidConfig: DialogIds
    
    eDIALOGID_Font: DialogIds
    
    eDIALOGID_FramedTemplate: DialogIds
    
    eDIALOGID_FunctionKeys: DialogIds
    
    eDIALOGID_GetSecurityKey: DialogIds
    
    eDIALOGID_GraphicsFileExport: DialogIds
    
    eDIALOGID_GraphicsFileOpen: DialogIds
    
    eDIALOGID_GraphicsFileSaveAs: DialogIds
    
    eDIALOGID_GridSettings: DialogIds
    
    eDIALOGID_GroupEdit: DialogIds
    
    eDIALOGID_HLineSettings: DialogIds
    
    eDIALOGID_Help: DialogIds
    
    eDIALOGID_HelpFind: DialogIds
    
    eDIALOGID_HiddenLineSettings: DialogIds
    
    eDIALOGID_Igen: DialogIds
    
    eDIALOGID_Image: DialogIds
    
    eDIALOGID_ImageSave: DialogIds
    
    eDIALOGID_InputManager: DialogIds
    
    eDIALOGID_KeyboardShortcuts: DialogIds
    
    eDIALOGID_KeyinSettings: DialogIds
    
    eDIALOGID_LargeAlert: DialogIds
    
    eDIALOGID_LargeInfoBox: DialogIds
    
    eDIALOGID_LevSymb: DialogIds
    
    eDIALOGID_LevelEdit: DialogIds
    
    eDIALOGID_LineStyleSelect: DialogIds
    
    eDIALOGID_Locks: DialogIds
    
    eDIALOGID_MDL: DialogIds
    
    eDIALOGID_MDLDetail: DialogIds
    
    eDIALOGID_MainFrame: DialogIds
    
    eDIALOGID_MainWindow: DialogIds
    
    eDIALOGID_MediumAlert: DialogIds
    
    eDIALOGID_MediumInfoBox: DialogIds
    
    eDIALOGID_ModelChoose: DialogIds
    
    eDIALOGID_ModelManager: DialogIds
    
    eDIALOGID_MoreWindows: DialogIds
    
    eDIALOGID_MsgBoxLargeYesNo: DialogIds
    
    eDIALOGID_MsgBoxMediumYesNo: DialogIds
    
    eDIALOGID_MsgBoxMediumYesNoCancel: DialogIds
    
    eDIALOGID_MsgBoxOK: DialogIds
    
    eDIALOGID_MsgBoxOKCancel: DialogIds
    
    eDIALOGID_MsgBoxYesAllNo: DialogIds
    
    eDIALOGID_MsgBoxYesAllNoCancel: DialogIds
    
    eDIALOGID_MsgBoxYesNo: DialogIds
    
    eDIALOGID_MsgBoxYesNoCancel: DialogIds
    
    eDIALOGID_MultiSnap: DialogIds
    
    eDIALOGID_NamedFences: DialogIds
    
    eDIALOGID_NamedLevels: DialogIds
    
    eDIALOGID_NamedLevelsTargetGroup: DialogIds
    
    eDIALOGID_OptionalInfoBox: DialogIds
    
    eDIALOGID_OptionalOKCancelBox: DialogIds
    
    eDIALOGID_OptionalOKCancelBoxWide: DialogIds
    
    eDIALOGID_PaletteItems: DialogIds
    
    eDIALOGID_PatternSettings: DialogIds
    
    eDIALOGID_PointCloudFileBrowse: DialogIds
    
    eDIALOGID_Preprocessor: DialogIds
    
    eDIALOGID_PreviewPrint: DialogIds
    
    eDIALOGID_PropertyBinding: DialogIds
    
    eDIALOGID_RasterFileBrowse: DialogIds
    
    eDIALOGID_RefColorAdjust: DialogIds
    
    eDIALOGID_RefPresentation: DialogIds
    
    eDIALOGID_ReferenceAttach: DialogIds
    
    eDIALOGID_ReferenceDragDrop: DialogIds
    
    eDIALOGID_ReferenceFile: DialogIds
    
    eDIALOGID_ReferenceFileBrowse: DialogIds
    
    eDIALOGID_ReferenceFileOpen: DialogIds
    
    eDIALOGID_ReferenceFullSettings: DialogIds
    
    eDIALOGID_ReferenceRotate: DialogIds
    
    eDIALOGID_ReferenceScale: DialogIds
    
    eDIALOGID_ResetMenuOptions: DialogIds
    
    eDIALOGID_SavedViewDragDrop: DialogIds
    
    eDIALOGID_SelectImagePreview: DialogIds
    
    eDIALOGID_SetHiliteColor: DialogIds
    
    eDIALOGID_SetVectorCursorColor: DialogIds
    
    eDIALOGID_ShowClipboard: DialogIds
    
    eDIALOGID_SnapButtonResizable: DialogIds
    
    eDIALOGID_Snaps: DialogIds
    
    eDIALOGID_StandardAlert: DialogIds
    
    eDIALOGID_StandardInfoBox: DialogIds
    
    eDIALOGID_StdFileOpen: DialogIds
    
    eDIALOGID_StdFileSeedCreate: DialogIds
    
    eDIALOGID_SubEditor: DialogIds
    
    eDIALOGID_TaskNavigation: DialogIds
    
    eDIALOGID_TextFileDisplay: DialogIds
    
    eDIALOGID_TextStyleEditor: DialogIds
    
    eDIALOGID_ToolBoxDummy: DialogIds
    
    eDIALOGID_ToolBoxTemplate: DialogIds
    
    eDIALOGID_ToolSettings: DialogIds
    
    eDIALOGID_TrackBar: DialogIds
    
    eDIALOGID_Transparency: DialogIds
    
    eDIALOGID_TransparencyPriority: DialogIds
    
    eDIALOGID_UnassociatedFile_Product_Mismatch: DialogIds
    
    eDIALOGID_UnassociatedFile_ValidActiveWorkSet: DialogIds
    
    eDIALOGID_UnsignedAppWarning: DialogIds
    
    eDIALOGID_UpdateSequence: DialogIds
    
    eDIALOGID_UserPreference: DialogIds
    
    eDIALOGID_UstnMgr: DialogIds
    
    eDIALOGID_V7CellLibConvert: DialogIds
    
    eDIALOGID_V7DesignFileAlert: DialogIds
    
    eDIALOGID_VariableDialog: DialogIds
    
    eDIALOGID_View: DialogIds
    
    eDIALOGID_ViewAreaBackground: DialogIds
    
    eDIALOGID_ViewBrightness: DialogIds
    
    eDIALOGID_ViewLevels: DialogIds
    
    eDIALOGID_ViewRotation: DialogIds
    
    eDIALOGID_ViewSettings: DialogIds
    
    eDIALOGID_ViewToggles: DialogIds
    
    eDIALOGID_WindowManMenu: DialogIds
    
    eDIALOGID_WorkingUnits: DialogIds
    
    eDIALOGID_YesAllNoAllCancelAlert: DialogIds
    
    eDIALOGID_YesAllNoCancelAlert: DialogIds
    
    eDIALOGID_YesNoCancelAlert: DialogIds
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DialogIds) -> int:
        ...
    
class Dimension2dData:
    """
    None
    """

    def AddCurveIdentifier(self: MSPyMstnPlatform.Constraint2dData, id: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        @description Add curve identifier
        
        :param id:
        The id to be added
        """
        ...
    
    @property
    def AngleSectorIndex(arg0: MSPyMstnPlatform.Dimension2dData) -> int:
        ...
    @AngleSectorIndex.setter
    def AngleSectorIndex(arg0: MSPyMstnPlatform.Dimension2dData, arg1: int) -> None:
        ...
    
    @property
    def ConstraintStatus(arg0: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dStatus:
        ...
    @ConstraintStatus.setter
    def ConstraintStatus(arg0: MSPyMstnPlatform.Constraint2dData, arg1: MSPyMstnPlatform.Constraint2dStatus) -> None:
        ...
    
    @property
    def ConstraintType(arg0: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dType:
        ...
    @ConstraintType.setter
    def ConstraintType(arg0: MSPyMstnPlatform.Constraint2dData, arg1: MSPyMstnPlatform.Constraint2dType) -> None:
        ...
    
    @property
    def DiaType(arg0: MSPyMstnPlatform.Dimension2dData) -> int:
        ...
    @DiaType.setter
    def DiaType(arg0: MSPyMstnPlatform.Dimension2dData, arg1: int) -> None:
        ...
    
    @property
    def DimensionAlignmentType(arg0: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionAlignmentType:
        ...
    @DimensionAlignmentType.setter
    def DimensionAlignmentType(arg0: MSPyMstnPlatform.Dimension2dData, arg1: MSPyMstnPlatform.DimensionAlignmentType) -> None:
        ...
    
    @property
    def DimensionFraction(arg0: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    @DimensionFraction.setter
    def DimensionFraction(arg0: MSPyMstnPlatform.Dimension2dData, arg1: float) -> None:
        ...
    
    @property
    def DimensionHeight(arg0: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    @DimensionHeight.setter
    def DimensionHeight(arg0: MSPyMstnPlatform.Dimension2dData, arg1: float) -> None:
        ...
    
    @property
    def DimensionValue(arg0: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    @DimensionValue.setter
    def DimensionValue(arg0: MSPyMstnPlatform.Dimension2dData, arg1: float) -> None:
        ...
    
    @property
    def DimensionXOffset(arg0: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    @DimensionXOffset.setter
    def DimensionXOffset(arg0: MSPyMstnPlatform.Dimension2dData, arg1: float) -> None:
        ...
    
    def GetAngleSectorIndex(self: MSPyMstnPlatform.Dimension2dData) -> int:
        ...
    
    def GetConstraintStatus(self: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dStatus:
        """
        @description Get the constraint status
        
        :returns:
        The constraint status
        """
        ...
    
    def GetConstraintType(self: MSPyMstnPlatform.Constraint2dData) -> MSPyMstnPlatform.Constraint2dType:
        """
        @description Get the constraint type
        
        :returns:
        The constraint type
        """
        ...
    
    def GetDiaType(self: MSPyMstnPlatform.Dimension2dData) -> int:
        ...
    
    def GetDimensionAlignmentType(self: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionAlignmentType:
        ...
    
    def GetDimensionFraction(self: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    
    def GetDimensionHeight(self: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    
    def GetDimensionValue(self: MSPyMstnPlatform.Dimension2dData) -> float:
        """
        @description Get dimension value
        
        :returns:
        Dimension value
        """
        ...
    
    def GetDimensionXOffset(self: MSPyMstnPlatform.Dimension2dData) -> float:
        ...
    
    def GetHalfSpace1(self: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionHalfSpace:
        ...
    
    def GetHalfSpace2(self: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionHalfSpace:
        ...
    
    def GetSectorAngleType(self: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.SectorAngleType:
        ...
    
    def GetVariableName(self: MSPyMstnPlatform.Dimension2dData) -> MSPyBentley.WString:
        """
        @description Get variable name
        
        :returns:
        A WString reference to the variable name
        """
        ...
    
    @property
    def HalfSpace1(arg0: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionHalfSpace:
        ...
    @HalfSpace1.setter
    def HalfSpace1(arg0: MSPyMstnPlatform.Dimension2dData, arg1: MSPyMstnPlatform.DimensionHalfSpace) -> None:
        ...
    
    @property
    def HalfSpace2(arg0: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.DimensionHalfSpace:
        ...
    @HalfSpace2.setter
    def HalfSpace2(arg0: MSPyMstnPlatform.Dimension2dData, arg1: MSPyMstnPlatform.DimensionHalfSpace) -> None:
        ...
    
    @property
    def SectorAngleType(arg0: MSPyMstnPlatform.Dimension2dData) -> MSPyMstnPlatform.SectorAngleType:
        ...
    @SectorAngleType.setter
    def SectorAngleType(arg0: MSPyMstnPlatform.Dimension2dData, arg1: MSPyMstnPlatform.SectorAngleType) -> None:
        ...
    
    def SetAngleSectorIndex(self: MSPyMstnPlatform.Dimension2dData, sectorIndex: int) -> None:
        ...
    
    def SetConstraintStatus(self: MSPyMstnPlatform.Constraint2dData, status: MSPyMstnPlatform.Constraint2dStatus) -> None:
        """
        @description Set the constraint status
        
        :param status:
        A new constraint status to set
        """
        ...
    
    def SetConstraintType(self: MSPyMstnPlatform.Constraint2dData, type: MSPyMstnPlatform.Constraint2dType) -> None:
        """
        @description Set the constraint type
        
        :param type:
        The constraint type
        """
        ...
    
    def SetDiaType(self: MSPyMstnPlatform.Dimension2dData, value: int) -> None:
        ...
    
    def SetDimensionAlignmentType(self: MSPyMstnPlatform.Dimension2dData, type: MSPyMstnPlatform.DimensionAlignmentType) -> None:
        ...
    
    def SetDimensionFraction(self: MSPyMstnPlatform.Dimension2dData, value: float) -> None:
        ...
    
    def SetDimensionHeight(self: MSPyMstnPlatform.Dimension2dData, value: float) -> None:
        ...
    
    def SetDimensionValue(self: MSPyMstnPlatform.Dimension2dData, value: float) -> None:
        """
        @description Set a new dimension value
        
        :param value:
        A new dimension value to set
        """
        ...
    
    def SetDimensionXOffset(self: MSPyMstnPlatform.Dimension2dData, value: float) -> None:
        ...
    
    def SetHalfSpace1(self: MSPyMstnPlatform.Dimension2dData, halfSpace: MSPyMstnPlatform.DimensionHalfSpace) -> None:
        ...
    
    def SetHalfSpace2(self: MSPyMstnPlatform.Dimension2dData, halfSpace: MSPyMstnPlatform.DimensionHalfSpace) -> None:
        ...
    
    def SetSectorAngleType(self: MSPyMstnPlatform.Dimension2dData, type: MSPyMstnPlatform.SectorAngleType) -> None:
        ...
    
    def SetVariableName(self: MSPyMstnPlatform.Dimension2dData, name: MSPyBentley.WString) -> None:
        """
        @description Set variable name
        
        :param name:
        Variable name
        """
        ...
    
    @property
    def VariableName(arg0: MSPyMstnPlatform.Dimension2dData) -> MSPyBentley.WString:
        ...
    @VariableName.setter
    def VariableName(arg0: MSPyMstnPlatform.Dimension2dData, arg1: MSPyBentley.WString) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Dimension2dData) -> None
        
        2. __init__(self: MSPyMstnPlatform.Dimension2dData, constraintType: MSPyMstnPlatform.Constraint2dType) -> None
        """
        ...
    
class Dimension3dBase:
    """
    None
    """

    def Create(*args, **kwargs):
        """
        Overloaded function.
        
        1. Create(type: MSPyMstnPlatform.Constraint3dType) -> MSPyMstnPlatform.Constraint3dBase
        
        2. Create(type: MSPyMstnPlatform.Constraint3dType, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray, flags: int) -> MSPyMstnPlatform.Constraint3dBase
        """
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_SurfaceOrientation
        
        eFlagMask_GroupLock
        
        eFlagMask_HalfSpace1
        
        eFlagMask_HalfSpace2
        """
    
        def __init__(self: MSPyMstnPlatform.Constraint3dBase.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_GroupLock: FlagMasks
        
        eFlagMask_HalfSpace1: FlagMasks
        
        eFlagMask_HalfSpace2: FlagMasks
        
        eFlagMask_SurfaceOrientation: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.Constraint3dBase.FlagMasks) -> int:
            ...
        
    @property
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    @Flags.setter
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: int) -> None:
        ...
    
    def GetElementRefs(self: MSPyMstnPlatform.Constraint3dBase, elemRefs: Set[MSPyDgnPlatform.ElementRefBase]) -> None:
        ...
    
    def GetFlags(self: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    
    def GetGroupLock(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def GetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.Constraint3dBase, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    
    def GetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    
    def GetType(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    @property
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    @GroupLock.setter
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: bool) -> None:
        ...
    
    @property
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace1.setter
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    @property
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace2.setter
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def HasBoundVariable(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def HasElementRef(self: MSPyMstnPlatform.Constraint3dBase, elemRef: MSPyDgnPlatform.ElementRefBase) -> bool:
        ...
    
    def IsRedundant(self: MSPyMstnPlatform.Constraint3dBase, other: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def SetFlags(self: MSPyMstnPlatform.Constraint3dBase, flags: int) -> None:
        ...
    
    def SetGeometryIds(self: MSPyMstnPlatform.Constraint3dBase, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray) -> None:
        ...
    
    def SetGroupLock(self: MSPyMstnPlatform.Constraint3dBase, groupLock: bool) -> None:
        ...
    
    def SetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.Constraint3dBase, status: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    def SetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase, orientation: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    @property
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    @SurfaceOrientation.setter
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eDCM3_D_BETWEEN_FIXED: Status
    
    eDCM3_D_BETWEEN_SET_MEMBERS: Status
    
    eDCM3_D_NOT_CHANGED: Status
    
    eDCM3_D_NOT_CONSISTENT: Status
    
    eDCM3_D_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_D_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_D_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_D_NOT_SOLVED: Status
    
    eDCM3_D_OVER_DEFINED: Status
    
    eDCM3_D_SOLVED: Status
    
    eDCM3_D_UNKNOWN: Status
    
    eFlagMask_GroupLock: FlagMasks
    
    eFlagMask_HalfSpace1: FlagMasks
    
    eFlagMask_HalfSpace2: FlagMasks
    
    eFlagMask_SurfaceOrientation: FlagMasks
    
    eRedundant: Status
    
class DimensionAlignmentType:
    """
    Members:
    
    eDimAlign_Unknown
    
    eDimAlign_Drawing_X
    
    eDimAlign_Drawing_X_Reversed
    
    eDimAlign_Drawing_Y
    
    eDimAlign_Drawing_Y_Reversed
    """

    def __init__(self: MSPyMstnPlatform.DimensionAlignmentType, value: int) -> None:
        ...
    
    eDimAlign_Drawing_X: DimensionAlignmentType
    
    eDimAlign_Drawing_X_Reversed: DimensionAlignmentType
    
    eDimAlign_Drawing_Y: DimensionAlignmentType
    
    eDimAlign_Drawing_Y_Reversed: DimensionAlignmentType
    
    eDimAlign_Unknown: DimensionAlignmentType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DimensionAlignmentType) -> int:
        ...
    
class DimensionHalfSpace:
    """
    Members:
    
    eUnspecified
    
    eLeft
    
    eRight
    """

    def __init__(self: MSPyMstnPlatform.DimensionHalfSpace, value: int) -> None:
        ...
    
    eLeft: DimensionHalfSpace
    
    eRight: DimensionHalfSpace
    
    eUnspecified: DimensionHalfSpace
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DimensionHalfSpace) -> int:
        ...
    
class DimensionStyleChangeType:
    """
    Members:
    
    eDIMSTYLE_TABLE_CHANGE
    
    eDIMSTYLE_CHANGE_ACTIVE
    
    eDIMSTYLE_CHANGE_PREACTIVE
    
    eDIMSTYLE_CHANGE_SETTINGS
    """

    def __init__(self: MSPyMstnPlatform.DimensionStyleChangeType, value: int) -> None:
        ...
    
    eDIMSTYLE_CHANGE_ACTIVE: DimensionStyleChangeType
    
    eDIMSTYLE_CHANGE_PREACTIVE: DimensionStyleChangeType
    
    eDIMSTYLE_CHANGE_SETTINGS: DimensionStyleChangeType
    
    eDIMSTYLE_TABLE_CHANGE: DimensionStyleChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DimensionStyleChangeType) -> int:
        ...
    
class DistanceDimension3d:
    """
    None
    """

    @staticmethod
    def Create(geometryIds: MSPyMstnPlatform.GeometryIdPtrArray, flags: int, value: float, variableAccess: MSPyBentley.WString) -> MSPyMstnPlatform.Constraint3dBase:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_SurfaceOrientation
        
        eFlagMask_GroupLock
        
        eFlagMask_HalfSpace1
        
        eFlagMask_HalfSpace2
        """
    
        def __init__(self: MSPyMstnPlatform.Constraint3dBase.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_GroupLock: FlagMasks
        
        eFlagMask_HalfSpace1: FlagMasks
        
        eFlagMask_HalfSpace2: FlagMasks
        
        eFlagMask_SurfaceOrientation: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.Constraint3dBase.FlagMasks) -> int:
            ...
        
    @property
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    @Flags.setter
    def Flags(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: int) -> None:
        ...
    
    def GetElementRefs(self: MSPyMstnPlatform.Constraint3dBase, elemRefs: Set[MSPyDgnPlatform.ElementRefBase]) -> None:
        ...
    
    def GetFlags(self: MSPyMstnPlatform.Constraint3dBase) -> int:
        ...
    
    def GetGroupLock(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def GetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.Constraint3dBase, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    
    def GetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    
    def GetType(self: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    @property
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    @GroupLock.setter
    def GroupLock(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: bool) -> None:
        ...
    
    @property
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace1.setter
    def HalfSpace1(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    @property
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dHalfSpace:
        ...
    @HalfSpace2.setter
    def HalfSpace2(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def HasBoundVariable(self: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def HasElementRef(self: MSPyMstnPlatform.Constraint3dBase, elemRef: MSPyDgnPlatform.ElementRefBase) -> bool:
        ...
    
    def IsRedundant(self: MSPyMstnPlatform.Constraint3dBase, other: MSPyMstnPlatform.Constraint3dBase) -> bool:
        ...
    
    def SetFlags(self: MSPyMstnPlatform.Constraint3dBase, flags: int) -> None:
        ...
    
    def SetGeometryIds(self: MSPyMstnPlatform.Constraint3dBase, geometryIds: MSPyMstnPlatform.GeometryIdPtrArray) -> None:
        ...
    
    def SetGroupLock(self: MSPyMstnPlatform.Constraint3dBase, groupLock: bool) -> None:
        ...
    
    def SetHalfSpace1(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetHalfSpace2(self: MSPyMstnPlatform.Constraint3dBase, halfSpace: MSPyMstnPlatform.Constraint3dHalfSpace) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.Constraint3dBase, status: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    def SetSurfaceOrientation(self: MSPyMstnPlatform.Constraint3dBase, orientation: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dBase.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.Constraint3dBase.Status) -> None:
        ...
    
    @property
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.SurfaceOrientation:
        ...
    @SurfaceOrientation.setter
    def SurfaceOrientation(arg0: MSPyMstnPlatform.Constraint3dBase, arg1: MSPyMstnPlatform.SurfaceOrientation) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.Constraint3dBase) -> MSPyMstnPlatform.Constraint3dType:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eDCM3_D_BETWEEN_FIXED: Status
    
    eDCM3_D_BETWEEN_SET_MEMBERS: Status
    
    eDCM3_D_NOT_CHANGED: Status
    
    eDCM3_D_NOT_CONSISTENT: Status
    
    eDCM3_D_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_D_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_D_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_D_NOT_SOLVED: Status
    
    eDCM3_D_OVER_DEFINED: Status
    
    eDCM3_D_SOLVED: Status
    
    eDCM3_D_UNKNOWN: Status
    
    eFlagMask_GroupLock: FlagMasks
    
    eFlagMask_HalfSpace1: FlagMasks
    
    eFlagMask_HalfSpace2: FlagMasks
    
    eFlagMask_SurfaceOrientation: FlagMasks
    
    eRedundant: Status
    
class DockPosition:
    """
    Members:
    
    eDOCK_NOTDOCKED
    
    eDOCK_LEFT
    
    eDOCK_RIGHT
    
    eDOCK_TOP
    
    eDOCK_BOTTOM
    
    eDOCK_NOTSHOWN
    
    eDOCK_CENTER
    
    eDOCK_FILL
    """

    def __init__(self: MSPyMstnPlatform.DockPosition, value: int) -> None:
        ...
    
    eDOCK_BOTTOM: DockPosition
    
    eDOCK_CENTER: DockPosition
    
    eDOCK_FILL: DockPosition
    
    eDOCK_LEFT: DockPosition
    
    eDOCK_NOTDOCKED: DockPosition
    
    eDOCK_NOTSHOWN: DockPosition
    
    eDOCK_RIGHT: DockPosition
    
    eDOCK_TOP: DockPosition
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DockPosition) -> int:
        ...
    
class DockPriority:
    """
    Members:
    
    eDOCKPRIORITY_CMDWINDOW
    
    eDOCKPRIORITY_STATUS
    
    eDOCKPRIORITY_BASELEFT
    
    eDOCKPRIORITY_BASERIGHT
    
    eDOCKPRIORITY_BASETOP
    
    eDOCKPRIORITY_BASEBOTTOM
    
    eDOCKEXTENT_DONTCARE
    
    eDOCKEXTENT_FULLWIDTHORHEIGHT
    
    eDOCKEXTENT_SPECIFIED
    
    eDOCKEXTENT_INVALIDREGION
    """

    def __init__(self: MSPyMstnPlatform.DockPriority, value: int) -> None:
        ...
    
    eDOCKEXTENT_DONTCARE: DockPriority
    
    eDOCKEXTENT_FULLWIDTHORHEIGHT: DockPriority
    
    eDOCKEXTENT_INVALIDREGION: DockPriority
    
    eDOCKEXTENT_SPECIFIED: DockPriority
    
    eDOCKPRIORITY_BASEBOTTOM: DockPriority
    
    eDOCKPRIORITY_BASELEFT: DockPriority
    
    eDOCKPRIORITY_BASERIGHT: DockPriority
    
    eDOCKPRIORITY_BASETOP: DockPriority
    
    eDOCKPRIORITY_CMDWINDOW: DockPriority
    
    eDOCKPRIORITY_STATUS: DockPriority
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DockPriority) -> int:
        ...
    
class Drag2dInfo:
    """
    None
    """

    def Clear(self: MSPyMstnPlatform.Drag2dInfo) -> None:
        ...
    
    @property
    def CurveEntityIdentifier(arg0: MSPyMstnPlatform.Drag2dInfo) -> MSPyMstnPlatform.CurveEntityIdentifier:
        ...
    @CurveEntityIdentifier.setter
    def CurveEntityIdentifier(arg0: MSPyMstnPlatform.Drag2dInfo, arg1: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        ...
    
    @property
    def DraggingTransform(arg0: MSPyMstnPlatform.Drag2dInfo) -> MSPyMstnPlatform.DragTransformType:
        ...
    @DraggingTransform.setter
    def DraggingTransform(arg0: MSPyMstnPlatform.Drag2dInfo, arg1: MSPyMstnPlatform.DragTransformType) -> None:
        ...
    
    def GetCurveEntityIdentifier(self: MSPyMstnPlatform.Drag2dInfo) -> MSPyMstnPlatform.CurveEntityIdentifier:
        """
        @description Get curve identifier
        
        :returns:
        Curve identifier
        """
        ...
    
    def GetDraggingTransform(self: MSPyMstnPlatform.Drag2dInfo) -> MSPyMstnPlatform.DragTransformType:
        """
        @description Get dragging transform type
        
        :returns:
        Dragging transform type
        """
        ...
    
    def GetMoveValue(self: MSPyMstnPlatform.Drag2dInfo) -> MSPyBentleyGeom.DVec3d:
        """
        @description Get moving value
        
        :returns:
        A vector representing the moving value.
        """
        ...
    
    def GetRadius(self: MSPyMstnPlatform.Drag2dInfo) -> float:
        """
        @description Get radius
        
        :returns:
        Radius value
        """
        ...
    
    @property
    def MoveValue(arg0: MSPyMstnPlatform.Drag2dInfo) -> MSPyBentleyGeom.DVec3d:
        ...
    @MoveValue.setter
    def MoveValue(arg0: MSPyMstnPlatform.Drag2dInfo, arg1: MSPyBentleyGeom.DVec3d) -> None:
        ...
    
    @property
    def Radius(arg0: MSPyMstnPlatform.Drag2dInfo) -> float:
        ...
    @Radius.setter
    def Radius(arg0: MSPyMstnPlatform.Drag2dInfo, arg1: float) -> None:
        ...
    
    def SetCurveEntityIdentifier(self: MSPyMstnPlatform.Drag2dInfo, identifier: MSPyMstnPlatform.CurveEntityIdentifier) -> None:
        """
        @description Set curve identifier
        
        :param identifer:
        Curve identifier
        """
        ...
    
    def SetDraggingTransform(self: MSPyMstnPlatform.Drag2dInfo, transformType: MSPyMstnPlatform.DragTransformType) -> None:
        """
        @description Set dragging transform type
        
        :param transformType:
        Dragging transform type
        """
        ...
    
    def SetMoveValue(self: MSPyMstnPlatform.Drag2dInfo, value: MSPyBentleyGeom.DVec3d) -> None:
        """
        @description Set moving value
        
        :param value:
        Moving value
        """
        ...
    
    def SetRadius(self: MSPyMstnPlatform.Drag2dInfo, radius: float) -> None:
        """
        @description Set radius
        
        :param radius:
        Radius
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.Drag2dInfo) -> None
        
        2. __init__(self: MSPyMstnPlatform.Drag2dInfo, identifier: MSPyMstnPlatform.CurveEntityIdentifier, transformType: MSPyMstnPlatform.DragTransformType = <DragTransformType.eTranslation: 1>) -> None
        """
        ...
    
class DragTransformType:
    """
    Members:
    
    eGeneral
    
    eTranslation
    
    eRadius
    
    eMajor_Radius
    
    eMinor_Radius
    
    eOffset_Distance
    """

    def __init__(self: MSPyMstnPlatform.DragTransformType, value: int) -> None:
        ...
    
    eGeneral: DragTransformType
    
    eMajor_Radius: DragTransformType
    
    eMinor_Radius: DragTransformType
    
    eOffset_Distance: DragTransformType
    
    eRadius: DragTransformType
    
    eTranslation: DragTransformType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DragTransformType) -> int:
        ...
    
class DriverCoordSysOrigin:
    """
    Members:
    
    eLowerLeft
    
    eUpperLeft
    """

    def __init__(self: MSPyMstnPlatform.DriverCoordSysOrigin, value: int) -> None:
        ...
    
    eLowerLeft: DriverCoordSysOrigin
    
    eUpperLeft: DriverCoordSysOrigin
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DriverCoordSysOrigin) -> int:
        ...
    
class DriverOutputMode:
    """
    Members:
    
    eUndefined
    
    eForceRasterized
    
    ePreferRasterized
    
    eForceNonrasterized
    
    ePreferNonrasterized
    """

    def __init__(self: MSPyMstnPlatform.DriverOutputMode, value: int) -> None:
        ...
    
    eForceNonrasterized: DriverOutputMode
    
    eForceRasterized: DriverOutputMode
    
    ePreferNonrasterized: DriverOutputMode
    
    ePreferRasterized: DriverOutputMode
    
    eUndefined: DriverOutputMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.DriverOutputMode) -> int:
        ...
    
class EdgeArcAxisGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, edgeId: MSPyBentleyGeom.EdgeId) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class EdgeGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, subEntity: MSPyDgnPlatform.ISubEntity) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class ElementPropertyUtils:
    """
    None
    """

    @staticmethod
    def ApplyActiveAreaFill(eeh: MSPyDgnPlatform.EditElementHandle, fillMode: int) -> bool:
        """
        Apply the active solid or gradient fill to the supplied element.
        
        :param eeh:
        The element to modify.
        
        :param fillMode:
        0 = none, 1 = opaque fill, -1 to use the active fill settings.
        
        :returns:
        true if element was updated.
        
        See also:
        AddSolidFill AddGradientFill Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def ApplyActiveAreaSettings(eeh: MSPyDgnPlatform.EditElementHandle, fillMode: int) -> None:
        """
        Update the supplied element to the current active fill and area
        settings using IAreaFillPropertiesEdit. @note:Does nothing if model
        of EditElementHandle is not ACTIVEMODEL. *
        
        Remark:
        """
        ...
    
    @staticmethod
    def ApplyActiveGradientFill(eeh: MSPyDgnPlatform.EditElementHandle) -> bool:
        """
        Apply the active gradient fill to the supplied element.
        
        :param eeh:
        The element to modify.
        
        :returns:
        true if element was updated.
        
        See also:
        AddGradientFill Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def ApplyActivePattern(eeh: MSPyDgnPlatform.EditElementHandle, params: MSPyDgnPlatform.PatternParams, hatchDefLines: MSPyDgnPlatform.DwgHatchDefLine, option: int, origin: MSPyBentleyGeom.DPoint3d, rMatrix: MSPyBentleyGeom.RotMatrix, line1: int, line2: int, index: int = 0) -> bool:
        """
        Apply the active pattern type and settings to the supplied element.
        
        :param eeh:
        The element to modify.
        
        :param paramsP:
        pattern params or NULL.
        
        :param hatchDefLinesP:
        DWG hatch definition or NULL.
        
        :param option:
        pattern type:PATTERN_HATCH, PATTERN_CROSSHATCH, or PATTERN_AREA,
        used if paramsP is NULL.
        
        :param originP:
        pattern origin or NULL.
        
        :param rMatrix:
        pattern rotation or NULL.
        
        :param line1:
        Multiline specific profile index if patterning between specific
        profile lines.
        
        :param line2:
        Multiline specific profile index if patterning between specific
        profile lines.
        
        :param index:
        Pattern index (only for multilines).
        
        :returns:
        true if element was updated.
        
        See also:
        AddPattern Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def ApplyActiveSettings(eeh: MSPyDgnPlatform.EditElementHandle) -> None:
        """
        Update the supplied element to the current active settings. Sets
        level, color, style, weight, class, transparency, and display priority
        (2d only). @note:Does nothing if model of EditElementHandle is not
        ACTIVEMODEL. *
        
        Remark:
        """
        ...
    
    @staticmethod
    def ApplyActiveSolidFill(eeh: MSPyDgnPlatform.EditElementHandle) -> bool:
        """
        Apply the active solid fill to the supplied element.
        
        :param eeh:
        The element to modify.
        
        :returns:
        true if element was updated.
        
        See also:
        AddSolidFill Bentley Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ExportElementFilterMode:
    """
    Members:
    
    eExportElementFilterMode_ByLevel
    
    eExportElementFilterMode_ByElementTemplate
    
    eExportElementFilterMode_ByItemType
    
    eExportElementFilterMode_BySelectionSet
    """

    def __init__(self: MSPyMstnPlatform.ExportElementFilterMode, value: int) -> None:
        ...
    
    eExportElementFilterMode_ByElementTemplate: ExportElementFilterMode
    
    eExportElementFilterMode_ByItemType: ExportElementFilterMode
    
    eExportElementFilterMode_ByLevel: ExportElementFilterMode
    
    eExportElementFilterMode_BySelectionSet: ExportElementFilterMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ExportElementFilterMode) -> int:
        ...
    
class ExportManager:
    """
    None
    """

    def CreateGDBExportSpecification(self: MSPyMstnPlatform.ExportManager, elementFilterMode: MSPyMstnPlatform.ExportElementFilterMode) -> tuple:
        """
        Create a new export specification for a GDB file.
        The export specification is a data structure that contains the information needed to export DGN elements to a GDB file.
        
        Parameter ``[out]``:
        The new Export specification.
        
        Parameter ``elementFilterMode``:
        The Element filter mode of the Export specification.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateSHPExportSpecification(self: MSPyMstnPlatform.ExportManager, elementFilterMode: MSPyMstnPlatform.ExportElementFilterMode) -> tuple:
        """
        Create a new export specification for a SHP file
        The export specification is a data structure that contains the information needed to export DGN elements to a SHP file.
        
        Parameter ``[out]``:
        The new Export specification.
        
        Parameter ``elementFilterMode``:
        The Element filter mode of the Export specification.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.ExportManager:
        ...
    
    Manager: ExportManager
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ExportSpecification:
    """
    None
    """

    def AddElementTemplateName(self: MSPyMstnPlatform.ExportSpecification, elementTemplateName: MSPyBentley.WString) -> None:
        """
        Add Element Template name to export.
        Call this method for each element template name to export.
        Element Templates are prefixed by group name(s) followed by a backslashes ('\\'). For example: myTemplates\\templateOne
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateName``:
        Element Template name.
        
        Returns:
        None.
        """
        ...
    
    def AddItemTypeName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingItemType: MSPyDgnPlatform.DgnFile, itemTypeLibraryName: MSPyBentley.WString, itemTypeName: MSPyBentley.WString) -> None:
        """
        Add Item Type name to export.
        Call this method for each item type name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``dgnContainingItemType``:
        DgnFile containing the item type.
        
        Parameter ``itemTypeLibraryName``:
        Item type library name.
        
        Parameter ``itemTypeName``:
        Item type name.
        
        Returns:
        None.
        """
        ...
    
    def AddLevelName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingLevel: MSPyDgnPlatform.DgnFile, levelName: MSPyBentley.WString) -> None:
        """
        Add Level name to export.
        Call this method for each level name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``dgnContainingLevel``:
        DgnFile containing the level.
        
        Parameter ``levelName``:
        Level name.
        
        Returns:
        None.
        """
        ...
    
    @property
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        ...
    @ElementFilterMode.setter
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification, arg1: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        ...
    
    @property
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @ExportTextString.setter
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @FacetCurves.setter
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def GetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        """
        Get the element filter mode of export operation.
        
        Returns :
        ExportElementFilterMode.
        """
        ...
    
    def GetElementTemplateNames(self: MSPyMstnPlatform.ExportSpecification, elementTemplateNames: MSPyBentley.WStringArray) -> None:
        """
        Get the list of element template names to export.
        This method returns the list of element template names associated with the export specification.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateNames``:
        List of element template names.
        
        Returns:
        None.
        """
        ...
    
    def GetExportTextString(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Gets the indicator that the element's text string should be exported to the output file.
        
        Returns:
        bool value. Default value is True.
        """
        ...
    
    def GetFacetCurves(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Get the folder moniker.
        This method returns the folder moniker associated with the export specification.
        
        Returns:
        DgnFolderMonikerPtr value.
        """
        ...
    
    def GetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetItemTypeNames(self: MSPyMstnPlatform.ExportSpecification, itemTypeNames: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None:
        """
        Get the list of item type specifications to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``itemTypeNames``:
        List of item type specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetLevelNames(self: MSPyMstnPlatform.ExportSpecification, levelNames: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None:
        """
        Get the list of level names to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``levelNames``:
        List of level specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification) -> float:
        """
        Gets the Maximum Chord Height(The maximum chord height for all of the line segments is less than the Chord Height) used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Returns:
        float value. Default value is 0.0.
        """
        ...
    
    def GetNamePrefix(self: MSPyMstnPlatform.ExportSpecification) -> MSPyBentley.WString:
        """
        Gets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def GetPreserveZ(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that 3D data is exported as 3D or 2D.
        
        Returns:
        bool value.
        """
        ...
    
    def GetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    @property
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @IncludeReferenceFiles.setter
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification) -> float:
        ...
    @MaxChordHeight.setter
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification, arg1: float) -> None:
        ...
    
    @property
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @PreserveZ.setter
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def SetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification, arg0: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        """
        Set the element filter mode of export operation.
        
        Parameter ``mode``:
        Mode of export operation.
        The mode specifies the elements to be exported.
        
        Returns :
        None.
        """
        ...
    
    def SetExportTextString(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Sets the indicator that the element's text string should be exported to the output file.
        
        Parameter ``exportTextString``:
        Indicator that the element's text string should be exported to the output file. Default value is True.
        
        Returns:
        None.
        """
        ...
    
    def SetFacetCurves(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Parameter ``facetCurves``:
        Indicator that curves should be faceted during export. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification, folderMoniker: MSPyDgnPlatform.DgnFolderMoniker) -> None:
        """
        Set the folder moniker.
        This method sets the folder moniker associated with the export specification.
        
        Parameter ``folderMoniker``:
        Folder moniker.
        
        Returns:
        None.
        """
        ...
    
    def SetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``includeReferenceFiles``:
        Indicator that the reference files should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification, arg0: float) -> None:
        """
        Sets the Maximum Chord Height, the maximum chord height for all of the line segments is less than the Chord Height, used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Parameter ``maxChordHeight``:
        Maximum Chord Height. Default value is 0.0.
        
        Returns:
        None.
        """
        ...
    
    def SetNamePrefix(self: MSPyMstnPlatform.ExportSpecification, namePrefix: MSPyBentley.WString) -> None:
        """
        Sets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def SetPreserveZ(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that 3D data is exported as 3D or 2D.
        
        Parameter ``preserveZ``:
        Indicator that the Z values should be preserved when exporting elements.
        
        Returns:
        None.
        """
        ...
    
    def SetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``useFenceOverlap``:
        Indicator that the active fence with non-clip overlap mode should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    @property
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @UseFenceOverlap.setter
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ExportSpecificationPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ExportSpecificationPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ExportSpecificationPtrArray, arg0: MSPyMstnPlatform.ExportSpecificationPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.ExportSpecificationPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.ExportSpecificationPtrArray, x: MSPyMstnPlatform.ExportSpecification) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ExportSpecificationPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.ExportSpecificationPtrArray, x: MSPyMstnPlatform.ExportSpecification) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.ExportSpecificationPtrArray, L: MSPyMstnPlatform.ExportSpecificationPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.ExportSpecificationPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.ExportSpecificationPtrArray, i: int, x: MSPyMstnPlatform.ExportSpecification) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.ExportSpecificationPtrArray) -> MSPyMstnPlatform.ExportSpecification
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.ExportSpecificationPtrArray, i: int) -> MSPyMstnPlatform.ExportSpecification
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.ExportSpecificationPtrArray, x: MSPyMstnPlatform.ExportSpecification) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class ExtrudeAlongProfileSetting:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ExtrudeAlongProfileSetting) -> None
        
        2. __init__(self: MSPyMstnPlatform.ExtrudeAlongProfileSetting, dgnModel: MSPyDgnPlatform.DgnModel) -> None
        """
        ...
    
class ExtrudeSettings:
    """
    None
    """

    def SetDistance(self: MSPyMstnPlatform.ExtrudeSettings, distance: float) -> None:
        ...
    
    def SetSpinAngle(self: MSPyMstnPlatform.ExtrudeSettings, spinAngle: float) -> None:
        ...
    
    def SetThickness(self: MSPyMstnPlatform.ExtrudeSettings, thickness: float) -> None:
        ...
    
    def SetXScale(self: MSPyMstnPlatform.ExtrudeSettings, scale: float) -> None:
        ...
    
    def SetYScale(self: MSPyMstnPlatform.ExtrudeSettings, scale: float) -> None:
        ...
    
    def Validate(self: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ExtrudeSettings) -> None
        
        2. __init__(self: MSPyMstnPlatform.ExtrudeSettings, hitPoint: MSPyBentleyGeom.DPoint3d, createSheet: bool, skewed: bool, distance: Optional[float], xScale: float, yScale: float, spinAngle: float, bothWays: bool, thicknessMode: int, thickness: float, ev: MSPyDgnView.DgnButtonEvent, curveVector: MSPyBentleyGeom.CurveVector) -> None
        
        3. __init__(self: MSPyMstnPlatform.ExtrudeSettings, hitPoint: MSPyBentleyGeom.DPoint3d, createSheet: bool, skewed: bool, distance: Optional[float], xScale: float, yScale: float, spinAngle: float, bothWays: bool, thicknessMode: int, thickness: float, origin: MSPyBentleyGeom.DPoint3d, vp: MSPyDgnPlatform.Viewport, curveVector: MSPyBentleyGeom.CurveVector) -> None
        """
        ...
    
    @property
    def basePoint(self: MSPyMstnPlatform.ExtrudeSettings) -> MSPyBentleyGeom.DPoint3d:
        ...
    @basePoint.setter
    def basePoint(self: MSPyMstnPlatform.ExtrudeSettings, arg0: MSPyBentleyGeom.DPoint3d) -> None:
        ...
    
    @property
    def basePresent(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @basePresent.setter
    def basePresent(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def bothWays(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @bothWays.setter
    def bothWays(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def createSheet(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @createSheet.setter
    def createSheet(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def distance(self: MSPyMstnPlatform.ExtrudeSettings) -> float:
        ...
    @distance.setter
    def distance(self: MSPyMstnPlatform.ExtrudeSettings, arg0: float) -> None:
        ...
    
    @property
    def doScale(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @doScale.setter
    def doScale(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def doSkew(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @doSkew.setter
    def doSkew(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def doSpin(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @doSpin.setter
    def doSpin(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def isNormalized(arg0: MSPyMstnPlatform.ExtrudeSettings) -> bool:
        ...
    @isNormalized.setter
    def isNormalized(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: bool) -> None:
        ...
    
    @property
    def normal(self: MSPyMstnPlatform.ExtrudeSettings) -> MSPyBentleyGeom.DVec3d:
        ...
    @normal.setter
    def normal(self: MSPyMstnPlatform.ExtrudeSettings, arg0: MSPyBentleyGeom.DVec3d) -> None:
        ...
    
    @property
    def spinAngle(self: MSPyMstnPlatform.ExtrudeSettings) -> float:
        ...
    @spinAngle.setter
    def spinAngle(self: MSPyMstnPlatform.ExtrudeSettings, arg0: float) -> None:
        ...
    
    @property
    def thickness(self: MSPyMstnPlatform.ExtrudeSettings) -> float:
        ...
    @thickness.setter
    def thickness(self: MSPyMstnPlatform.ExtrudeSettings, arg0: float) -> None:
        ...
    
    @property
    def thicknessMode(arg0: MSPyMstnPlatform.ExtrudeSettings) -> int:
        ...
    @thicknessMode.setter
    def thicknessMode(arg0: MSPyMstnPlatform.ExtrudeSettings, arg1: int) -> None:
        ...
    
    @property
    def xScale(self: MSPyMstnPlatform.ExtrudeSettings) -> float:
        ...
    @xScale.setter
    def xScale(self: MSPyMstnPlatform.ExtrudeSettings, arg0: float) -> None:
        ...
    
    @property
    def yScale(self: MSPyMstnPlatform.ExtrudeSettings) -> float:
        ...
    @yScale.setter
    def yScale(self: MSPyMstnPlatform.ExtrudeSettings, arg0: float) -> None:
        ...
    
class FaceAxisGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, faceId: MSPyBentleyGeom.FaceId) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class FaceGeometryId:
    """
    None
    """

    @staticmethod
    def Create(eh: MSPyDgnPlatform.ElementHandle, subEntity: MSPyDgnPlatform.ISubEntity) -> MSPyMstnPlatform.GeometryId:
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class FeatureCreate:
    """
    None
    """

    @staticmethod
    def CreateBlendFeature(*args, **kwargs):
        """
        Overloaded function.
        
        1. CreateBlendFeature(edges: MSPyBentleyGeom.EdgeIdArray, radius: float, isSmooth: bool) -> MSPyMstnPlatform.SmartFeatureNode
        
        Obsoleted! Please use the another API named as CreateBlendFeature()
        from this class itself.
        
        2. CreateBlendFeature(edges: MSPyDgnPlatform.ISubEntityPtrArray, radius: float, propogateSmooth: bool) -> tuple
        
        Obsoleted! Please use the another API named as CreateBlendFeature()
        from this class itself.
        """
        ...
    
    @staticmethod
    def CreateChamferFeature(edges: MSPyDgnPlatform.ISubEntityPtrArray, settings: MSPyMstnPlatform.ChamferEdgeSettings) -> tuple:
        """
        Obsoleted! Please use the another API named as CreateChamferFeature()
        from this class itself.
        """
        ...
    
    @staticmethod
    def CreateCutFeature(*args, **kwargs):
        """
        Overloaded function.
        
        1. CreateCutFeature(depthMode: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, directionMode: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, outsideProfile: bool, depth: float, defaultNormal: MSPyBentleyGeom.DVec3d) -> tuple
        
        Create Cut Smart Feature node
        
        :param cutNode:
        Newly created cut feature node
        
        :param depthMode:
        Various depth options
        
        :param directionMode:
        The cut direction
        
        :param outsideProfile:
        With respect to profile
        
        :param depth:
        Depth distance (not applicable for depthMode = ALL.
        
        :param defaultNormal:
        The normal
        
        :returns:
        SUCCESS if Cut creation is successful
        
        2. CreateCutFeature(depthMode: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, directionMode: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, outsideProfile: bool, depth: float, defaultNormal: MSPyBentleyGeom.DVec3d, cutDirection: MSPyBentleyGeom.DVec3d) -> tuple
        
        Create Cut Smart Feature node
        
        :param cutNode:
        Newly created cut feature node
        
        :param depthMode:
        Various depth options
        
        :param directionMode:
        The cut direction
        
        :param outsideProfile:
        With respect to profile
        
        :param depth:
        Depth distance (not applicable for depthMode = ALL.
        
        :param defaultNormal:
        The normal
        
        :returns:
        SUCCESS if Cut creation is successful
        """
        ...
    
    @staticmethod
    def CreateDifferenceFeature(subtractionPoint: MSPyBentleyGeom.DPoint3d = None) -> tuple:
        """
        Create Boolean-Difference Smart Feature node
        
        :param booleanNode:
        Difference feature node
        
        :param subtractionPoint:
        Subtraction point. The default argument with nullptr value
        
        :returns:
        SUCCESS if feature is created successfully
        """
        ...
    
    @staticmethod
    def CreateExtrudeAlongFeature(lockDirection: MSPyBentleyGeom.DVec3d, scalePoint: MSPyBentleyGeom.DPoint3d, settings: MSPyDgnPlatform.SmartFeature.ExtrudeAlongSettings, createSheet: bool) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Create Extrude Along Smart Feature node
        
        :param lockDirection:
        If profile orientation needs to be locked in particular direction.
        
        :param scalePoint:
        If extrusion needs scaling about some input point. Please refer
        the structure ExtrudeAlongSetting. User need to specify m_doscale
        and m_scale value in it.
        
        :param settings:
        Extrude along setting used to generatate extrusion
        
        :param createSheet:
        If true extrusion output will be sheet body in case of false it
        will be solid body.
        
        :returns:
        successfully created ExtrudeAlong parametric feature
        """
        ...
    
    @staticmethod
    def CreateExtrudeFeature(settings: MSPyMstnPlatform.ExtrudeSettings) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Create Extrude parametric Feature.
        
        :param settings:
        Input data for Extrude creation
        
        :returns:
        Extrude feature node
        """
        ...
    
    @staticmethod
    def CreateIntersectionFeature() -> tuple:
        """
        Create Boolean-Intersection Smart Feature node
        
        :param booleanNode:
        Intersection feature node
        
        :returns:
        SUCCESS if feature is created successfully
        """
        ...
    
    @staticmethod
    def CreateRevolveFeature(settings: MSPyMstnPlatform.RevolveSettings) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Create Revolve parametric Feature.
        
        :param settings:
        Input data for Revolve creation
        
        :returns:
        Revolve feature node
        """
        ...
    
    @staticmethod
    def CreateSizeFilter(settings: MSPyDgnPlatform.SmartFeature.SizeFilterSettings) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Create Size Filter Smart Feature Node.
        
        :param settings:
        Input data for Size Filter creation.
        
        :returns:
        Size Filter feature node
        """
        ...
    
    @staticmethod
    def CreateSolidNode(eh: MSPyDgnPlatform.ElementHandle) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Create Parametric Solid Node
        
        :param Input:
        element expected to be of type smart solid. Application need to
        ensure that element handle should of type smart solid
        
        :returns:
        Solid feature node
        """
        ...
    
    @staticmethod
    def CreateTrimFeature(face: MSPyDgnPlatform.ISubEntity) -> tuple:
        """
        Create Trim Smart Feature node
        
        :param trimNode:
        Trim feature node
        
        :param face:
        Face to trim from
        
        :returns:
        SUCCESS if feature is created successfully
        """
        ...
    
    @staticmethod
    def CreateUnionFeature() -> tuple:
        """
        Create Boolean-Union Smart Feature node
        
        :param booleanNode:
        Union feature node
        
        :returns:
        SUCCESS if feature is created successfully
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class FenceChangedType:
    """
    Members:
    
    eSYSTEM_FENCE_CLEARED
    
    eSYSTEM_FENCE_CREATED
    """

    def __init__(self: MSPyMstnPlatform.FenceChangedType, value: int) -> None:
        ...
    
    eSYSTEM_FENCE_CLEARED: FenceChangedType
    
    eSYSTEM_FENCE_CREATED: FenceChangedType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.FenceChangedType) -> int:
        ...
    
class FileListAttr:
    """
    Members:
    
    eOPEN
    
    eCREATE
    
    eCREATEFROMSEED
    
    eOPENCREATE
    
    eDEFAULT
    """

    def __init__(self: MSPyMstnPlatform.FileListAttr, value: int) -> None:
        ...
    
    eCREATE: FileListAttr
    
    eCREATEFROMSEED: FileListAttr
    
    eDEFAULT: FileListAttr
    
    eOPEN: FileListAttr
    
    eOPENCREATE: FileListAttr
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.FileListAttr) -> int:
        ...
    
class FileOpenExtAttr:
    """
    Members:
    
    eNONE
    
    eCENTERONSCREEN
    
    eDONTDEFAULTTODEFFILE
    """

    def __init__(self: MSPyMstnPlatform.FileOpenExtAttr, value: int) -> None:
        ...
    
    eCENTERONSCREEN: FileOpenExtAttr
    
    eDONTDEFAULTTODEFFILE: FileOpenExtAttr
    
    eNONE: FileOpenExtAttr
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.FileOpenExtAttr) -> int:
        ...
    
class FileOutdatedCheck_Reason:
    """
    Members:
    
    eFILEOUTDATED_REF_QUERY
    
    eFILEOUTDATED_REF_RELOAD
    
    eFILEOUTDATED_REF_FORCERELOAD
    """

    def __init__(self: MSPyMstnPlatform.FileOutdatedCheck_Reason, value: int) -> None:
        ...
    
    eFILEOUTDATED_REF_FORCERELOAD: FileOutdatedCheck_Reason
    
    eFILEOUTDATED_REF_QUERY: FileOutdatedCheck_Reason
    
    eFILEOUTDATED_REF_RELOAD: FileOutdatedCheck_Reason
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.FileOutdatedCheck_Reason) -> int:
        ...
    
class FilterChangeType:
    """
    Members:
    
    eFILTER_TABLE_CHANGE
    
    eFILTER_CHANGE_ACTIVE
    
    eFILTER_CREATE
    
    eFILTER_DELETE
    
    eFILTER_CHANGE_NAME
    
    eFILTER_CHANGE_DESCRIPTION
    
    eFILTER_CHANGE_TYPE
    
    eFILTER_CHANGE_PERSISTENT
    
    eFILTER_CHANGE_FLAG
    
    eFILTER_CHANGE_PARENT
    
    eFILTER_CHANGE_EXPRESSION
    
    eFILTER_TABLE_IMPORT
    
    eFILTER_TABLE_UNDO
    
    eFILTER_TABLE_REDO
    """

    def __init__(self: MSPyMstnPlatform.FilterChangeType, value: int) -> None:
        ...
    
    eFILTER_CHANGE_ACTIVE: FilterChangeType
    
    eFILTER_CHANGE_DESCRIPTION: FilterChangeType
    
    eFILTER_CHANGE_EXPRESSION: FilterChangeType
    
    eFILTER_CHANGE_FLAG: FilterChangeType
    
    eFILTER_CHANGE_NAME: FilterChangeType
    
    eFILTER_CHANGE_PARENT: FilterChangeType
    
    eFILTER_CHANGE_PERSISTENT: FilterChangeType
    
    eFILTER_CHANGE_TYPE: FilterChangeType
    
    eFILTER_CREATE: FilterChangeType
    
    eFILTER_DELETE: FilterChangeType
    
    eFILTER_TABLE_CHANGE: FilterChangeType
    
    eFILTER_TABLE_IMPORT: FilterChangeType
    
    eFILTER_TABLE_REDO: FilterChangeType
    
    eFILTER_TABLE_UNDO: FilterChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.FilterChangeType) -> int:
        ...
    
class GDBExportSpecification:
    """
    None
    """

    def AddElementTemplateName(self: MSPyMstnPlatform.ExportSpecification, elementTemplateName: MSPyBentley.WString) -> None:
        """
        Add Element Template name to export.
        Call this method for each element template name to export.
        Element Templates are prefixed by group name(s) followed by a backslashes ('\\'). For example: myTemplates\\templateOne
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateName``:
        Element Template name.
        
        Returns:
        None.
        """
        ...
    
    def AddItemTypeName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingItemType: MSPyDgnPlatform.DgnFile, itemTypeLibraryName: MSPyBentley.WString, itemTypeName: MSPyBentley.WString) -> None:
        """
        Add Item Type name to export.
        Call this method for each item type name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``dgnContainingItemType``:
        DgnFile containing the item type.
        
        Parameter ``itemTypeLibraryName``:
        Item type library name.
        
        Parameter ``itemTypeName``:
        Item type name.
        
        Returns:
        None.
        """
        ...
    
    def AddLevelName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingLevel: MSPyDgnPlatform.DgnFile, levelName: MSPyBentley.WString) -> None:
        """
        Add Level name to export.
        Call this method for each level name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``dgnContainingLevel``:
        DgnFile containing the level.
        
        Parameter ``levelName``:
        Level name.
        
        Returns:
        None.
        """
        ...
    
    @property
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        ...
    @ElementFilterMode.setter
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification, arg1: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        ...
    
    def Export(self: MSPyMstnPlatform.GDBExportSpecification) -> tuple:
        """
        Export elements as specified by the export specification.
        
        Parameter ``[out]``:
        The returned Number of elements exported.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @property
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @ExportTextString.setter
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @FacetCurves.setter
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def GetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        """
        Get the element filter mode of export operation.
        
        Returns :
        ExportElementFilterMode.
        """
        ...
    
    def GetElementTemplateNames(self: MSPyMstnPlatform.ExportSpecification, elementTemplateNames: MSPyBentley.WStringArray) -> None:
        """
        Get the list of element template names to export.
        This method returns the list of element template names associated with the export specification.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateNames``:
        List of element template names.
        
        Returns:
        None.
        """
        ...
    
    def GetExportSpecifications(self: MSPyMstnPlatform.GDBExportSpecification, exportFeatureSpecs: MSPyMstnPlatform.ExportSpecificationPtrArray) -> None:
        """
        Get the list of export feature specifications.
        
        Parameter ``exportFeatureSpecs``:
        The List of export feature specifications associated with the export specification.
        
        Returns:
        None.
        """
        ...
    
    def GetExportTextString(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Gets the indicator that the element's text string should be exported to the output file.
        
        Returns:
        bool value. Default value is True.
        """
        ...
    
    def GetFacetCurves(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Get the folder moniker.
        This method returns the folder moniker associated with the export specification.
        
        Returns:
        DgnFolderMonikerPtr value.
        """
        ...
    
    def GetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetItemTypeNames(self: MSPyMstnPlatform.ExportSpecification, itemTypeNames: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None:
        """
        Get the list of item type specifications to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``itemTypeNames``:
        List of item type specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetLevelNames(self: MSPyMstnPlatform.ExportSpecification, levelNames: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None:
        """
        Get the list of level names to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``levelNames``:
        List of level specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification) -> float:
        """
        Gets the Maximum Chord Height(The maximum chord height for all of the line segments is less than the Chord Height) used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Returns:
        float value. Default value is 0.0.
        """
        ...
    
    def GetNamePrefix(self: MSPyMstnPlatform.ExportSpecification) -> MSPyBentley.WString:
        """
        Gets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def GetPreserveZ(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that 3D data is exported as 3D or 2D.
        
        Returns:
        bool value.
        """
        ...
    
    def GetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    @property
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @IncludeReferenceFiles.setter
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification) -> float:
        ...
    @MaxChordHeight.setter
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification, arg1: float) -> None:
        ...
    
    @property
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @PreserveZ.setter
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def SetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification, arg0: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        """
        Set the element filter mode of export operation.
        
        Parameter ``mode``:
        Mode of export operation.
        The mode specifies the elements to be exported.
        
        Returns :
        None.
        """
        ...
    
    def SetExportTextString(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Sets the indicator that the element's text string should be exported to the output file.
        
        Parameter ``exportTextString``:
        Indicator that the element's text string should be exported to the output file. Default value is True.
        
        Returns:
        None.
        """
        ...
    
    def SetFacetCurves(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Parameter ``facetCurves``:
        Indicator that curves should be faceted during export. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification, folderMoniker: MSPyDgnPlatform.DgnFolderMoniker) -> None:
        """
        Set the folder moniker.
        This method sets the folder moniker associated with the export specification.
        
        Parameter ``folderMoniker``:
        Folder moniker.
        
        Returns:
        None.
        """
        ...
    
    def SetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``includeReferenceFiles``:
        Indicator that the reference files should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification, arg0: float) -> None:
        """
        Sets the Maximum Chord Height, the maximum chord height for all of the line segments is less than the Chord Height, used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Parameter ``maxChordHeight``:
        Maximum Chord Height. Default value is 0.0.
        
        Returns:
        None.
        """
        ...
    
    def SetNamePrefix(self: MSPyMstnPlatform.ExportSpecification, namePrefix: MSPyBentley.WString) -> None:
        """
        Sets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def SetPreserveZ(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that 3D data is exported as 3D or 2D.
        
        Parameter ``preserveZ``:
        Indicator that the Z values should be preserved when exporting elements.
        
        Returns:
        None.
        """
        ...
    
    def SetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``useFenceOverlap``:
        Indicator that the active fence with non-clip overlap mode should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    @property
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @UseFenceOverlap.setter
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class GDBImportSpecification:
    """
    None
    """

    def CreateDefaultElementTemplates(self: MSPyMstnPlatform.GDBImportSpecification) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Create the default element templates with associated item types for features as specified by the import specification.
        This method is not normally called by the user, since it is called internally by the Import method to create(if not existing) the default element templates with associated item types for the features as specified by the import specification.
        This method is useful if the element template must exist to be modified before the import is performed. For example, change the element template active point type from zero length line to cell before importing.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def GetGDBFolderDocument(self: MSPyMstnPlatform.GDBImportSpecification) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Get the GDB folder moniker.
        
        Returns:
        This method returns the GDB folder moniker associated with the import specification.
        """
        ...
    
    def GetImportFeatureSpecifications(self: MSPyMstnPlatform.GDBImportSpecification, importFeatureSpecs: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> None:
        """
        Get the list of import feature specifications.
        
        Parameter ``importFeatureSpecs``:
        The List of import feature specifications associated with the import specification.
        
        Returns:
        None.
        """
        ...
    
    def Import(self: MSPyMstnPlatform.GDBImportSpecification) -> tuple:
        """
        Import features as specified by the import specification.
        
        Parameter ``[out]``:
        The returned Number of features imported.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class GeometryId:
    """
    None
    """

    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
class GeometryIdPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.GeometryIdPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.GeometryIdPtrArray, arg0: MSPyMstnPlatform.GeometryIdPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.GeometryIdPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.GeometryIdPtrArray, x: MSPyMstnPlatform.GeometryId) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.GeometryIdPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.GeometryIdPtrArray, x: MSPyMstnPlatform.GeometryId) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.GeometryIdPtrArray, L: MSPyMstnPlatform.GeometryIdPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.GeometryIdPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.GeometryIdPtrArray, i: int, x: MSPyMstnPlatform.GeometryId) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.GeometryIdPtrArray) -> MSPyMstnPlatform.GeometryId
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.GeometryIdPtrArray, i: int) -> MSPyMstnPlatform.GeometryId
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.GeometryIdPtrArray, x: MSPyMstnPlatform.GeometryId) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class GeospatialContextStatus:
    """
    Members:
    
    eGeospatialContextStatus_Success
    
    eGeospatialContextStatus_MstnInDwgWorkMode
    
    eGeospatialContextStatus_NoCoordSysAttach
    
    eGeospatialContextStatus_NoQueryableFeatures
    
    eGeospatialContextStatus_UserAbort
    
    eGeospatialContextStatus_NoEraseableFeatures
    
    eGeospatialContextStatus_NoChange
    
    eGeospatialContextStatus_NoExistingConnection
    
    eGeospatialContextStatus_ConnectionNotActivated
    
    eGeospatialContextStatus_ConnectionNotFound
    
    eGeospatialContextStatus_NoActiveModel
    
    eGeospatialContextStatus_Malloc
    
    eGeospatialContextStatus_ConnectionAlreadyActivated
    
    eGeospatialContextStatus_BadServerType
    
    eGeospatialContextStatus_NoActiveConnections
    
    eGeospatialContextStatus_BadViewIndex
    
    eGeospatialContextStatus_BadNamedBoundaryName
    
    eGeospatialContextStatus_QueryFailed
    
    eGeospatialContextStatus_ClearFailed
    
    eGeospatialContextStatus_NoClearableFeatures
    
    eGeospatialContextStatus_EditConnectionFailed
    
    eGeospatialContextStatus_DeleteConnectionFailed
    
    eGeospatialContextStatus_BadConnection
    
    eGeospatialContextStatus_CreateConnectionFailed
    
    eGeospatialContextStatus_ActivateConnectionFailed
    
    eGeospatialContextStatus_NoActiveSelectionSet
    
    eGeospatialContextStatus_NoActiveFence
    
    eGeospatialContextStatus_NoLastError
    
    eGeospatialContextStatus_NotAFeature
    
    eGeospatialContextStatus_ImportFailed
    
    eGeospatialContextStatus_BadImportType
    
    eGeospatialContextStatus_NoImportableFeatures
    
    eGeospatialContextStatus_CreateImportSpecificationFailed
    
    eGeospatialContextStatus_CreateExportSpecificationFailed
    
    eGeospatialContextStatus_ExportFailed
    
    eGeospatialContextStatus_InvalidFolder
    
    eGeospatialContextStatus_CreateDefaultElementTemplatesFailed
    """

    def __init__(self: MSPyMstnPlatform.GeospatialContextStatus, value: int) -> None:
        ...
    
    eGeospatialContextStatus_ActivateConnectionFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_BadConnection: GeospatialContextStatus
    
    eGeospatialContextStatus_BadImportType: GeospatialContextStatus
    
    eGeospatialContextStatus_BadNamedBoundaryName: GeospatialContextStatus
    
    eGeospatialContextStatus_BadServerType: GeospatialContextStatus
    
    eGeospatialContextStatus_BadViewIndex: GeospatialContextStatus
    
    eGeospatialContextStatus_ClearFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_ConnectionAlreadyActivated: GeospatialContextStatus
    
    eGeospatialContextStatus_ConnectionNotActivated: GeospatialContextStatus
    
    eGeospatialContextStatus_ConnectionNotFound: GeospatialContextStatus
    
    eGeospatialContextStatus_CreateConnectionFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_CreateDefaultElementTemplatesFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_CreateExportSpecificationFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_CreateImportSpecificationFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_DeleteConnectionFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_EditConnectionFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_ExportFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_ImportFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_InvalidFolder: GeospatialContextStatus
    
    eGeospatialContextStatus_Malloc: GeospatialContextStatus
    
    eGeospatialContextStatus_MstnInDwgWorkMode: GeospatialContextStatus
    
    eGeospatialContextStatus_NoActiveConnections: GeospatialContextStatus
    
    eGeospatialContextStatus_NoActiveFence: GeospatialContextStatus
    
    eGeospatialContextStatus_NoActiveModel: GeospatialContextStatus
    
    eGeospatialContextStatus_NoActiveSelectionSet: GeospatialContextStatus
    
    eGeospatialContextStatus_NoChange: GeospatialContextStatus
    
    eGeospatialContextStatus_NoClearableFeatures: GeospatialContextStatus
    
    eGeospatialContextStatus_NoCoordSysAttach: GeospatialContextStatus
    
    eGeospatialContextStatus_NoEraseableFeatures: GeospatialContextStatus
    
    eGeospatialContextStatus_NoExistingConnection: GeospatialContextStatus
    
    eGeospatialContextStatus_NoImportableFeatures: GeospatialContextStatus
    
    eGeospatialContextStatus_NoLastError: GeospatialContextStatus
    
    eGeospatialContextStatus_NoQueryableFeatures: GeospatialContextStatus
    
    eGeospatialContextStatus_NotAFeature: GeospatialContextStatus
    
    eGeospatialContextStatus_QueryFailed: GeospatialContextStatus
    
    eGeospatialContextStatus_Success: GeospatialContextStatus
    
    eGeospatialContextStatus_UserAbort: GeospatialContextStatus
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.GeospatialContextStatus) -> int:
        ...
    
class GlobalPositionData:
    """
    None
    """

    @property
    def HDOP(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @HDOP.setter
    def HDOP(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def PDOP(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @PDOP.setter
    def PDOP(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def UTCTicks(self: MSPyMstnPlatform.GlobalPositionData) -> int:
        ...
    @UTCTicks.setter
    def UTCTicks(self: MSPyMstnPlatform.GlobalPositionData, arg0: int) -> None:
        ...
    
    @property
    def VDOP(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @VDOP.setter
    def VDOP(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    def __init__(self: MSPyMstnPlatform.GlobalPositionData) -> None:
        ...
    
    @property
    def elevation(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @elevation.setter
    def elevation(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def fixDimension(self: MSPyMstnPlatform.GlobalPositionData) -> int:
        ...
    @fixDimension.setter
    def fixDimension(self: MSPyMstnPlatform.GlobalPositionData, arg0: int) -> None:
        ...
    
    @property
    def heading(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @heading.setter
    def heading(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def latitude(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @latitude.setter
    def latitude(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def longitude(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @longitude.setter
    def longitude(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
    @property
    def velocity(self: MSPyMstnPlatform.GlobalPositionData) -> float:
        ...
    @velocity.setter
    def velocity(self: MSPyMstnPlatform.GlobalPositionData, arg0: float) -> None:
        ...
    
class GraphicsFileType:
    """
    Members:
    
    eGRAPHICSFILE_WildCard
    
    eGRAPHICSFILE_UStn
    
    eGRAPHICSFILE_Sheet
    
    eGRAPHICSFILE_HLine
    
    eGRAPHICSFILE_DWG
    
    eGRAPHICSFILE_DXF
    
    eGRAPHICSFILE_DXB
    
    eGRAPHICSFILE_IGES
    
    eGRAPHICSFILE_CGM
    
    eGRAPHICSFILE_RDL
    
    eGRAPHICSFILE_TriForma
    
    eGRAPHICSFILE_UStnV7
    
    eGRAPHICSFILE_CAD
    
    eGRAPHICSFILE_CEL
    
    eGRAPHICSFILE_3DStudio
    
    eGRAPHICSFILE_DgnLib
    
    eGRAPHICSFILE_OBJ
    
    eGRAPHICSFILE_SKP
    """

    def __init__(self: MSPyMstnPlatform.GraphicsFileType, value: int) -> None:
        ...
    
    eGRAPHICSFILE_3DStudio: GraphicsFileType
    
    eGRAPHICSFILE_CAD: GraphicsFileType
    
    eGRAPHICSFILE_CEL: GraphicsFileType
    
    eGRAPHICSFILE_CGM: GraphicsFileType
    
    eGRAPHICSFILE_DWG: GraphicsFileType
    
    eGRAPHICSFILE_DXB: GraphicsFileType
    
    eGRAPHICSFILE_DXF: GraphicsFileType
    
    eGRAPHICSFILE_DgnLib: GraphicsFileType
    
    eGRAPHICSFILE_HLine: GraphicsFileType
    
    eGRAPHICSFILE_IGES: GraphicsFileType
    
    eGRAPHICSFILE_OBJ: GraphicsFileType
    
    eGRAPHICSFILE_RDL: GraphicsFileType
    
    eGRAPHICSFILE_SKP: GraphicsFileType
    
    eGRAPHICSFILE_Sheet: GraphicsFileType
    
    eGRAPHICSFILE_TriForma: GraphicsFileType
    
    eGRAPHICSFILE_UStn: GraphicsFileType
    
    eGRAPHICSFILE_UStnV7: GraphicsFileType
    
    eGRAPHICSFILE_WildCard: GraphicsFileType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.GraphicsFileType) -> int:
        ...
    
class GuiDrawMode:
    """
    Members:
    
    eXORDRAW
    
    eTEMPERASE
    
    eSET_ALLOWBGCOLOR
    
    eHILITE_XORDRAW
    
    eXORINCLUDEBACKSTORE
    
    eHILITE_XORINCLUDEBACKSTORE
    """

    def __init__(self: MSPyMstnPlatform.GuiDrawMode, value: int) -> None:
        ...
    
    eHILITE_XORDRAW: GuiDrawMode
    
    eHILITE_XORINCLUDEBACKSTORE: GuiDrawMode
    
    eSET_ALLOWBGCOLOR: GuiDrawMode
    
    eTEMPERASE: GuiDrawMode
    
    eXORDRAW: GuiDrawMode
    
    eXORINCLUDEBACKSTORE: GuiDrawMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.GuiDrawMode) -> int:
        ...
    
class GuiWAttributes:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.GuiWAttributes) -> None:
        ...
    
    @property
    def alwaysBorderedItems(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @alwaysBorderedItems.setter
    def alwaysBorderedItems(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def alwaysSaveUnder(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @alwaysSaveUnder.setter
    def alwaysSaveUnder(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def autoUpdateTextItems(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @autoUpdateTextItems.setter
    def autoUpdateTextItems(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def closeOnNew(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @closeOnNew.setter
    def closeOnNew(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def closeable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @closeable.setter
    def closeable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def descartesRequired(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @descartesRequired.setter
    def descartesRequired(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def dockable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @dockable.setter
    def dockable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def docked(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @docked.setter
    def docked(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def dockedByDefault(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @dockedByDefault.setter
    def dockedByDefault(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def doubleBuffer(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @doubleBuffer.setter
    def doubleBuffer(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def focusableNoCheck(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @focusableNoCheck.setter
    def focusableNoCheck(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def forwardMnemonics(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @forwardMnemonics.setter
    def forwardMnemonics(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def isChild(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @isChild.setter
    def isChild(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def isFocusable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @isFocusable.setter
    def isFocusable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def isViewport(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @isViewport.setter
    def isViewport(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def maximizable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @maximizable.setter
    def maximizable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def minimizable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @minimizable.setter
    def minimizable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def modal(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @modal.setter
    def modal(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def motionToItems(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @motionToItems.setter
    def motionToItems(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def moveable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @moveable.setter
    def moveable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def mustStayVisible(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @mustStayVisible.setter
    def mustStayVisible(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def netDockable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @netDockable.setter
    def netDockable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noAutoSelectIcons(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noAutoSelectIcons.setter
    def noAutoSelectIcons(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noBorders(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noBorders.setter
    def noBorders(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noChangeScreen(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noChangeScreen.setter
    def noChangeScreen(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noFullDrag(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noFullDrag.setter
    def noFullDrag(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noIconCmdSynch(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noIconCmdSynch.setter
    def noIconCmdSynch(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noItemAdjustments(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noItemAdjustments.setter
    def noItemAdjustments(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noRightIcons(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noRightIcons.setter
    def noRightIcons(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noTitleBar(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noTitleBar.setter
    def noTitleBar(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noTransparency(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noTransparency.setter
    def noTransparency(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def noWindowControlIcon(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @noWindowControlIcon.setter
    def noWindowControlIcon(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def nonVideo(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @nonVideo.setter
    def nonVideo(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def outputOnly(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @outputOnly.setter
    def outputOnly(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def popup(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @popup.setter
    def popup(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def refusesAutoSwitch(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @refusesAutoSwitch.setter
    def refusesAutoSwitch(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def requestAlternateRaster(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @requestAlternateRaster.setter
    def requestAlternateRaster(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def requestBackingStore(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @requestBackingStore.setter
    def requestBackingStore(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def resizesInward(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @resizesInward.setter
    def resizesInward(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def sinkable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @sinkable.setter
    def sinkable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def sizeGrip(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @sizeGrip.setter
    def sizeGrip(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def sizeable(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @sizeable.setter
    def sizeable(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def thinBorders(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @thinBorders.setter
    def thinBorders(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def titleBarDocked(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @titleBarDocked.setter
    def titleBarDocked(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def trackingHelp(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @trackingHelp.setter
    def trackingHelp(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def transparentBorderless(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @transparentBorderless.setter
    def transparentBorderless(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def unused(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @unused.setter
    def unused(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def useAlphaBlend(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @useAlphaBlend.setter
    def useAlphaBlend(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
    @property
    def userAllocated(arg0: MSPyMstnPlatform.GuiWAttributes) -> int:
        ...
    @userAllocated.setter
    def userAllocated(arg0: MSPyMstnPlatform.GuiWAttributes, arg1: int) -> None:
        ...
    
class HideReasonCode:
    """
    Members:
    
    eHideWindow
    
    eExiting
    
    eWindowClose
    
    eNoDgnFile
    
    eUserClose
    
    eMdlUnload
    """

    def __init__(self: MSPyMstnPlatform.HideReasonCode, value: int) -> None:
        ...
    
    eExiting: HideReasonCode
    
    eHideWindow: HideReasonCode
    
    eMdlUnload: HideReasonCode
    
    eNoDgnFile: HideReasonCode
    
    eUserClose: HideReasonCode
    
    eWindowClose: HideReasonCode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.HideReasonCode) -> int:
        ...
    
class HistoryCallback:
    """
    None
    """

    @staticmethod
    def AddCombinePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, int], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCombinePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCommitPostFunction(newFunc: Callable[[MSPyMstnPlatform.HistoryRevisionInfo, MSPyDgnPlatform.DgnFile, MSPyDgnPlatform.RevisionInfo, int], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCommitPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, MSPyMstnPlatform.HistoryCommitParms], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCompareElementsFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, str, str, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCreatePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddCreatePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDeleteEarlyRevisionsPostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, int], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDeleteEarlyRevisionsPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDeletePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, int], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDeletePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDescribeElementFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyBentley.WString, MSPyBentley.WString, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, int, int], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddDisplayElementFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, str, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddFmtRevisionNumberFunction(newFunc: Callable[[MSPyBentley.WString, str, int, MSPyDgnPlatform.DgnFile], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddRestorePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddRestorePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddUpdateRevisionUserDescPostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, str, int], None], funcID: str) -> None:
        ...
    
    @staticmethod
    def AddUpdateRevisionUserDescPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, str], int], funcID: str) -> None:
        ...
    
    @staticmethod
    def RemoveCombinePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, int], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCombinePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCommitPostFunction(newFunc: Callable[[MSPyMstnPlatform.HistoryRevisionInfo, MSPyDgnPlatform.DgnFile, MSPyDgnPlatform.RevisionInfo, int], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCommitPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, MSPyMstnPlatform.HistoryCommitParms], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCompareElementsFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, MSPyDgnPlatform.MSElementDescr, str, str, str], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCreatePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveCreatePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDeleteEarlyRevisionsPostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, int], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDeleteEarlyRevisionsPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDeletePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, int], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDeletePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDescribeElementFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyBentley.WString, MSPyBentley.WString, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, int, int], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveDisplayElementFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyInt, MSPyDgnPlatform.DgnFile, int, MSPyDgnPlatform.MSElementDescr, str, str], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveFmtRevisionNumberFunction(newFunc: Callable[[MSPyBentley.WString, str, int, MSPyDgnPlatform.DgnFile], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveRestorePostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveRestorePreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str], int], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveUpdateRevisionUserDescPostFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, str, int], None], funcID: str) -> bool:
        ...
    
    @staticmethod
    def RemoveUpdateRevisionUserDescPreFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, str, str, str], int], funcID: str) -> bool:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class HistoryCommitParms:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def desc(arg0: MSPyMstnPlatform.HistoryCommitParms) -> str:
        ...
    
    @property
    def revisionNumber(arg0: MSPyMstnPlatform.HistoryCommitParms) -> str:
        ...
    
    @property
    def time(arg0: MSPyMstnPlatform.HistoryCommitParms) -> float:
        ...
    
    @property
    def user(arg0: MSPyMstnPlatform.HistoryCommitParms) -> str:
        ...
    
class HistoryRevisionInfo:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def desc(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> str:
        ...
    
    @property
    def future1(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def future2(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def future3(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def future4(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def future5(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def future6(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def futureUse_Model(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> MSPyDgnPlatform.DgnModelRef:
        ...
    
    @property
    def isEmpty(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> int:
        ...
    
    @property
    def next(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> str:
        ...
    
    @property
    def num(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> str:
        ...
    
    @property
    def time(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> float:
        ...
    
    @property
    def user(arg0: MSPyMstnPlatform.HistoryRevisionInfo) -> str:
        ...
    
class IBeginPrintPageParam:
    """
    None
    """

    def GetIsPartOfPrintSet(self: MSPyMstnPlatform.IBeginPrintPageParam) -> bool:
        ...
    
    def GetIsPreview(self: MSPyMstnPlatform.IBeginPrintPageParam) -> bool:
        ...
    
    def GetPrintEngine(self: MSPyMstnPlatform.IBeginPrintPageParam) -> MSPyMstnPlatform.Print.IPrintEngine:
        ...
    
    def GetPrintEnginePlotter(self: MSPyMstnPlatform.IBeginPrintPageParam) -> MSPyMstnPlatform.Print.IPlotter:
        ...
    
    def __init__(self: MSPyMstnPlatform.IBeginPrintPageParam) -> None:
        ...
    
class IBeginPrintSetParam:
    """
    None
    """

    def ColorTable(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> bytes:
        ...
    
    def GetEnableDynamicPlot(self: MSPyMstnPlatform.IBeginPrintSetParam) -> bool:
        """
        @deprecated Obsolete; always False.
        """
        ...
    
    def GetIsPreview(self: MSPyMstnPlatform.IBeginPrintSetParam) -> bool:
        """
        True if print preview.
        """
        ...
    
    def GetOutputFileSpec(self: MSPyMstnPlatform.IBeginPrintSetParam) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the print set output file specification. May be NULL if printing
        to device.
        """
        ...
    
    def GetPlotter(self: MSPyMstnPlatform.IBeginPrintSetParam) -> MSPyMstnPlatform.IPlotter:
        """
        Gets the plotter interface.
        """
        ...
    
    def GetPrintSetName(self: MSPyMstnPlatform.IBeginPrintSetParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print set name.
        """
        ...
    
    def GetPrinterDriverOptions(*args, **kwargs):
        """
        GetPrinterDriverOptions(self: MSPyMstnPlatform.IBeginPrintSetParam) -> bmap<WString,MSPyMstnPlatform.Print.PlotPropValue,std::less<WString>,32,BentleyAllocator<Bstdcxx::bpair<WString const ,MSPyMstnPlatform.Print.PlotPropValue> > >
        
        Gets the printer driver override options. @since Version 10.02.00.00.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IBeginPrintSetParam) -> None:
        ...
    
class IDriverBeginPlotParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IDriverBeginPlotParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IDriverBeginPlotParam) -> None:
        ...
    
class IDriverEndPlotParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IDriverEndPlotParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def IsSuccess(self: MSPyMstnPlatform.IDriverEndPlotParam) -> bool:
        """
        True if print successful.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IDriverEndPlotParam) -> None:
        ...
    
class IDriverPreBeginPlotParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IDriverPreBeginPlotParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IDriverPreBeginPlotParam) -> None:
        ...
    
class IEndPrintPageParam:
    """
    None
    """

    def GetIsPartOfPrintSet(self: MSPyMstnPlatform.IEndPrintPageParam) -> bool:
        ...
    
    def GetIsPreview(self: MSPyMstnPlatform.IEndPrintPageParam) -> bool:
        ...
    
    def GetIsSuccess(self: MSPyMstnPlatform.IEndPrintPageParam) -> bool:
        ...
    
    def GetPrintEngine(self: MSPyMstnPlatform.IEndPrintPageParam) -> MSPyMstnPlatform.Print.IPrintEngine:
        ...
    
    def GetPrintEnginePlotter(self: MSPyMstnPlatform.IEndPrintPageParam) -> MSPyMstnPlatform.Print.IPlotter:
        ...
    
    def __init__(self: MSPyMstnPlatform.IEndPrintPageParam) -> None:
        ...
    
class IEndPrintSetParam:
    """
    None
    """

    def GetEnableDynamicPlot(self: MSPyMstnPlatform.IEndPrintSetParam) -> bool:
        """
        @deprecated Obsolete; always False.
        """
        ...
    
    def GetIsPreview(self: MSPyMstnPlatform.IEndPrintSetParam) -> bool:
        """
        True if print preview.
        """
        ...
    
    def GetIsSuccess(self: MSPyMstnPlatform.IEndPrintSetParam) -> bool:
        """
        True if print set processing was successful.
        """
        ...
    
    def GetOutputFileSpec(self: MSPyMstnPlatform.IEndPrintSetParam) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the print set output file specification. May be NULL if printing
        to device.
        """
        ...
    
    def GetPlotter(self: MSPyMstnPlatform.IEndPrintSetParam) -> MSPyMstnPlatform.IPlotter:
        """
        Gets the plotter interface.
        """
        ...
    
    def GetPrintSetName(self: MSPyMstnPlatform.IEndPrintSetParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print set name.
        """
        ...
    
    def GetPrinterDriverOptions(*args, **kwargs):
        """
        GetPrinterDriverOptions(self: MSPyMstnPlatform.IEndPrintSetParam) -> bmap<WString,MSPyMstnPlatform.Print.PlotPropValue,std::less<WString>,32,BentleyAllocator<Bstdcxx::bpair<WString const ,MSPyMstnPlatform.Print.PlotPropValue> > >
        
        Gets the printer driver override options. @since Version 10.02.00.00.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IEndPrintSetParam) -> None:
        ...
    
class IEventHandlerPrioritized:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.IEventHandlerPrioritized) -> None:
        ...
    
class IGlobalPositionSource:
    """
    None
    """

    def GPSAvailable(self: MSPyMstnPlatform.IGlobalPositionSource) -> bool:
        ...
    
    @staticmethod
    def GetGlobalPositionSource() -> MSPyMstnPlatform.IGlobalPositionSource:
        ...
    
    def GetLatestPositionData(self: MSPyMstnPlatform.IGlobalPositionSource, data: MSPyMstnPlatform.GlobalPositionData) -> int:
        ...
    
    def __init__(self: MSPyMstnPlatform.IGlobalPositionSource) -> None:
        ...
    
class IMouseWheelHandler:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.IMouseWheelHandler) -> None:
        ...
    
class IPlotBeginElementParam:
    """
    None
    """

    def GetElemHandleCP(self: MSPyMstnPlatform.IPlotBeginElementParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the element handle.
        """
        ...
    
    def GetElementDescrCP(self: MSPyMstnPlatform.IPlotBeginElementParam) -> MSPyDgnPlatform.MSElementDescr:
        """
        Gets the element descriptor.
        """
        ...
    
    def GetElementStack(*args, **kwargs):
        """
        GetElementStack(self: MSPyMstnPlatform.IPlotBeginElementParam) -> Bstdcxx::bvector<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64,BentleyAllocator<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64> >
        
        Gets the element parameter stack.
        """
        ...
    
    def GetOriginalElemHandleCP(self: MSPyMstnPlatform.IPlotBeginElementParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the original element handle.
        
        Remark:
        s May differ from GetElemHandleCP() if another print event handler
        has replaced the element.
        """
        ...
    
    def GetReplacementElemHandleCP(self: MSPyMstnPlatform.IPlotBeginElementParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the original element descriptor.
        
        Remark:
        s May differ from GetElementDescrCP() if another print event
        handler has replaced the element.
        """
        ...
    
    def IgnoreElement(self: MSPyMstnPlatform.IPlotBeginElementParam) -> None:
        """
        Instruct the print engine not to print this element.
        """
        ...
    
    def IsElementIgnored(self: MSPyMstnPlatform.IPlotBeginElementParam) -> bool:
        """
        True if the print engine has been instructed not to print this
        element.
        """
        ...
    
    def ReplaceElement(self: MSPyMstnPlatform.IPlotBeginElementParam, edP: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        """
        Temporarily replace the original element with the specified one when
        printing.
        """
        ...
    
    def ReplaceTextFont(self: MSPyMstnPlatform.IPlotBeginElementParam, fontNum: int) -> None:
        """
        Replace all text fonts inside this element with the given font number.
        """
        ...
    
    def ReplaceTextString(self: MSPyMstnPlatform.IPlotBeginElementParam, textString: str) -> None:
        """
        Replace all text strings inside this element with the given string.
        """
        ...
    
    def SetIsTextBoundaryColorValid(self: MSPyMstnPlatform.IPlotBeginElementParam, value: bool) -> None:
        """
        Indicates that the text boundary color has been set.
        """
        ...
    
    def SetPostStrokeLineStyleIndex(self: MSPyMstnPlatform.IPlotBeginElementParam, lineStyleIndex: int) -> None:
        """
        Sets the post-stroke line style index.
        
        Remark:
        s Only supported when printing in non-rasterized mode.
        """
        ...
    
    def SetSortOrder(self: MSPyMstnPlatform.IPlotBeginElementParam, sortOrder: int) -> None:
        """
        Sets the post-stroke sort order.
        
        Remark:
        s Only supported when printing in non-rasterized mode.
        """
        ...
    
    def SetTextBoundaryColor(self: MSPyMstnPlatform.IPlotBeginElementParam, color: int) -> None:
        """
        Sets the text boundary color.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotBeginElementParam) -> None:
        ...
    
class IPlotBorderTextParam:
    """
    None
    """

    def GetBackgroundColor(self: MSPyMstnPlatform.IPlotBorderTextParam) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the plot background color.
        """
        ...
    
    def GetBorderColor(self: MSPyMstnPlatform.IPlotBorderTextParam) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the border color.
        """
        ...
    
    def GetBorderWidth(self: MSPyMstnPlatform.IPlotBorderTextParam) -> int:
        """
        Gets the border width in dots.
        """
        ...
    
    def GetIsLicenseLabelNeeded(self: MSPyMstnPlatform.IPlotBorderTextParam) -> bool:
        """
        True if license label needed.
        """
        ...
    
    def GetString(self: MSPyMstnPlatform.IPlotBorderTextParam) -> str:
        """
        Gets the border text string.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotBorderTextParam) -> None:
        ...
    
class IPlotClipParam:
    """
    None
    """

    def ComputeRange(self: MSPyMstnPlatform.IPlotClipParam) -> MSPyBentleyGeom.DRange2d:
        """
        Compute the clip range.
        """
        ...
    
    def GetBorderWidth(self: MSPyMstnPlatform.IPlotClipParam) -> int:
        """
        Gets the plot border width.
        """
        ...
    
    def GetIsPlotBorder(self: MSPyMstnPlatform.IPlotClipParam) -> bool:
        """
        True if this clip boundary is for the plot border.
        """
        ...
    
    def GetIsTextBoundaryColorValid(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> bool:
        """
        True if the text boundary color is defined.
        """
        ...
    
    def GetNumPolygons(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the number of polygons in this polygon set.
        """
        ...
    
    def GetPolygon(self: MSPyMstnPlatform.IPlotPolygonSetParam, polygonIndex: int) -> MSPyMstnPlatform.IPlotDPoints:
        """
        Gets the polygon for the given index.
        """
        ...
    
    def GetTextBoundaryColor(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the text boundary color.
        """
        ...
    
    def GetTotalNumPoints(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the total number of points across all polygons.
        """
        ...
    
    def IsTextGlyph(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> bool:
        """
        True if this polygon set is for a text glyph.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotClipParam) -> None:
        ...
    
class IPlotDPoints:
    """
    None
    """

    def GetDPoints(self: MSPyMstnPlatform.IPlotDPoints) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets the array of points.
        """
        ...
    
    def GetNumPoints(self: MSPyMstnPlatform.IPlotDPoints) -> int:
        """
        Gets the number of points.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotDPoints) -> None:
        ...
    
class IPlotElemDisplayParams:
    """
    None
    """

    @property
    def ColorIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @ColorIndex.setter
    def ColorIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def ExtLineStyleIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @ExtLineStyleIndex.setter
    def ExtLineStyleIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def FillColor(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @FillColor.setter
    def FillColor(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def FillColorTBGR(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @FillColorTBGR.setter
    def FillColorTBGR(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def FillDisplay(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpFillDisplay:
        ...
    @FillDisplay.setter
    def FillDisplay(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: MSPyMstnPlatform.PlotEdpFillDisplay) -> None:
        ...
    
    def GetColorIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the line color index.
        """
        ...
    
    def GetExtLineStyleIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the extended line style index.
        """
        ...
    
    def GetFillColor(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the fill color index.
        """
        ...
    
    def GetFillColorTBGR(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the RGB fill color.
        """
        ...
    
    def GetFillDisplay(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpFillDisplay:
        """
        Gets the fill display mode.
        """
        ...
    
    def GetHasExtLineStyle(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if extended line style defined.
        
        Remark:
        s An extended line style is a line style code greater than 7.
        Internal use only.
        """
        ...
    
    def GetHasLineCap(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if line cap defined.
        """
        ...
    
    def GetHasLineJoin(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if line join defined.
        """
        ...
    
    def GetHasLineStyleParams(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if line style parameters defined.
        """
        ...
    
    def GetHasLineWeightMM(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if line width in millimeters defined.
        """
        ...
    
    def GetHasScreening(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if screening defined.
        """
        ...
    
    def GetHasTransparency(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if transparency defined.
        """
        ...
    
    def GetIgnoreLevelSymb(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Gets the ignore level symbology flag.
        """
        ...
    
    def GetIsOverrideColorDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if override color defined.
        """
        ...
    
    def GetIsOverrideFillColorDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if override fill color defined.
        """
        ...
    
    def GetIsOverrideStyleDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if override style defined.
        """
        ...
    
    def GetIsOverrideWidthDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if override width defined.
        """
        ...
    
    def GetIsRenderable(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Indicates if the current element is renderable.
        """
        ...
    
    def GetLevel(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the current element level.
        """
        ...
    
    def GetLineCap(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpLineCap:
        """
        Gets the line cap.
        """
        ...
    
    def GetLineColorTBGR(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the RGB line color.
        """
        ...
    
    def GetLineJoin(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpLineJoin:
        """
        Gets the line join.
        """
        ...
    
    def GetLineStyleParams(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyDgnPlatform.LineStyleParams:
        """
        Gets the line style parameters.
        """
        ...
    
    def GetPriority(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the priority.
        """
        ...
    
    def GetScreening(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        """
        Gets the screening value.
        """
        ...
    
    def GetStyleIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the line style index.
        """
        ...
    
    def GetTransparency(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        """
        Get transparency. 0.0 indicates not transparent; 1.0 indicates
        completely transparent.
        """
        ...
    
    def GetUseFillColorRGB(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if RGB fill color defined.
        """
        ...
    
    def GetUseLineColorRGB(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        """
        Returns True if RGB line color defined.
        """
        ...
    
    def GetWeightIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        """
        Gets the line weight index.
        """
        ...
    
    def GetWidthMM(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        """
        Gets the line width in millimeters.
        """
        ...
    
    @property
    def HasExtLineStyle(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    @HasExtLineStyle.setter
    def HasExtLineStyle(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: bool) -> None:
        ...
    
    @property
    def HasLineCap(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def HasLineJoin(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def HasLineStyleParams(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def HasLineWeightMM(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def HasScreening(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def HasTransparency(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def IgnoreLevelSymb(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def IsOverrideColorDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    @IsOverrideColorDefined.setter
    def IsOverrideColorDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: bool) -> None:
        ...
    
    @property
    def IsOverrideFillColorDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    @IsOverrideFillColorDefined.setter
    def IsOverrideFillColorDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: bool) -> None:
        ...
    
    @property
    def IsOverrideStyleDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    @IsOverrideStyleDefined.setter
    def IsOverrideStyleDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: bool) -> None:
        ...
    
    @property
    def IsOverrideWidthDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    @IsOverrideWidthDefined.setter
    def IsOverrideWidthDefined(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: bool) -> None:
        ...
    
    @property
    def IsRenderable(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def Level(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    
    @property
    def LineCap(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpLineCap:
        ...
    @LineCap.setter
    def LineCap(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: MSPyMstnPlatform.PlotEdpLineCap) -> None:
        ...
    
    @property
    def LineColorTBGR(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @LineColorTBGR.setter
    def LineColorTBGR(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def LineJoin(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyMstnPlatform.PlotEdpLineJoin:
        ...
    @LineJoin.setter
    def LineJoin(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: MSPyMstnPlatform.PlotEdpLineJoin) -> None:
        ...
    
    @property
    def LineStyleParams(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> MSPyDgnPlatform.LineStyleParams:
        ...
    @LineStyleParams.setter
    def LineStyleParams(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: MSPyDgnPlatform.LineStyleParams) -> None:
        ...
    
    @property
    def Priority(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @Priority.setter
    def Priority(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def Screening(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        ...
    @Screening.setter
    def Screening(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: float) -> None:
        ...
    
    def SetColorIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the line color index.
        """
        ...
    
    def SetExtLineStyleIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the extended line style index.
        """
        ...
    
    def SetFillColor(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the fill color index.
        """
        ...
    
    def SetFillColorTBGR(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the RGB fill color.
        """
        ...
    
    def SetFillDisplay(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: MSPyMstnPlatform.PlotEdpFillDisplay) -> None:
        """
        Sets the fill display mode.
        """
        ...
    
    def SetHasExtLineStyle(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: bool) -> None:
        """
        Indicates that extended line style is defined.
        
        Remark:
        s An extended line style is a line style code greater than 7.
        Internal use only.
        """
        ...
    
    def SetIsOverrideColorDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: bool) -> None:
        """
        If a resymbolization application changes the symbology via this
        interface, it should also set an override flag to indicate what should
        be overriden. For example, if the application calls SetLineColorTBGR,
        then calling SetIsOverrideColorDefined (true) will prevent the color
        from being affected by level symbology or other subsequent
        resymbolization.
        """
        ...
    
    def SetIsOverrideFillColorDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: bool) -> None:
        """
        If a resymbolization application changes the symbology via this
        interface, it should also set an override flag to indicate what should
        be overriden. For example, if the application calls SetFillColorTBGR,
        then calling SetIsOverrideFillColorDefined (true) will prevent the
        fill color from being affected by level symbology or other subsequent
        resymbolization.
        """
        ...
    
    def SetIsOverrideStyleDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: bool) -> None:
        """
        If a resymbolization application changes the symbology via this
        interface, it should also set an override flag to indicate what should
        be overriden. For example, if the application calls SetStyleIndex,
        then calling SetIsOverrideStyleDefined (true) will prevent the style
        from being affected by level symbology or other subsequent
        resymbolization.
        """
        ...
    
    def SetIsOverrideWidthDefined(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: bool) -> None:
        """
        If a resymbolization application changes the symbology via this
        interface, it should also set an override flag to indicate what should
        be overriden. For example, if the application calls SetWidthMM, then
        calling SetIsOverrideWidthDefined (true) will prevent the width from
        being affected by level symbology or other subsequent resymbolization.
        """
        ...
    
    def SetLineCap(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: MSPyMstnPlatform.PlotEdpLineCap) -> None:
        """
        Sets the line cap.
        """
        ...
    
    def SetLineColorTBGR(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the RGB line color.
        """
        ...
    
    def SetLineJoin(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: MSPyMstnPlatform.PlotEdpLineJoin) -> None:
        """
        Sets the line join.
        """
        ...
    
    def SetLineStyleParams(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: MSPyDgnPlatform.LineStyleParams) -> None:
        """
        Sets the line style parameters.
        """
        ...
    
    def SetPriority(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the priority.
        """
        ...
    
    def SetScreening(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: float) -> None:
        """
        Sets the screening value (0-100).
        """
        ...
    
    def SetStyleIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the line style index.
        """
        ...
    
    def SetTransparency(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: float) -> None:
        """
        Set transparency. 0.0 indicates not transparent; 1.0 indicates
        completely transparent.
        """
        ...
    
    def SetWeightIndex(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: int) -> None:
        """
        Sets the line weight index.
        """
        ...
    
    def SetWidthMM(self: MSPyMstnPlatform.IPlotElemDisplayParams, arg0: float) -> None:
        """
        Sets the line width in millimeters.
        """
        ...
    
    def SetZeroTransparency(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> None:
        """
        Indicates that 0.0 transparency should be used as an override.
        """
        ...
    
    @property
    def StyleIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @StyleIndex.setter
    def StyleIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def Transparency(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        ...
    @Transparency.setter
    def Transparency(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: float) -> None:
        ...
    
    @property
    def UseFillColorRGB(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def UseLineColorRGB(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> bool:
        ...
    
    @property
    def WeightIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> int:
        ...
    @WeightIndex.setter
    def WeightIndex(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: int) -> None:
        ...
    
    @property
    def WidthMM(arg0: MSPyMstnPlatform.IPlotElemDisplayParams) -> float:
        ...
    @WidthMM.setter
    def WidthMM(arg0: MSPyMstnPlatform.IPlotElemDisplayParams, arg1: float) -> None:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotElemDisplayParams) -> None:
        ...
    
class IPlotElementParam:
    """
    None
    """

    def GetElementHandle(self: MSPyMstnPlatform.IPlotElementParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the element handle.
        """
        ...
    
    def GetTransform(self: MSPyMstnPlatform.IPlotElementParam, tag: MSPyMstnPlatform.PlotTagTransform) -> MSPyBentleyGeom.Transform:
        """
        Gets the LocalToPlot transform for this element.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotElementParam) -> None:
        ...
    
class IPlotEndElementParam:
    """
    None
    """

    def GetElemHandleCP(self: MSPyMstnPlatform.IPlotEndElementParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the element handle.
        
        Remark:
        s Always the same original element handle passed to the
        BeginElement event.
        """
        ...
    
    def GetElementDescrCP(self: MSPyMstnPlatform.IPlotEndElementParam) -> MSPyDgnPlatform.MSElementDescr:
        """
        Gets the element descriptor.
        
        Remark:
        s Always the same original element descriptor passed to the
        BeginElement event.
        """
        ...
    
    def GetElementStack(*args, **kwargs):
        """
        GetElementStack(self: MSPyMstnPlatform.IPlotEndElementParam) -> Bstdcxx::bvector<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64,BentleyAllocator<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64> >
        
        Gets the element parameter stack.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotEndElementParam) -> None:
        ...
    
class IPlotFontMap:
    """
    None
    """

    def GetHwFontName(self: MSPyMstnPlatform.IPlotFontMap) -> str:
        """
        Gets the hardware font name.
        """
        ...
    
    def GetHwKern(self: MSPyMstnPlatform.IPlotFontMap) -> int:
        """
        Gets the hardware font kerning value.
        """
        ...
    
    def GetHwSizeRatio(self: MSPyMstnPlatform.IPlotFontMap) -> float:
        """
        Gets the hardware font size ratio.
        """
        ...
    
    def GetMsFontName(self: MSPyMstnPlatform.IPlotFontMap) -> str:
        """
        Gets the MicroStation font name.
        """
        ...
    
    def GetMsFontNumber(self: MSPyMstnPlatform.IPlotFontMap) -> int:
        """
        Gets the MicroStation font number.
        """
        ...
    
    def GetMsFontType(self: MSPyMstnPlatform.IPlotFontMap) -> MSPyDgnPlatform.DgnFontType:
        """
        Gets the MicroStation font type.
        """
        ...
    
    @property
    def HwFontName(arg0: MSPyMstnPlatform.IPlotFontMap) -> str:
        ...
    @HwFontName.setter
    def HwFontName(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: str) -> None:
        ...
    
    @property
    def HwKern(arg0: MSPyMstnPlatform.IPlotFontMap) -> int:
        ...
    @HwKern.setter
    def HwKern(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: int) -> None:
        ...
    
    @property
    def HwSizeRatio(arg0: MSPyMstnPlatform.IPlotFontMap) -> float:
        ...
    @HwSizeRatio.setter
    def HwSizeRatio(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: float) -> None:
        ...
    
    @property
    def MsFontName(arg0: MSPyMstnPlatform.IPlotFontMap) -> str:
        ...
    @MsFontName.setter
    def MsFontName(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: str) -> None:
        ...
    
    @property
    def MsFontNumber(arg0: MSPyMstnPlatform.IPlotFontMap) -> int:
        ...
    @MsFontNumber.setter
    def MsFontNumber(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: int) -> None:
        ...
    
    @property
    def MsFontType(arg0: MSPyMstnPlatform.IPlotFontMap) -> MSPyDgnPlatform.DgnFontType:
        ...
    @MsFontType.setter
    def MsFontType(arg0: MSPyMstnPlatform.IPlotFontMap, arg1: MSPyDgnPlatform.DgnFontType) -> None:
        ...
    
    def SetHwFontName(self: MSPyMstnPlatform.IPlotFontMap, value: str) -> None:
        """
        Sets the hardware font name.
        """
        ...
    
    def SetHwKern(self: MSPyMstnPlatform.IPlotFontMap, value: int) -> None:
        """
        Sets the hardware font kerning value.
        """
        ...
    
    def SetHwSizeRatio(self: MSPyMstnPlatform.IPlotFontMap, value: float) -> None:
        """
        Sets the hardware font size ratio.
        """
        ...
    
    def SetMsFontName(self: MSPyMstnPlatform.IPlotFontMap, value: str) -> None:
        """
        Sets the MicroStation font name.
        """
        ...
    
    def SetMsFontNumber(self: MSPyMstnPlatform.IPlotFontMap, arg0: int) -> None:
        """
        value
        """
        ...
    
    def SetMsFontType(self: MSPyMstnPlatform.IPlotFontMap, value: MSPyDgnPlatform.DgnFontType) -> None:
        """
        Sets the MicroStation font type.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotFontMap) -> None:
        ...
    
class IPlotFontMapList:
    """
    None
    """

    def AddFontMap(self: MSPyMstnPlatform.IPlotFontMapList, arg0: int) -> None:
        """
        fontMapListIndex
        """
        ...
    
    def FindFontMapByName(self: MSPyMstnPlatform.IPlotFontMapList, msFontType: MSPyDgnPlatform.DgnFontType, msFontName: str) -> None:
        ...
    
    def FindFontMapByNum(self: MSPyMstnPlatform.IPlotFontMapList, msFontNumber: int) -> None:
        ...
    
    def GetDgnFontMapP(self: MSPyMstnPlatform.IPlotFontMapList, fontMapListIndex: int) -> MSPyMstnPlatform.IPlotFontMap:
        """
        Gets the font map at the specified index.
        """
        ...
    
    def GetNumFontMaps(self: MSPyMstnPlatform.IPlotFontMapList) -> int:
        """
        Get the number of font maps.
        """
        ...
    
    def RemoveAllFontMaps(self: MSPyMstnPlatform.IPlotFontMapList) -> None:
        """
        Removes all font maps.
        """
        ...
    
    def RemoveFontMap(self: MSPyMstnPlatform.IPlotFontMapList, fontMapListIndex: int) -> None:
        """
        Removes the font map at the specified index.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotFontMapList) -> None:
        ...
    
class IPlotGetColorTableParam:
    """
    None
    """

    def EligibleInvertWhiteToBlackColors(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> MSPyDgnPlatform.BitMask:
        """
        Gets/Sets bitmask indicating which color indices are eligible for
        automatic white/black color inversion.
        """
        ...
    
    def GetApplyRefColorAdjustment(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> bool:
        """
        True if reference color adjustment is to be applied.
        """
        ...
    
    def GetModelRef(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> MSPyDgnPlatform.DgnModelRef:
        """
        Gets the modelRef for the model about to be printed.
        """
        ...
    
    def GetUseBackgroundColorFromView(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> bool:
        """
        True if background color is to be obtained from the view.
        """
        ...
    
    def SetApplyRefColorAdjustment(self: MSPyMstnPlatform.IPlotGetColorTableParam, applyRefColorAdjustment: bool) -> None:
        """
        Indicate if reference color adjustment is to be applied.
        """
        ...
    
    def SetUseBackgroundColorFromView(self: MSPyMstnPlatform.IPlotGetColorTableParam, useBackgroundColorFromView: bool) -> None:
        """
        Indicate if background color is to be obtained from the view.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotGetColorTableParam) -> None:
        ...
    
class IPlotOleParam:
    """
    None
    """

    def GetQuality(self: MSPyMstnPlatform.IPlotOleParam) -> float:
        """
        Gets the ratio of rasterized OLE resolution over vector plot
        resolution.
        """
        ...
    
    def GetRasterize(self: MSPyMstnPlatform.IPlotOleParam) -> bool:
        """
        Gets whether or not OLE objects should always be rasterized.
        """
        ...
    
    @property
    def Quality(arg0: MSPyMstnPlatform.IPlotOleParam) -> float:
        ...
    @Quality.setter
    def Quality(arg0: MSPyMstnPlatform.IPlotOleParam, arg1: float) -> None:
        ...
    
    @property
    def Rasterize(arg0: MSPyMstnPlatform.IPlotOleParam) -> bool:
        ...
    @Rasterize.setter
    def Rasterize(arg0: MSPyMstnPlatform.IPlotOleParam, arg1: bool) -> None:
        ...
    
    def SetQuality(self: MSPyMstnPlatform.IPlotOleParam, value: float) -> None:
        """
        Sets the ratio of rasterized OLE resolution over vector plot
        resolution.
        
        Remark:
        s This setting has no effect on non-rasterized OLE objects, e.g.
        those output by the system printer driver in non-rasterized mode.
        
        :param value:
        Range 0.0<value <= 1.0.
        """
        ...
    
    def SetRasterize(self: MSPyMstnPlatform.IPlotOleParam, value: bool) -> None:
        """
        Sets whether or not OLE objects should always be rasterized.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotOleParam) -> None:
        ...
    
class IPlotPathParam:
    """
    None
    """

    def ContainsCurves(self: MSPyMstnPlatform.IPlotPathParam) -> bool:
        """
        True if the path contains bezier curves.
        """
        ...
    
    def ContainsDisconnects(self: MSPyMstnPlatform.IPlotPathParam) -> bool:
        """
        True if the path contains disconnects.
        """
        ...
    
    def GetIsTextBoundaryColorValid(self: MSPyMstnPlatform.IPlotPathParam) -> bool:
        """
        True if the text boundary color is defined.
        """
        ...
    
    def GetNextOperator(self: MSPyMstnPlatform.IPlotPathParam) -> tuple:
        """
        Gets the next operator and optionally its vertices.
        
        :param operatorVerticesP:
        Vertices for next operator. May be NULL.
        """
        ...
    
    def GetNumOperators(self: MSPyMstnPlatform.IPlotPathParam) -> int:
        """
        Gets the number of operators in this path.
        """
        ...
    
    def GetOperators(self: MSPyMstnPlatform.IPlotPathParam) -> str:
        """
        Get a pointer to the path operator buffer.
        """
        ...
    
    def GetTextBoundaryColor(self: MSPyMstnPlatform.IPlotPathParam) -> int:
        """
        Gets the text boundary color.
        """
        ...
    
    def GetTotalDPoints(self: MSPyMstnPlatform.IPlotPathParam) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets a pointer to the path point buffer.
        """
        ...
    
    def GetTotalNumPoints(self: MSPyMstnPlatform.IPlotPathParam) -> int:
        """
        Gets the total number of points across all operators.
        """
        ...
    
    def IsFilled(self: MSPyMstnPlatform.IPlotPathParam) -> bool:
        """
        True if the path is filled.
        """
        ...
    
    def IsTextGlyph(self: MSPyMstnPlatform.IPlotPathParam) -> bool:
        """
        True if this path is for a text glyph.
        """
        ...
    
    def ResetCurrentOperator(self: MSPyMstnPlatform.IPlotPathParam) -> None:
        """
        Resets the current operator to the beginning of the path.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPathParam) -> None:
        ...
    
class IPlotPolygonSetParam:
    """
    None
    """

    def GetIsTextBoundaryColorValid(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> bool:
        """
        True if the text boundary color is defined.
        """
        ...
    
    def GetNumPolygons(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the number of polygons in this polygon set.
        """
        ...
    
    def GetPolygon(self: MSPyMstnPlatform.IPlotPolygonSetParam, polygonIndex: int) -> MSPyMstnPlatform.IPlotDPoints:
        """
        Gets the polygon for the given index.
        """
        ...
    
    def GetTextBoundaryColor(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the text boundary color.
        """
        ...
    
    def GetTotalNumPoints(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> int:
        """
        Gets the total number of points across all polygons.
        """
        ...
    
    def IsTextGlyph(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> bool:
        """
        True if this polygon set is for a text glyph.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPolygonSetParam) -> None:
        ...
    
class IPlotPostElementOutputParam:
    """
    None
    """

    def GetElemHandleCP(self: MSPyMstnPlatform.IPlotPostElementOutputParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the element handle.
        """
        ...
    
    def GetElementDescrCP(self: MSPyMstnPlatform.IPlotPostElementOutputParam) -> MSPyDgnPlatform.MSElementDescr:
        """
        Gets the element descriptor.
        """
        ...
    
    def GetElementStack(*args, **kwargs):
        """
        GetElementStack(self: MSPyMstnPlatform.IPlotPostElementOutputParam) -> Bstdcxx::bvector<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64,BentleyAllocator<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64> >
        
        Gets the element parameter stack.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPostElementOutputParam) -> None:
        ...
    
class IPlotPostElementScanParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IPlotPostElementScanParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def IsFirstElementScan(self: MSPyMstnPlatform.IPlotPostElementScanParam) -> bool:
        """
        True if this is the first element scan.
        
        Remark:
        s When printing in rasterized mode, the element scan is invoked
        multiple times.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPostElementScanParam) -> None:
        ...
    
class IPlotPreElementOutputParam:
    """
    None
    """

    def GetElemHandleCP(self: MSPyMstnPlatform.IPlotPreElementOutputParam) -> MSPyDgnPlatform.ElementHandle:
        """
        Gets the element handle.
        """
        ...
    
    def GetElementDescrCP(self: MSPyMstnPlatform.IPlotPreElementOutputParam) -> MSPyDgnPlatform.MSElementDescr:
        """
        Gets the element descriptor.
        """
        ...
    
    def GetElementStack(*args, **kwargs):
        """
        GetElementStack(self: MSPyMstnPlatform.IPlotPreElementOutputParam) -> Bstdcxx::bvector<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64,BentleyAllocator<MSPyMstnPlatform.Print.IPlotElementParam const * __ptr64> >
        
        Gets the element parameter stack.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPreElementOutputParam) -> None:
        ...
    
class IPlotPreElementScanParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IPlotPreElementScanParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def IsFirstElementScan(self: MSPyMstnPlatform.IPlotPreElementScanParam) -> bool:
        """
        True if this is the first element scan.
        
        Remark:
        s When printing in rasterized mode, the element scan is invoked
        multiple times.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPreElementScanParam) -> None:
        ...
    
class IPlotPreModelParam:
    """
    None
    """

    def GetIsTransientUpdate(self: MSPyMstnPlatform.IPlotPreModelParam) -> bool:
        """
        True if inside the transient element pass.
        """
        ...
    
    def GetModelRef(self: MSPyMstnPlatform.IPlotPreModelParam) -> MSPyDgnPlatform.DgnModelRef:
        """
        Gets the modelRef for the model about to be printed.
        """
        ...
    
    def SetIgnoreModel(self: MSPyMstnPlatform.IPlotPreModelParam, arg0: bool) -> None:
        """
        Indicate whether the model is to be printed.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPreModelParam) -> None:
        ...
    
class IPlotPrePenChartParam:
    """
    None
    """

    def GetPrintEngine(self: MSPyMstnPlatform.IPlotPrePenChartParam) -> MSPyMstnPlatform.IPrintEngine:
        """
        Gets the print engine interface.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotPrePenChartParam) -> None:
        ...
    
class IPlotRasterParam:
    """
    None
    """

    def GetBlueMap(self: MSPyMstnPlatform.IPlotRasterParam) -> bytes:
        ...
    
    def GetFormat(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyMstnPlatform.PlotRasterFormat:
        """
        Gets the raster format.
        """
        ...
    
    def GetGlobalTransparency(self: MSPyMstnPlatform.IPlotRasterParam) -> float:
        """
        Raster global transparency.
        """
        ...
    
    def GetGreenMap(self: MSPyMstnPlatform.IPlotRasterParam) -> bytes:
        ...
    
    def GetImage(self: MSPyMstnPlatform.IPlotRasterParam) -> bytes:
        ...
    
    def GetImageRect(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyBentleyGeom.DRange2d:
        """
        Gets the raster image rectangle in pixels.
        """
        ...
    
    def GetImageSize(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyBentleyGeom.Point2d:
        """
        Gets the raster image size in pixels.
        """
        ...
    
    def GetIsGrayscale(self: MSPyMstnPlatform.IPlotRasterParam) -> bool:
        """
        True if raster is to be printed in grayscale mode.
        """
        ...
    
    def GetPaletteSize(self: MSPyMstnPlatform.IPlotRasterParam) -> int:
        """
        Gets the raster palette size.
        """
        ...
    
    def GetPlotterRect(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyBentleyGeom.DRange2d:
        """
        Gets the raster output rectangle in dots.
        """
        ...
    
    def GetRedMap(self: MSPyMstnPlatform.IPlotRasterParam) -> bytes:
        ...
    
    def GetTransparencyMode(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyMstnPlatform.PlotRasterTransparency:
        """
        Raster transparency mode.
        """
        ...
    
    def GetTransparentColor(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyDgnPlatform.RgbColorDef:
        """
        Raster transparency color.
        """
        ...
    
    def GetTransparentIndex(self: MSPyMstnPlatform.IPlotRasterParam) -> int:
        """
        Raster transparency index.
        """
        ...
    
    def GetTransparentMask(self: MSPyMstnPlatform.IPlotRasterParam) -> MSPyBentleyGeom.UInt16Array:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotRasterParam) -> None:
        ...
    
class IPlotRasterizedParam:
    """
    None
    """

    def GetQuality(self: MSPyMstnPlatform.IPlotRasterizedParam) -> float:
        """
        Gets the ratio of rasterized plot resolution over vector plot
        resolution.
        """
        ...
    
    @property
    def Quality(arg0: MSPyMstnPlatform.IPlotRasterizedParam) -> float:
        ...
    @Quality.setter
    def Quality(arg0: MSPyMstnPlatform.IPlotRasterizedParam, arg1: float) -> None:
        ...
    
    def SetQuality(self: MSPyMstnPlatform.IPlotRasterizedParam, value: float) -> None:
        """
        Sets the ratio of rasterized plot resolution over vector plot
        resolution.
        
        :param value:
        Range 0.0<value <= 1.0.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotRasterizedParam) -> None:
        ...
    
class IPlotter:
    """
    None
    """

    def ConvertUnits(*args, **kwargs):
        """
        Overloaded function.
        
        1. ConvertUnits(self: MSPyMstnPlatform.IPlotter, value: float, fromUnits: MSPyMstnPlatform.Print.PlotUnits, toUnits: MSPyMstnPlatform.Print.PlotUnits) -> float
        
        Converts values from one units to another.
        
        2. ConvertUnits(self: MSPyMstnPlatform.IPlotter, value: float, units: MSPyMstnPlatform.Print.PlotUnits, convertStoredToUnits: bool) -> float
        
        Converts values from one units to another.
        """
        ...
    
    def Copy(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotter:
        """
        Duplicates the Plotter instance.
        """
        ...
    
    def CopyFileIntoPlotFile(self: MSPyMstnPlatform.IPlotter, filename: str) -> None:
        """
        Copies the contents of the specified file into the plot output file.
        """
        ...
    
    def FindBestFitForm(self: MSPyMstnPlatform.IPlotter, requestWidthDots: float, requestHeightDots: float, requestUnits: MSPyMstnPlatform.Print.PlotUnits, bestFitFormIndexP: MSPyBentleyGeom.Int32Array, selectedFormFitsP: MSPyBentleyGeom.BoolArray) -> None:
        """
        Gets the form that best fits the specified width and height.
        
        :param requestWidthDots:
        Requested form width in dots.
        
        :param requestHeightDots:
        Requested form height in dots.
        
        :param requestUnits:
        Indicates preference for standard ANSI or ISO forms; must be
        PlotUnits.in or PlotUnits.mm.
        
        :param bestFitFormIndexP:
        Returns index of the form that best fits the requested size.
        
        :param selectedFormFitsP:
        Returns True if the selected form accomodates the requested size
        without clipping. May be NULL.
        """
        ...
    
    def FindCompanionFile(self: MSPyMstnPlatform.IPlotter, fileSpec: MSPyMstnPlatform.Print.PlotFileSpec) -> bool:
        """
        Searches for a companion file to the printer driver configuration file
        in the same directory as the .pltcfg file, or in MS_PLTCFG_PATH.
        Intended to be called only by printer drivers.
        """
        ...
    
    def FindFormByNameSizeMatch(self: MSPyMstnPlatform.IPlotter, requestForm: MSPyMstnPlatform.IPlotterForm, requestUnits: MSPyMstnPlatform.Print.PlotUnits) -> MSPyMstnPlatform.IPlotterForm:
        """
        Attempts to locate the closest matching form defined for this plotter
        to the specified form.
        
        Remark:
        s The first check is for identical form name and form size. If no
        such match exists, the best-fitting form is chosen.
        """
        ...
    
    def FlushBuffer(self: MSPyMstnPlatform.IPlotter) -> None:
        """
        Flushes the plotting buffer.
        
        Remark:
        s Normally, a plotter driver never needs to call this. As a driver
        calls WriteCommand, FlushBuffer is called automatically. It is
        also called at the end of the plot.
        """
        ...
    
    def FontMaps(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotFontMapList:
        """
        Gets the interface used to add/remove/edit the plotter hardware font
        maps.
        """
        ...
    
    def Forms(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotterFormList:
        """
        Gets the interface used to add/remove/edit/query the plotter paper
        sizes.
        """
        ...
    
    def FormsCP(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotterFormList:
        """
        Gets the interface used to query the plotter paper sizes.
        """
        ...
    
    def GetBool(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagBool) -> bool:
        """
        Gets a boolean value from the Plotter instance.
        """
        ...
    
    def GetDPoint2d(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDPoint2d) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets a DPoint2d value from the Plotter instance.
        """
        ...
    
    def GetDPoint3d(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDPoint3d) -> MSPyBentleyGeom.DPoint3d:
        """
        Gets a DPoint3d value from the Plotter instance.
        """
        ...
    
    def GetDouble(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDbl) -> float:
        """
        Gets a double value from the Plotter instance.
        """
        ...
    
    def GetDriverCoordSysOrigin(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.DriverCoordSysOrigin:
        """
        Gets the current driver coordinate system origin.
        """
        ...
    
    def GetDriverOutputMode(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.DriverOutputMode:
        """
        Gets the current driver output mode.
        """
        ...
    
    def GetEngineBackgroundColor(self: MSPyMstnPlatform.IPlotter) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the print background color.
        
        Remark:
        s Should only be called only during print processing.
        """
        ...
    
    def GetEngineColorFromIndex(self: MSPyMstnPlatform.IPlotter, colorIndex: int) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the effective print color for the given color table index.
        
        Remark:
        s Should only be called only during print processing.
        
        :param colorIndex:
        Color table index (range 0-255)
        """
        ...
    
    def GetEngineColorFromPen(self: MSPyMstnPlatform.IPlotter, pen: int) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the effective print color for the given pen number.
        
        Remark:
        s Should only be called only during print processing.
        
        :param pen:
        Pen number (range 0-255)
        """
        ...
    
    def GetEngineError(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.Print.PlotError:
        """
        Gets the current error code from the Plotter instance. Should only be
        called only during print processing.
        """
        ...
    
    def GetEngineLineStyle(self: MSPyMstnPlatform.IPlotter, styleIndex: int) -> MSPyMstnPlatform.PlotLineStyleDef:
        """
        Gets print engine line style pattern in dots for a particular index.
        
        Remark:
        s Should only be called only during print processing.
        
        :param styleIndex:
        Line style index (range 0-(MAX_LINESTYLES+NumExtLineStyles-1))
        """
        ...
    
    def GetEngineLineWidth(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetEngineLineWidth(self: MSPyMstnPlatform.IPlotter, weight: int) -> int
        
        Gets the print engine line width for a particular weight.
        
        Remark:
        s The value is print width in dots. Note that the returned value
        is only from the base weight-to-width mapping table. The actual
        print width may come from the color-index-to-width table or
        elsewhere. Should only be called only during print processing.
        
        :param weight:
        Weight index (range 0 to 31).
        
        2. GetEngineLineWidth(self: MSPyMstnPlatform.IPlotter, pen: int, weight: int) -> int
        
        Gets the print engine line width for a particular weight.
        
        Remark:
        s The value is print width in dots. Note that the returned value
        is only from the base weight-to-width mapping table. The actual
        print width may come from the color-index-to-width table or
        elsewhere. Should only be called only during print processing.
        
        :param weight:
        Weight index (range 0 to 31).
        """
        ...
    
    def GetExtLineStyles(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.PlotLineStyleDef:
        """
        Gets the array of extended line style definitions.
        """
        ...
    
    def GetFileSpecCP(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagFileSpec) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets a const FileSpec value from the Plotter instance.
        """
        ...
    
    def GetFileSpecP(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagFileSpec) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets a FileSpec value from the Plotter instance.
        """
        ...
    
    def GetHwTextMode(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.PlotHwTextMode:
        """
        Gets the hardware text mode.
        """
        ...
    
    def GetInt(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagInt) -> int:
        """
        Gets an integer value from the Plotter instance.
        """
        ...
    
    def GetIsDefinedInPltcfg(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagIsDefinedInPltcfg) -> bool:
        """
        Gets a flag indicating if the specified property was defined in the
        printer driver configuration file.
        """
        ...
    
    def GetIsPenColorDefined(self: MSPyMstnPlatform.IPlotter, pen: int) -> bool:
        """
        Indicates whether the particular pen color was set in the printer
        driver configuration file.
        
        :param pen:
        Pen number (range 0-255), where 0=background pen
        """
        ...
    
    def GetLineStyle(self: MSPyMstnPlatform.IPlotter, styleIndex: int) -> MSPyMstnPlatform.PlotLineStyleDef:
        """
        Gets the print line style for the specified line style index. param
        styleIndex(input) Line style index (range 0-7).
        """
        ...
    
    def GetLineWidth(self: MSPyMstnPlatform.IPlotter, weight: int, unitsP: MSPyMstnPlatform.Print.PlotUnits) -> float:
        """
        Gets the line width in physical units for the specified weight.
        
        :param weight:
        (range 0-31).
        
        :param unitsP:
        Units for physical width.
        """
        ...
    
    def GetNumExtLineStyles(self: MSPyMstnPlatform.IPlotter) -> int:
        """
        Gets the number of extended line style definitions.
        """
        ...
    
    def GetPenColor(self: MSPyMstnPlatform.IPlotter, pen: int) -> MSPyDgnPlatform.RgbaColorDef:
        """
        Gets the color for a particular pen number.
        
        :param pen:
        Pen number (range 0-255), where 0=background pen
        """
        ...
    
    def GetPenFromColorIndex(self: MSPyMstnPlatform.IPlotter, index: int) -> int:
        """
        Gets the pen number corresponding to the given color table index.
        """
        ...
    
    def GetPenSetup(self: MSPyMstnPlatform.IPlotter, pen: int) -> MSPyMstnPlatform.PlotPenSetup:
        """
        Gets pen characteristics for a particular pen number.
        
        :param pen:
        Pen number (range 0-255), where 0=background pen
        """
        ...
    
    def GetPlotDestination(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.Print.PlotDestination:
        """
        Gets the plotter default plot destination.
        """
        ...
    
    def GetPlotterUnits(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.Print.PlotUnits:
        """
        Gets the plotter units.
        """
        ...
    
    def GetPltcfgFspec(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the printer driver configuration file specification for this
        Plotter instance.
        """
        ...
    
    def GetPointer(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagPtr) -> None:
        ...
    
    def GetPrinterDriver(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.Print.IPrinterDriverBase:
        """
        Gets the printer driver interface associated with this plotter
        instance.
        """
        ...
    
    def GetRasterCompression(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.PlotRasterCompr:
        """
        Gets a constant reference to the RasterCompression structure.
        """
        ...
    
    def GetRasterOptions(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.PlotRasterOptions:
        """
        Gets a copy of the raster options structure.
        """
        ...
    
    def GetString(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagStr, value: MSPyBentley.WString) -> None:
        """
        Gets a string value from the Plotter instance.
        """
        ...
    
    def GetSystemPrinterName(self: MSPyMstnPlatform.IPlotter, printerName: MSPyBentley.WString) -> None:
        """
        Selects the currently selected system printer name.
        """
        ...
    
    def GetTriState(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagTriState) -> MSPyMstnPlatform.PlotTriState:
        """
        Gets a tristate value from the Plotter instance.
        """
        ...
    
    def Initialize(self: MSPyMstnPlatform.IPlotter, pltcfgFspec: MSPyMstnPlatform.Print.PlotFileSpec) -> int:
        """
        Initializes the Plotter instance from the specified printer driver
        configuration file.
        """
        ...
    
    def IsPrintToFile(self: MSPyMstnPlatform.IPlotter) -> bool:
        """
        Indicates if the current plot destination is a file.
        """
        ...
    
    def IsPrintToIpserver(self: MSPyMstnPlatform.IPlotter) -> bool:
        """
        Indicates if the current plot destination is InterPlot Server.
        """
        ...
    
    def IsPrintToMetafile(self: MSPyMstnPlatform.IPlotter) -> bool:
        """
        Indicates if the current plot destination is a Windows metafile.
        """
        ...
    
    def OleParam(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotOleParam:
        """
        Gets the interface used to modify OLE plotting parameters.
        """
        ...
    
    def RasterizedParam(self: MSPyMstnPlatform.IPlotter) -> MSPyMstnPlatform.IPlotRasterizedParam:
        """
        Gets the interface used to modify rasterized plotting parameters.
        """
        ...
    
    def RoundPaperSize(self: MSPyMstnPlatform.IPlotter, roundingUnits: MSPyMstnPlatform.Print.PlotUnits, sizeUnits: MSPyMstnPlatform.Print.PlotUnits, size: MSPyBentleyGeom.DPoint2d) -> None:
        """
        Rounds the given paper size to nearest value appropriate for the
        specified rounding units.
        """
        ...
    
    def SelectFormByName(self: MSPyMstnPlatform.IPlotter, formName: str) -> int:
        """
        Selects the specified form name.
        """
        ...
    
    def SelectSystemPrinter(self: MSPyMstnPlatform.IPlotter, printerName: str) -> int:
        """
        Selects the specified system printer name.
        """
        ...
    
    def SelectTrayByName(self: MSPyMstnPlatform.IPlotter, trayName: str) -> int:
        """
        Selects the specified tray name.
        """
        ...
    
    def SetBool(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagBool, value: bool) -> None:
        """
        Sets a boolean value in the Plotter instance.
        """
        ...
    
    def SetDPoint2d(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDPoint2d, value: MSPyBentleyGeom.DPoint2d) -> None:
        """
        Sets a DPoint2d value in the Plotter instance.
        """
        ...
    
    def SetDPoint3d(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDPoint3d, value: MSPyBentleyGeom.DPoint3d) -> None:
        """
        Sets a DPoint3d value in the Plotter instance.
        """
        ...
    
    def SetDouble(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagDbl, value: float) -> None:
        """
        Sets a double value in the Plotter instance.
        """
        ...
    
    def SetDriverCoordSysOrigin(self: MSPyMstnPlatform.IPlotter, origin: MSPyMstnPlatform.DriverCoordSysOrigin) -> None:
        """
        Sets the current driver coordinate system origin.
        """
        ...
    
    def SetDriverOutputMode(self: MSPyMstnPlatform.IPlotter, mode: MSPyMstnPlatform.DriverOutputMode) -> None:
        """
        Sets the current driver output mode.
        """
        ...
    
    def SetEngineError(self: MSPyMstnPlatform.IPlotter, value: MSPyMstnPlatform.Print.PlotError) -> None:
        """
        Sets the current error code in the Plotter instance. Should only be
        called only during print processing.
        """
        ...
    
    def SetEngineLineWidth(self: MSPyMstnPlatform.IPlotter, weight: int, lineWidthDots: int) -> None:
        """
        Sets the print engine line width for a particular weight index.
        
        Remark:
        s Should only be called only during print processing. Note that
        the return value is only from the base weight-to-width mapping
        table. The actual print width may come from the color-index-to-
        width table or elsewhere. Should only be called only during print
        processing.
        
        :param weight:
        Weight index (range 0 to 31)
        
        :param lineWidthDots:
        New print width in dots.
        """
        ...
    
    def SetExtLineStyles(self: MSPyMstnPlatform.IPlotter, numExtLineStyles: int, extLineStylesDots: MSPyMstnPlatform.PlotLineStyleDef) -> None:
        """
        Sets the array of extended line style definitions. Units must be dots.
        Internal use only.
        """
        ...
    
    def SetHwTextMode(self: MSPyMstnPlatform.IPlotter, value: MSPyMstnPlatform.PlotHwTextMode) -> None:
        """
        Sets the hardware text mode.
        """
        ...
    
    def SetInt(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagInt, value: int) -> None:
        """
        Sets an integer value in the Plotter instance.
        """
        ...
    
    def SetIsDefinedInPltcfg(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagIsDefinedInPltcfg, value: bool) -> None:
        """
        Sets a flag indicating if the specified property was defined in the
        printer driver configuration file.
        """
        ...
    
    def SetLineStyle(self: MSPyMstnPlatform.IPlotter, styleIndex: int, lineStyle: MSPyMstnPlatform.PlotLineStyleDef) -> None:
        """
        Sets the print line style for the specified line style index.
        
        Remark:
        s This value is converted into pixels by the print engine at the
        time of print processing, taking into account the paper size line
        style scale factor. Should be called prior to starting the print
        engine. param styleIndex(input) Line style index (range 0-7). param
        lineStyle(input) New line style definition.
        """
        ...
    
    def SetLineWidth(self: MSPyMstnPlatform.IPlotter, weight: int, units: MSPyMstnPlatform.Print.PlotUnits, width: float) -> None:
        """
        Sets the line width in physical units for the specified weight.
        
        Remark:
        s This value is converted into pixels by the print engine at the
        time of print processing, taking into account the paper size line
        width scale factor. Should be called prior to starting the print
        engine.
        
        :param weight:
        (range 0-31).
        
        :param units:
        Units for physical width.
        
        :param width:
        New physical width.
        """
        ...
    
    def SetPenFromColorIndex(self: MSPyMstnPlatform.IPlotter, index: int, pen: int) -> None:
        """
        Sets the pen number corresponding to the given color table index.
        """
        ...
    
    def SetPenSetup(self: MSPyMstnPlatform.IPlotter, pen: int, penSetup: MSPyMstnPlatform.PlotPenSetup) -> None:
        """
        Call to set pen characteristics for a particular pen number.
        
        :param pen:
        Pen number (range 0-255), where 0=background pen
        
        :param penSetup:
        Input pen setup structure.
        """
        ...
    
    def SetPlotDestination(self: MSPyMstnPlatform.IPlotter, destination: MSPyMstnPlatform.Print.PlotDestination) -> None:
        """
        Sets the plotter default plot destination.
        """
        ...
    
    def SetPlotterUnits(self: MSPyMstnPlatform.IPlotter, units: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the plotter units.
        """
        ...
    
    def SetPointer(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagPtr, value: capsule) -> None:
        ...
    
    def SetPrinterDriver(self: MSPyMstnPlatform.IPlotter, arg0: MSPyMstnPlatform.Print.IPrinterDriverBase) -> None:
        """
        driverP
        """
        ...
    
    def SetRasterOptions(self: MSPyMstnPlatform.IPlotter, rasterOptions: MSPyMstnPlatform.PlotRasterOptions) -> None:
        """
        Sets the raster options in the plotter instance.
        """
        ...
    
    def SetString(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagStr, value: str) -> None:
        """
        Sets a string value in the Plotter instance.
        """
        ...
    
    def SetSystemPrinterOrientation(self: MSPyMstnPlatform.IPlotter, orientation: MSPyMstnPlatform.Print.PlotOrientation) -> int:
        """
        Sets the system printer orientation.
        """
        ...
    
    def SetTriState(self: MSPyMstnPlatform.IPlotter, tag: MSPyMstnPlatform.PlotTagTriState, value: MSPyMstnPlatform.PlotTriState) -> None:
        """
        Sets a tristate value in the Plotter instance.
        """
        ...
    
    def WriteCommand(self: MSPyMstnPlatform.IPlotter, buffer: bytes) -> None:
        ...
    
    def WriteString(self: MSPyMstnPlatform.IPlotter, buffer: str) -> None:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotter) -> None:
        ...
    
class IPlotterForm:
    """
    None
    """

    @property
    def AutoRotate(arg0: MSPyMstnPlatform.IPlotterForm, arg1: MSPyMstnPlatform.PlotRotateDir) -> None:
        ...
    @AutoRotate.setter
    def AutoRotate(arg0: MSPyMstnPlatform.IPlotterForm, arg1: MSPyMstnPlatform.PlotRotateDir) -> None:
        ...
    
    def Clone(self: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.IPlotterForm:
        """
        Clones this form.
        """
        ...
    
    @property
    def DefaultFormScale(arg0: MSPyMstnPlatform.IPlotterForm) -> float:
        ...
    @DefaultFormScale.setter
    def DefaultFormScale(arg0: MSPyMstnPlatform.IPlotterForm, arg1: float) -> None:
        ...
    
    @property
    def FormIndex(arg0: MSPyMstnPlatform.IPlotterForm) -> int:
        ...
    @FormIndex.setter
    def FormIndex(arg0: MSPyMstnPlatform.IPlotterForm, arg1: int) -> None:
        ...
    
    def GetActualName(self: MSPyMstnPlatform.IPlotterForm, value: MSPyBentley.WString) -> None:
        """
        Gets the form actual name.
        """
        ...
    
    def GetAutoRotate(self: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.PlotRotateDir:
        """
        Gets the form auto rotation direction.
        """
        ...
    
    def GetDefaultFormScale(self: MSPyMstnPlatform.IPlotterForm) -> float:
        """
        Gets the form default scale.
        """
        ...
    
    def GetFormIndex(self: MSPyMstnPlatform.IPlotterForm) -> int:
        """
        Gets the form index.
        """
        ...
    
    def GetLineStyleScale(self: MSPyMstnPlatform.IPlotterForm) -> float:
        """
        Gets the form line style scale.
        """
        ...
    
    def GetLineWeightScale(self: MSPyMstnPlatform.IPlotterForm) -> float:
        """
        Gets the form line weight scale.
        """
        ...
    
    def GetName(self: MSPyMstnPlatform.IPlotterForm, value: MSPyBentley.WString) -> None:
        """
        Gets the form name.
        """
        ...
    
    def GetOrientation(self: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.Print.PlotOrientation:
        """
        Gets the form orientation.
        """
        ...
    
    def GetPaperSizeNumber(self: MSPyMstnPlatform.IPlotterForm) -> int:
        """
        Gets the form paper size number.
        """
        ...
    
    def GetPrintableOffset(self: MSPyMstnPlatform.IPlotterForm, units: MSPyMstnPlatform.Print.PlotUnits) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets the form printable offset.
        """
        ...
    
    def GetPrintableSize(self: MSPyMstnPlatform.IPlotterForm, units: MSPyMstnPlatform.Print.PlotUnits) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets the form printable size.
        """
        ...
    
    def GetTotalSize(self: MSPyMstnPlatform.IPlotterForm, units: MSPyMstnPlatform.Print.PlotUnits) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets the form total size.
        """
        ...
    
    def GetUnits(self: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.Print.PlotUnits:
        """
        Gets the form units.
        """
        ...
    
    def IsFormSizeIdentical(self: MSPyMstnPlatform.IPlotterForm, plotterForm: MSPyMstnPlatform.IPlotterForm, comparePrintableArea: bool) -> bool:
        """
        Indicates whether this form has the same size as the specified form.
        """
        ...
    
    def IsNoneForm(self: MSPyMstnPlatform.IPlotterForm) -> bool:
        """
        Indicates whether this form is the reserved " NONE " form.
        
        Remark:
        s The NONE form is used in conjunction with InterPlot Server.
        """
        ...
    
    @property
    def LineStyleScale(arg0: MSPyMstnPlatform.IPlotterForm) -> float:
        ...
    @LineStyleScale.setter
    def LineStyleScale(arg0: MSPyMstnPlatform.IPlotterForm, arg1: float) -> None:
        ...
    
    @property
    def LineWeightScale(arg0: MSPyMstnPlatform.IPlotterForm) -> float:
        ...
    @LineWeightScale.setter
    def LineWeightScale(arg0: MSPyMstnPlatform.IPlotterForm, arg1: float) -> None:
        ...
    
    @property
    def Orientation(arg0: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.Print.PlotOrientation:
        ...
    @Orientation.setter
    def Orientation(arg0: MSPyMstnPlatform.IPlotterForm, arg1: MSPyMstnPlatform.Print.PlotOrientation) -> None:
        ...
    
    @property
    def PaperSizeNumber(arg0: MSPyMstnPlatform.IPlotterForm) -> int:
        ...
    @PaperSizeNumber.setter
    def PaperSizeNumber(arg0: MSPyMstnPlatform.IPlotterForm, arg1: int) -> None:
        ...
    
    def SetActualName(self: MSPyMstnPlatform.IPlotterForm, value: str) -> None:
        """
        Sets the form actual name.
        """
        ...
    
    def SetAutoRotate(self: MSPyMstnPlatform.IPlotterForm, value: MSPyMstnPlatform.PlotRotateDir) -> None:
        """
        Sets the form auto rotation direction.
        """
        ...
    
    def SetDefaultFormScale(self: MSPyMstnPlatform.IPlotterForm, value: float) -> None:
        """
        Sets the form default scale.
        """
        ...
    
    def SetFormIndex(self: MSPyMstnPlatform.IPlotterForm, value: int) -> None:
        """
        Sets the form index.
        """
        ...
    
    def SetLineStyleScale(self: MSPyMstnPlatform.IPlotterForm, value: float) -> None:
        """
        Sets the form line style scale.
        """
        ...
    
    def SetLineWeightScale(self: MSPyMstnPlatform.IPlotterForm, value: float) -> None:
        """
        Sets the form line weight scale.
        """
        ...
    
    def SetName(self: MSPyMstnPlatform.IPlotterForm, value: str) -> None:
        """
        Sets the form name.
        """
        ...
    
    def SetOrientation(self: MSPyMstnPlatform.IPlotterForm, value: MSPyMstnPlatform.Print.PlotOrientation) -> None:
        """
        Sets the form orientation.
        """
        ...
    
    def SetPaperSizeNumber(self: MSPyMstnPlatform.IPlotterForm, value: int) -> None:
        """
        Sets the form paper size number.
        """
        ...
    
    def SetPrintableOffset(self: MSPyMstnPlatform.IPlotterForm, value: MSPyBentleyGeom.DPoint2d, units: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the form printable offset.
        """
        ...
    
    def SetPrintableSize(self: MSPyMstnPlatform.IPlotterForm, value: MSPyBentleyGeom.DPoint2d, units: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the form printable size.
        """
        ...
    
    def SetTotalSize(self: MSPyMstnPlatform.IPlotterForm, value: MSPyBentleyGeom.DPoint2d, units: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the form total size.
        """
        ...
    
    def SetUnits(self: MSPyMstnPlatform.IPlotterForm, value: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the form units.
        """
        ...
    
    @property
    def Units(arg0: MSPyMstnPlatform.IPlotterForm) -> MSPyMstnPlatform.Print.PlotUnits:
        ...
    @Units.setter
    def Units(arg0: MSPyMstnPlatform.IPlotterForm, arg1: MSPyMstnPlatform.Print.PlotUnits) -> None:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotterForm) -> None:
        ...
    
class IPlotterFormList:
    """
    None
    """

    def AppendForm(self: MSPyMstnPlatform.IPlotterFormList) -> MSPyMstnPlatform.IPlotterForm:
        """
        Creates a new form in the list.
        """
        ...
    
    @property
    def CurrentForm(arg0: MSPyMstnPlatform.IPlotterFormList) -> MSPyMstnPlatform.IPlotterForm:
        ...
    @CurrentForm.setter
    def CurrentForm(arg0: MSPyMstnPlatform.IPlotterFormList, arg1: int) -> None:
        ...
    
    def GetCurrentForm(self: MSPyMstnPlatform.IPlotterFormList) -> MSPyMstnPlatform.IPlotterForm:
        """
        Gets the current form in the form list. May be NULL.
        """
        ...
    
    def GetCurrentFormIndex(self: MSPyMstnPlatform.IPlotterFormList) -> int:
        """
        Gets the index of the current form in the form list.
        """
        ...
    
    def GetDefaultFormIndex(self: MSPyMstnPlatform.IPlotterFormList) -> int:
        """
        Gets the index of the default form in the form list. Will be -1 if no
        default form defined.
        """
        ...
    
    def GetFormByIndex(self: MSPyMstnPlatform.IPlotterFormList, arg0: int) -> MSPyMstnPlatform.IPlotterForm:
        """
        Gets information about a particular form index.
        
        :param formListIndex:
        Index into the form list, or -1 for current form.
        """
        ...
    
    def GetFormByName(self: MSPyMstnPlatform.IPlotterFormList, searchName: str) -> tuple:
        """
        Gets information about a particular form name.
        
        :param searchName:
        Form name to search for.
        
        :param formListIndexP:
        Returned index into the form list of new form (may be NULL).
        """
        ...
    
    def GetFormByPaperSizeNumber(self: MSPyMstnPlatform.IPlotterFormList, searchPaperSizeNumber: int) -> tuple:
        """
        Gets information about a particular form paper size number.
        
        :param searchPaperSizeNumber:
        Paper size number to search for.
        
        :param formListIndexP:
        Returned index into the form list of new form (may be NULL).
        """
        ...
    
    def GetNumForms(self: MSPyMstnPlatform.IPlotterFormList) -> int:
        """
        Gets the number of forms defined for the plotter.
        """
        ...
    
    def RemoveAllForms(self: MSPyMstnPlatform.IPlotterFormList) -> None:
        """
        Removes all forms from the list.
        """
        ...
    
    def RemoveForm(self: MSPyMstnPlatform.IPlotterFormList, formListIndex: int) -> None:
        """
        Removes a form from the list.
        
        :param formListIndex:
        Index into the form list, or -1 for current form.
        """
        ...
    
    def SetCurrentForm(self: MSPyMstnPlatform.IPlotterFormList, formListIndex: int) -> None:
        """
        Sets the current form in the form list.
        
        :param formListIndex:
        Index into the form list, or -1 for current form.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPlotterFormList) -> None:
        ...
    
class IPopupMenuManager:
    """
    None
    """

    def AddTentativePopUpMenuProvider(self: MSPyMstnPlatform.IPopupMenuManager, provider: MSPyMstnPlatform.IPopupMenuProvider) -> None:
        ...
    
    def AddViewPopUpMenuProvider(self: MSPyMstnPlatform.IPopupMenuManager, provider: MSPyMstnPlatform.IPopupMenuProvider) -> None:
        ...
    
    def DropTentativePopUpMenuProvider(self: MSPyMstnPlatform.IPopupMenuManager, provider: MSPyMstnPlatform.IPopupMenuProvider) -> None:
        ...
    
    def DropViewPopUpMenuProvider(self: MSPyMstnPlatform.IPopupMenuManager, provider: MSPyMstnPlatform.IPopupMenuProvider) -> None:
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.IPopupMenuManager:
        ...
    
    Manager: IPopupMenuManager
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class IPopupMenuProvider:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.IPopupMenuProvider) -> None:
        ...
    
class IPreDynamicViewClipParam:
    """
    None
    """

    def GetModelRef(self: MSPyMstnPlatform.IPreDynamicViewClipParam) -> MSPyDgnPlatform.DgnModelRef:
        """
        Gets the modelRef for the model being printed.
        """
        ...
    
    def SetIgnoreClip(self: MSPyMstnPlatform.IPreDynamicViewClipParam, arg0: bool) -> None:
        """
        Indicate if dynamic view clip is to be ignored.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPreDynamicViewClipParam) -> None:
        ...
    
class IPrePrintDefinitionParam:
    """
    None
    """

    def GetIsPartOfPrintSet(self: MSPyMstnPlatform.IPrePrintDefinitionParam) -> bool:
        """
        True if printing as a set.
        """
        ...
    
    def GetIsPreview(self: MSPyMstnPlatform.IPrePrintDefinitionParam) -> bool:
        """
        True if print preview.
        """
        ...
    
    def GetIsWorker(self: MSPyMstnPlatform.IPrePrintDefinitionParam) -> bool:
        """
        True if called in the context of the print worker process.
        """
        ...
    
    def GetPrintDefinitionName(self: MSPyMstnPlatform.IPrePrintDefinitionParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print definition name.
        """
        ...
    
    def GetSourceFileName(self: MSPyMstnPlatform.IPrePrintDefinitionParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print definition source file specification.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrePrintDefinitionParam) -> None:
        ...
    
class IPrePrintSetDefinitionParam:
    """
    None
    """

    def GetIsPreview(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam) -> bool:
        """
        True if print preview.
        """
        ...
    
    def GetOutputFileName(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print output file name for this print definition.
        """
        ...
    
    def GetPlotter(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam) -> MSPyMstnPlatform.IPlotter:
        """
        Gets the plotter interface.
        """
        ...
    
    def GetPrintDefinitionFullName(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print definition full name, deliminated by forward slashes.
        """
        ...
    
    def GetPrintDefinitionName(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam, value: MSPyBentley.WString) -> None:
        """
        Gets the print definition name.
        """
        ...
    
    def GetPrintDefinitionSourceFspec(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam, value: MSPyMstnPlatform.Print.PlotFileSpec) -> None:
        """
        Gets the print definition source file specification.
        """
        ...
    
    def SetOutputFileName(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam, value: str) -> None:
        """
        Sets the print output file name for this print definition.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrePrintSetDefinitionParam) -> None:
        ...
    
class IPrintDefCollectStateParam:
    """
    None
    """

    def CustomProperties(*args, **kwargs):
        """
        CustomProperties(self: MSPyMstnPlatform.IPrintDefCollectStateParam) -> bmap<WString,MSPyMstnPlatform.Print.PlotPropValue,std::less<WString>,32,BentleyAllocator<Bstdcxx::bpair<WString const ,MSPyMstnPlatform.Print.PlotPropValue> > >
        
        Gets the collection of custom properties.
        """
        ...
    
    def GetRootModelRef(self: MSPyMstnPlatform.IPrintDefCollectStateParam) -> MSPyDgnPlatform.DgnModelRef:
        """
        Gets the root modelRef of the model for which design state is being
        collected.
        """
        ...
    
    def SetCustomProperty(self: MSPyMstnPlatform.IPrintDefCollectStateParam, name: str, value: str) -> None:
        """
        Sets a custom property in the print definition that will be created or
        updated from the collected design state.
        
        :param name:
        Custom property name.
        
        :param value:
        Custom property value. If NULL or empty, property will be removed
        if defined.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintDefCollectStateParam) -> None:
        ...
    
class IPrintDefCreateEventHandler:
    """
    None
    """

    def PrintDefCollectState(self: MSPyMstnPlatform.IPrintDefCreateEventHandler, param: MSPyMstnPlatform.IPrintDefCollectStateParam) -> None:
        """
        Called when design state is collected prior to creating a print
        definition.
        
        Remark:
        s This event allows a handler to insert custom properties into the
        print definition that is created or updated from the collected
        design state, using information from the active design file. These
        custom properties may be referenced in expressions for print
        definition names and print output file names.
        
        :param param:
        Event parameters.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintDefCreateEventHandler) -> None:
        ...
    
class IPrintDefinition:
    """
    None
    """

    def CustomProperties(*args, **kwargs):
        """
        CustomProperties(self: MSPyMstnPlatform.IPrintDefinition) -> bmap<WString,MSPyMstnPlatform.Print.PlotPropValue,std::less<WString>,32,BentleyAllocator<Bstdcxx::bpair<WString const ,MSPyMstnPlatform.Print.PlotPropValue> > >
        
        Gets/Sets custom properties.
        """
        ...
    
    def GetPaperSource(self: MSPyMstnPlatform.IPrintDefinition, value: MSPyBentley.WString) -> None:
        """
        Gets the paper source (e.g. tray name).
        """
        ...
    
    def GetPlotter(self: MSPyMstnPlatform.IPrintDefinition) -> MSPyMstnPlatform.Print.IPlotter:
        """
        Gets the print definition plotter.
        """
        ...
    
    def SetPaperSource(self: MSPyMstnPlatform.IPrintDefinition, value: str) -> int:
        """
        Sets the paper source (e.g. tray name).
        """
        ...
    
    def SetPlotter(self: MSPyMstnPlatform.IPrintDefinition, plotter: MSPyMstnPlatform.Print.IPlotter, preserveLayout: bool, identicalPlotters: bool) -> None:
        """
        Change the print definition plotter.
        
        :param plotter:
        New plotter. The caller retains ownership.
        
        :param preserveLayout:
        If true, will attempt to preserve existing paper size, scale, etc.
        
        :param identicalPlotters:
        If true, caller guarantees that Plotter instance is from identical
        .pltcfg.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintDefinition) -> None:
        ...
    
class IPrintDescription:
    """
    None
    """

    def CustomProperties(*args, **kwargs):
        """
        CustomProperties(self: MSPyMstnPlatform.IPrintDefinition) -> bmap<WString,MSPyMstnPlatform.Print.PlotPropValue,std::less<WString>,32,BentleyAllocator<Bstdcxx::bpair<WString const ,MSPyMstnPlatform.Print.PlotPropValue> > >
        
        Gets/Sets custom properties.
        """
        ...
    
    def EvaluateFenceFromTCB(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        ...
    
    def GetAutoCenterMode(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Gets the automatic centering mode.
        """
        ...
    
    def GetAutoFenceAlignMode(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.PlotAutoAlignMode:
        """
        Gets the automatic fence alignment mode.
        """
        ...
    
    def GetBorderComment(self: MSPyMstnPlatform.IPrintDescription, comment: MSPyBentley.WString) -> None:
        """
        Gets the border comment.
        """
        ...
    
    def GetColorMode(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.PlotColorMode:
        """
        Gets the print color mode.
        """
        ...
    
    def GetDesignScriptFspec(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the design script file specification.
        """
        ...
    
    def GetForm(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.IPlotterForm:
        """
        Gets the selected form.
        """
        ...
    
    def GetFormCP(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.IPlotterForm:
        """
        Gets the selected form.
        """
        ...
    
    def GetIsFullSheet(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Gets the full sheet mode.
        """
        ...
    
    def GetIsPrintTo3D(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Gets the 'print to 3D' flag.
        """
        ...
    
    def GetIsSilentMode(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print description is in silent mode.
        
        Remark:
        s In silent mode, no error, warning, or informational messages are
        generated.
        """
        ...
    
    def GetMasterModelName(self: MSPyMstnPlatform.IPrintDescription, modelName: MSPyBentley.WString) -> None:
        """
        Gets the print description master model name.
        """
        ...
    
    def GetMirrorAboutX(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the plot is mirrored about the X axis.
        """
        ...
    
    def GetMirrorAboutY(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the plot is mirrored about the Y axis.
        """
        ...
    
    def GetNumCopies(self: MSPyMstnPlatform.IPrintDescription) -> int:
        """
        Gets the number of copies to print.
        
        Remark:
        s Not all printer drivers support multiple copies.
        """
        ...
    
    def GetOriginX(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the X origin (left offset of plot from edge of printable area).
        """
        ...
    
    def GetOriginY(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the Y origin (bottom offset of plot from edge of printable area).
        """
        ...
    
    def GetPaperDimensions(self: MSPyMstnPlatform.IPrintDescription, printableSize: MSPyBentleyGeom.DPoint2d, totalSize: MSPyBentleyGeom.DPoint2d) -> None:
        """
        Gets printable and/or total paper size.
        
        :param printableSize:
        Size of usable paper area (overall - unprintable margins). May be
        NULL.
        
        :param totalSize:
        Overall paper size. May be NULL.
        """
        ...
    
    def GetPaperOrientation(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotOrientation:
        """
        Gets the paper orientation.
        """
        ...
    
    def GetPaperSource(self: MSPyMstnPlatform.IPrintDefinition, value: MSPyBentley.WString) -> None:
        """
        Gets the paper source (e.g. tray name).
        """
        ...
    
    def GetPenTableFspec(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the pen table file specification.
        """
        ...
    
    def GetPlotArea(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotAreaMode:
        """
        Gets the print area mode.
        """
        ...
    
    def GetPlotDestination(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotDestination:
        """
        Gets the print destination.
        """
        ...
    
    def GetPlotFlags(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.PlotFlags:
        """
        Gets the plot flags.
        """
        ...
    
    def GetPlotRescale(self: MSPyMstnPlatform.IPrintDescription) -> MSPyBentleyGeom.DPoint2d:
        """
        Gets the print rescale factor (post print rotation scaling).
        """
        ...
    
    def GetPlotRotation(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the angle of print rotation in radians (range -PI to PI).
        """
        ...
    
    def GetPlotSizeX(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the print X size (horizontal size).
        
        Remark:
        s Units are the print description units as set by SetUnits. Value
        is the horizontal size whether orientation is portrait or
        landscape.
        """
        ...
    
    def GetPlotSizeY(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the print Y size (vertical size).
        
        Remark:
        s Units are the print description units as set by SetUnits. Value
        is the horizontal size whether orientation is portrait or
        landscape.
        """
        ...
    
    def GetPlotter(self: MSPyMstnPlatform.IPrintDefinition) -> MSPyMstnPlatform.Print.IPlotter:
        """
        Gets the print definition plotter.
        """
        ...
    
    def GetPropPubMethod(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.PropPubMethod:
        """
        Gets the property publishing method.
        """
        ...
    
    def GetPropertyFilterFspec(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the property publishing filter file specification.
        """
        ...
    
    def GetRasterOptions(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotRasterOptions:
        """
        Gets the print description raster options.
        """
        ...
    
    def GetScaleMU(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the master units component of the print scale.
        """
        ...
    
    def GetScalePU(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the paper units component of the print scale.
        """
        ...
    
    def GetScaleRatio(self: MSPyMstnPlatform.IPrintDescription) -> float:
        """
        Gets the print scale ratio (ratio of master units to paper units).
        """
        ...
    
    def GetSystemPrinterName(self: MSPyMstnPlatform.IPrintDescription, name: MSPyBentley.WString) -> None:
        """
        Gets the Windows printer name.
        """
        ...
    
    def GetUnits(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.Print.PlotUnits:
        """
        Gets the print description units.
        """
        ...
    
    def GetViewDependentFence(self: MSPyMstnPlatform.IPrintDescription, dp2dArray: MSPyBentleyGeom.DPoint2dArray) -> None:
        ...
    
    def GetViewFlags(self: MSPyMstnPlatform.IPrintDescription) -> MSPyDgnPlatform.ViewFlags:
        """
        Gets the print view flags.
        """
        ...
    
    def GetViewGroupName(self: MSPyMstnPlatform.IPrintDescription, viewGroupName: MSPyBentley.WString) -> None:
        """
        Gets the print description view group name.
        """
        ...
    
    def GetViewIndependentFence(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetViewIndependentFence(self: MSPyMstnPlatform.IPrintDescription, dp3dArray: MSPyBentleyGeom.DPoint3dArray) -> None
        
        2. GetViewIndependentFence(self: MSPyMstnPlatform.IPrintDescription, dp3dArray: list) -> None
        """
        ...
    
    def GetViewIndependentWorkingFence(self: MSPyMstnPlatform.IPrintDescription, dp3dArray: MSPyBentleyGeom.DPoint3dArray) -> None:
        ...
    
    def GetViewIndex(self: MSPyMstnPlatform.IPrintDescription) -> int:
        """
        Gets the print description view index.
        """
        ...
    
    def InitializeFromIniFile(self: MSPyMstnPlatform.IPrintDescription, iniFileLfs: str) -> int:
        """
        Initialize a print description instance using settings from the active
        session and the specified legacy .ini print definition file.
        
        Remark:
        s The caller must ensure that the active design file and model are
        the same as when the print definition file was created.
        """
        ...
    
    def InitializeFromTCB(*args, **kwargs):
        """
        Overloaded function.
        
        1. InitializeFromTCB(self: MSPyMstnPlatform.IPrintDescription, pltcfgLfs: str) -> int
        
        Initializes a print description instance using settings from the
        active session and the specified printer driver configuration file.
        
        :param pltcfgLfs:
        Name of a printer driver configuration (.pltcfg or .plt) file to
        use to initialize the print description.
        
        2. InitializeFromTCB(self: MSPyMstnPlatform.IPrintDescription, plotter: MSPyMstnPlatform.Print.IPlotter) -> int
        
        Initializes a print description instance using settings from the
        active session and the specified printer driver configuration file.
        
        :param pltcfgLfs:
        Name of a printer driver configuration (.pltcfg or .plt) file to
        use to initialize the print description.
        """
        ...
    
    def IsColorModeDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print color mode control should be disabled.
        
        Remark:
        s Some cases require printing in true color mode.
        """
        ...
    
    def IsDefaultToRasterizedMode(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print description should default to rasterized mode.
        
        Remark:
        s Returns True if the maximum render mode is shaded, or point
        clouds are detected inside the active model or its references.
        """
        ...
    
    def IsFenceDefined(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print description contains a fence definition.
        """
        ...
    
    def IsMirrorDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the mirror control should be disabled.
        
        Remark:
        s Mirrored printing is not supported when camera is enabled, the
        view is rendered, or when printing to 3D.
        """
        ...
    
    def IsNonOrthoPlotRotationDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if only orthogonal print rotations are supported.
        
        Remark:
        s Non-orthogonal print rotations are not supported when camera is
        enabled, the view is rendered, or when printing to 3D.
        """
        ...
    
    def IsPlotRotation90or270(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print rotation is 90 or 270 degrees.
        """
        ...
    
    def IsPlotRotationOrthogonal(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print rotation is orthogonal (e.g. 0, 90, 180, or 270
        degrees).
        """
        ...
    
    def IsPrintFenceBoundaryDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the fence print boundary control should be disabled.
        
        Remark:
        s The fence boundary cannot be printed in rasterized mode, or if
        the print area mode is not Fence.
        """
        ...
    
    def IsPrintTo3DDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the 'print to 3D' control should be disabled.
        
        Remark:
        s 'Print to 3D' is only supported by the PDF printer driver, and
        when printing a 3D master design model.
        """
        ...
    
    def IsRasterized(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Gets the rasterized mode.
        """
        ...
    
    def IsRasterizedDisabled(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the rasterized control should be disabled.
        
        Remark:
        s Some cases, such as models containing point clouds, require
        rasterized printing. Other cases, such as vector printer drivers,
        require non-rasterized printing.
        """
        ...
    
    def IsRendered(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the maximum view mode is shaded, and the print
        description is not set to non-rasterized mode or 'print to 3D'.
        """
        ...
    
    def IsSheetDefined(self: MSPyMstnPlatform.IPrintDescription) -> bool:
        """
        Indicates if the print description contains a sheet definition.
        """
        ...
    
    def LevelOverrides(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.LevelOverrideInfoArray:
        """
        Gets/Sets the print description level overrides.
        """
        ...
    
    def Maximize(self: MSPyMstnPlatform.IPrintDescription) -> None:
        """
        Maximizes the print size (e.g. sets the print size to the largest
        possible value while still fitting within the selected form).
        """
        ...
    
    def Print(*args, **kwargs):
        """
        Overloaded function.
        
        1. Print(self: MSPyMstnPlatform.IPrintDescription) -> int
        
        Print to the device.
        
        2. Print(self: MSPyMstnPlatform.IPrintDescription, outFile: str) -> int
        
        Print to the device.
        
        3. Print(self: MSPyMstnPlatform.IPrintDescription, outFile: str, printSetProps: Dict[WString, MSPyMstnPlatform.Print.PlotPropValue,WString,32,Tuple[WString const , MSPyMstnPlatform.Print.PlotPropValue] ], printDefProps: Dict[WString, MSPyMstnPlatform.Print.PlotPropValue,WString,32,Tuple[WString const , MSPyMstnPlatform.Print.PlotPropValue] ]) -> int
        
        Print to the device.
        """
        ...
    
    def ReferenceOverrides(self: MSPyMstnPlatform.IPrintDescription) -> MSPyMstnPlatform.ReferenceOverrideInfoArray:
        """
        Gets/Sets the print description reference overrides.
        """
        ...
    
    def RotateForBestFit(self: MSPyMstnPlatform.IPrintDescription, allowOrientationChange: bool) -> None:
        """
        Sets either paper rotation or print rotation to achieve best fit.
        
        Remark:
        s Print origin and size are automatically adjusted.
        
        :param allowOrientationChange:
        True to allow paper orientation change.
        """
        ...
    
    def SelectSystemPrinter(self: MSPyMstnPlatform.IPrintDescription, printerName: str) -> int:
        """
        Sets the Windows printer name.
        """
        ...
    
    def SetAutoCenterMode(self: MSPyMstnPlatform.IPrintDescription, autoCenter: bool) -> None:
        """
        Sets the automatic centering mode.
        """
        ...
    
    def SetAutoFenceAlignMode(self: MSPyMstnPlatform.IPrintDescription, autoFenceAlignMode: MSPyMstnPlatform.PlotAutoAlignMode) -> None:
        """
        Sets the automatic fence alignment mode.
        """
        ...
    
    def SetBorderComment(self: MSPyMstnPlatform.IPrintDescription, comment: str) -> None:
        """
        Sets the border comment.
        """
        ...
    
    def SetColorMode(self: MSPyMstnPlatform.IPrintDescription, colorMode: MSPyMstnPlatform.PlotColorMode) -> None:
        """
        Sets the print color mode.
        """
        ...
    
    def SetDesignScriptFspec(self: MSPyMstnPlatform.IPrintDescription, value: MSPyMstnPlatform.Print.PlotFileSpec) -> None:
        """
        Sets the design script file specification.
        """
        ...
    
    def SetFenceFromFitRange(self: MSPyMstnPlatform.IPrintDescription, fitAll: bool) -> int:
        """
        Calculates a fence from the range of all elements in the active model
        and applies it to the print definition.
        
        :param fitAll:
        True to include references in the range calculation.
        """
        ...
    
    def SetFenceFromTCB(self: MSPyMstnPlatform.IPrintDescription) -> int:
        """
        Applies the fence defined in the active session to the print
        description.
        """
        ...
    
    def SetFormName(self: MSPyMstnPlatform.IPrintDescription, value: str) -> int:
        """
        Sets the form name.
        """
        ...
    
    def SetFormSizeX(self: MSPyMstnPlatform.IPrintDescription, x: float) -> None:
        """
        Sets the X size (horizontal size) of the form.
        
        Remark:
        s Changes the paper size, not the print size. Units are assumed to
        be print description units as set by SetUnits. Value is the
        horizontal size whether orientation is portrait or landscape.
        """
        ...
    
    def SetFormSizeY(self: MSPyMstnPlatform.IPrintDescription, y: float) -> None:
        """
        Sets the Y size (vertical size) of the form.
        
        Remark:
        s Changes the paper size, not the print size. Units are assumed to
        be print description units as set by SetUnits. Value is the
        vertical size whether orientation is portrait or landscape.
        """
        ...
    
    def SetIsFullSheet(self: MSPyMstnPlatform.IPrintDescription, value: bool) -> None:
        """
        Sets the full sheet mode.
        """
        ...
    
    def SetIsPrintTo3D(self: MSPyMstnPlatform.IPrintDescription, isPrintTo3D: bool) -> None:
        """
        Sets the 'print to 3D' flag.
        """
        ...
    
    def SetIsSilentMode(self: MSPyMstnPlatform.IPrintDescription, value: bool) -> None:
        """
        Sets the print description silent mode.
        
        Remark:
        s In silent mode, no error, warning, or informational messages are
        generated.
        """
        ...
    
    def SetMirrorAboutX(self: MSPyMstnPlatform.IPrintDescription, isMirroredAboutX: bool) -> None:
        """
        Indicate that the plot is mirrored about the X axis.
        """
        ...
    
    def SetMirrorAboutY(self: MSPyMstnPlatform.IPrintDescription, isMirroredAboutY: bool) -> None:
        """
        Indicate that the plot is mirrored about the Y axis.
        """
        ...
    
    def SetNumCopies(self: MSPyMstnPlatform.IPrintDescription, numCopies: int) -> None:
        """
        Sets the number of copies to print.
        
        Remark:
        s Not all printer drivers support multiple copies.
        """
        ...
    
    def SetOriginX(self: MSPyMstnPlatform.IPrintDescription, x: float) -> None:
        """
        Sets the X origin (left offset of plot from edge of printable area).
        
        Remark:
        s The print scale and size are automatically adjusted if
        necessary. Units are assumed to be current print description units
        as set by SetUnits. Value is the horizontal offset whether
        orientation is portrait or landscape.
        """
        ...
    
    def SetOriginY(self: MSPyMstnPlatform.IPrintDescription, y: float) -> None:
        """
        Sets the Y origin (bottom offset of plot from edge of printable area).
        
        Remark:
        s The print scale and size are automatically adjusted if
        necessary. Units are assumed to be current print description units
        as set by SetUnits. Value is the vertical offset whether
        orientation is portrait or landscape.
        """
        ...
    
    def SetPaperOrientation(self: MSPyMstnPlatform.IPrintDescription, orientation: MSPyMstnPlatform.Print.PlotOrientation) -> None:
        """
        Sets the paper orientation.
        """
        ...
    
    def SetPaperSource(self: MSPyMstnPlatform.IPrintDefinition, value: str) -> int:
        """
        Sets the paper source (e.g. tray name).
        """
        ...
    
    def SetPenTableFspec(self: MSPyMstnPlatform.IPrintDescription, value: MSPyMstnPlatform.Print.PlotFileSpec) -> None:
        """
        Sets the pen table file specification.
        """
        ...
    
    def SetPlotArea(self: MSPyMstnPlatform.IPrintDescription, plotArea: MSPyMstnPlatform.Print.PlotAreaMode) -> int:
        """
        Sets the print area mode.
        """
        ...
    
    def SetPlotDestination(self: MSPyMstnPlatform.IPrintDescription, destination: MSPyMstnPlatform.Print.PlotDestination) -> None:
        """
        Sets the print destination.
        """
        ...
    
    def SetPlotFlags(self: MSPyMstnPlatform.IPrintDescription, plotFlags: MSPyMstnPlatform.PlotFlags) -> None:
        """
        Sets the plot flags.
        """
        ...
    
    def SetPlotRescale(self: MSPyMstnPlatform.IPrintDescription, plotRescale: MSPyBentleyGeom.DPoint2d) -> None:
        """
        Sets the print rescale factor (post print rotation scaling).
        """
        ...
    
    def SetPlotRotation(self: MSPyMstnPlatform.IPrintDescription, angleRads: float) -> None:
        """
        Sets the print rotation in radians (range -PI to PI).
        
        Remark:
        s Print origin and size are automatically adjusted.
        """
        ...
    
    def SetPlotSizeX(self: MSPyMstnPlatform.IPrintDescription, x: float) -> None:
        """
        Sets the print X size (horizontal size).
        
        Remark:
        s The print size (X and Y) must fit within the selected form size.
        Units are assumed to be print description units as set by
        SetUnits. Value is the horizontal size whether orientation is
        portrait or landscape. Print scale, Y size, and origin are
        automatically adjusted.
        """
        ...
    
    def SetPlotSizeY(self: MSPyMstnPlatform.IPrintDescription, y: float) -> None:
        """
        Sets the print Y size (vertical size).
        
        Remark:
        s The print size (X and Y) must fit within the selected form size.
        Units are assumed to be print description units as set by
        SetUnits. Value is the horizontal size whether orientation is
        portrait or landscape. Print scale, X size, and origin are
        automatically adjusted.
        """
        ...
    
    def SetPlotter(self: MSPyMstnPlatform.IPrintDefinition, plotter: MSPyMstnPlatform.Print.IPlotter, preserveLayout: bool, identicalPlotters: bool) -> None:
        """
        Change the print definition plotter.
        
        :param plotter:
        New plotter. The caller retains ownership.
        
        :param preserveLayout:
        If true, will attempt to preserve existing paper size, scale, etc.
        
        :param identicalPlotters:
        If true, caller guarantees that Plotter instance is from identical
        .pltcfg.
        """
        ...
    
    def SetPropPubMethod(self: MSPyMstnPlatform.IPrintDescription, value: MSPyMstnPlatform.PropPubMethod) -> None:
        """
        Sets the property publishing method.
        """
        ...
    
    def SetPropertyFilterFspec(self: MSPyMstnPlatform.IPrintDescription, value: MSPyMstnPlatform.Print.PlotFileSpec) -> None:
        """
        Sets the property publishing filter file specification.
        """
        ...
    
    def SetRasterOptions(self: MSPyMstnPlatform.IPrintDescription, rasterOptions: MSPyMstnPlatform.Print.PlotRasterOptions) -> None:
        """
        Sets the print description raster options.
        """
        ...
    
    def SetRasterized(self: MSPyMstnPlatform.IPrintDescription, isRasterized: bool) -> None:
        """
        Sets the rasterized mode.
        """
        ...
    
    def SetScale(self: MSPyMstnPlatform.IPrintDescription, scaleMasterUnits: float, scalePaperUnits: float) -> None:
        """
        Sets the print scale using separate master units and paper units
        components.
        
        Remark:
        s Print origin and size are automatically adjusted.
        """
        ...
    
    def SetScaleRatio(self: MSPyMstnPlatform.IPrintDescription, value: float) -> None:
        """
        Sets the print scale ratio (ratio of master units to paper units).
        
        Remark:
        s Print origin and size are automatically adjusted.
        """
        ...
    
    def SetUnits(self: MSPyMstnPlatform.IPrintDescription, units: MSPyMstnPlatform.Print.PlotUnits) -> None:
        """
        Sets the print description units.
        """
        ...
    
    def SetViewDependentFence(self: MSPyMstnPlatform.IPrintDescription, dp2dArray: MSPyBentleyGeom.DPoint2dArray) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def SetViewFlags(self: MSPyMstnPlatform.IPrintDescription, viewFlags: MSPyDgnPlatform.ViewFlags) -> None:
        """
        Sets the print view flags.
        """
        ...
    
    def SetViewIndependentFence(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetViewIndependentFence(self: MSPyMstnPlatform.IPrintDescription, dp3dArray: MSPyBentleyGeom.DPoint3dArray) -> MSPyDgnPlatform.BentleyStatus
        
        2. SetViewIndependentFence(self: MSPyMstnPlatform.IPrintDescription, dp3dArray: list) -> MSPyDgnPlatform.BentleyStatus
        """
        ...
    
    def SetViewIndex(self: MSPyMstnPlatform.IPrintDescription, viewIndex: int) -> int:
        """
        Sets the print description view index.
        
        :param viewIndex:
        view index (range 0-7).
        """
        ...
    
    def UpdateAfterDeviceInfoChange(self: MSPyMstnPlatform.IPrintDescription) -> None:
        """
        Updates the print description following a change to the Windows
        printer device settings stored in the underlying Plotter instance,
        when that change did not include a switch to a different Windows
        printer. Settings that may have changed include the form name, form
        size, orientation, and number of copies.
        """
        ...
    
    def UpdateAfterPrinterChange(self: MSPyMstnPlatform.IPrintDescription, preserveRasterQuality: bool) -> None:
        """
        Updates the print description following a change to the Windows
        printer in the underlying Plotter instance.
        
        :param preserveRasterQuality:
        True to keep the current raster quality factor.
        """
        ...
    
    def UpdateFromTCB(self: MSPyMstnPlatform.IPrintDescription) -> int:
        """
        Updates the print description from the active MicroStation session.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintDescription) -> None:
        ...
    
class IPrintEngine:
    """
    None
    """

    def Capability(self: MSPyMstnPlatform.IPrintEngine) -> MSPyMstnPlatform.IPrintEngineCapability:
        """
        Gets/Sets print engine capabilities.
        """
        ...
    
    def GetLicenseLabel(self: MSPyMstnPlatform.IPrintEngine, label: MSPyBentley.WString) -> None:
        """
        Get the license string to be added to the plot border label.
        """
        ...
    
    def GetNumCopies(self: MSPyMstnPlatform.IPrintEngine) -> int:
        """
        Gets the number of copies.
        """
        ...
    
    def GetOutputFileSpec(self: MSPyMstnPlatform.IPrintEngine) -> MSPyMstnPlatform.Print.PlotFileSpec:
        """
        Gets the output file specification.
        """
        ...
    
    def GetPrintDefinitionName(self: MSPyMstnPlatform.IPrintEngine, value: MSPyBentley.WString) -> None:
        """
        Gets the name of the current print definition.
        """
        ...
    
    def GetPrintDefinitionPropertyValue(self: MSPyMstnPlatform.IPrintEngine, name: str, value: MSPyMstnPlatform.Print.PlotPropValue) -> None:
        """
        Gets the value of the specified property for the current print
        definition.
        """
        ...
    
    def GetPrintDefinitionSourceFspec(self: MSPyMstnPlatform.IPrintEngine, value: MSPyMstnPlatform.Print.PlotFileSpec) -> None:
        """
        Gets the source file specification of the current print definition.
        """
        ...
    
    def GetPrintSetPropertyValue(self: MSPyMstnPlatform.IPrintEngine, name: str, value: MSPyMstnPlatform.Print.PlotPropValue) -> None:
        """
        Gets the value of the specified property for the current print set.
        """
        ...
    
    def GetTransform(self: MSPyMstnPlatform.IPrintEngine, tag: MSPyMstnPlatform.PlotTagTransform) -> MSPyBentleyGeom.Transform:
        """
        Gets the value of the requested print transform.
        """
        ...
    
    def IsLegacyPreview(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates if legacy print preview (e.g. plotdlg) is currently in
        progress.
        """
        ...
    
    def IsPartOfPrintSet(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates if printing as a set.
        """
        ...
    
    def IsPlotBorderLicenseLabelNeeded(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates whether a license string must be added to the plot border
        label.
        """
        ...
    
    def IsPreview(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates if print preview is currently in progress.
        """
        ...
    
    def IsRasterized(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates if printing in rasterized mode.
        """
        ...
    
    def WasGeometryOutput(self: MSPyMstnPlatform.IPrintEngine) -> bool:
        """
        Indicates whether any geometry was output during print processing.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintEngine) -> None:
        ...
    
class IPrintEngineCapability:
    """
    None
    """

    @property
    def EnableDynamicPlot(arg0: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        ...
    @EnableDynamicPlot.setter
    def EnableDynamicPlot(arg0: MSPyMstnPlatform.IPrintEngineCapability, arg1: bool) -> None:
        ...
    
    @property
    def EnablePostStrokeLineStyles(arg0: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        ...
    @EnablePostStrokeLineStyles.setter
    def EnablePostStrokeLineStyles(arg0: MSPyMstnPlatform.IPrintEngineCapability, arg1: bool) -> None:
        ...
    
    @property
    def EnablePropertyMap(arg0: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        ...
    @EnablePropertyMap.setter
    def EnablePropertyMap(arg0: MSPyMstnPlatform.IPrintEngineCapability, arg1: bool) -> None:
        ...
    
    @property
    def EnableSortOrder(arg0: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        ...
    @EnableSortOrder.setter
    def EnableSortOrder(arg0: MSPyMstnPlatform.IPrintEngineCapability, arg1: bool) -> None:
        ...
    
    def GetEnableDynamicPlot(self: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        """
        @deprecated Obsolete; always False.
        """
        ...
    
    def GetEnablePostStrokeLineStyles(self: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        """
        Indicates if post-stroke line style capability is enabled.
        """
        ...
    
    def GetEnablePropertyMap(self: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        """
        Indicates if property map capability is enabled.
        """
        ...
    
    def GetEnableSortOrder(self: MSPyMstnPlatform.IPrintEngineCapability) -> bool:
        """
        Indicates if non-rasterized sort order capability is enabled.
        """
        ...
    
    def SetEnableDynamicPlot(self: MSPyMstnPlatform.IPrintEngineCapability, value: bool) -> None:
        """
        @deprecated Obsolete; has no effect.
        """
        ...
    
    def SetEnablePostStrokeLineStyles(self: MSPyMstnPlatform.IPrintEngineCapability, value: bool) -> None:
        """
        Enable or disable post-stroke line style capability.
        """
        ...
    
    def SetEnablePropertyMap(self: MSPyMstnPlatform.IPrintEngineCapability, value: bool) -> None:
        """
        Enable or disable property map capability.
        """
        ...
    
    def SetEnableSortOrder(self: MSPyMstnPlatform.IPrintEngineCapability, value: bool) -> None:
        """
        Enable or disable non-rasterized sort order capability.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintEngineCapability) -> None:
        ...
    
class IPrintEventHandler:
    """
    None
    """

    def BeginPrintPage(self: MSPyMstnPlatform.IPrintEventHandler, param: MSPyMstnPlatform.IBeginPrintPageParam) -> None:
        ...
    
    def EndPrintPage(self: MSPyMstnPlatform.IPrintEventHandler, param: MSPyMstnPlatform.IEndPrintPageParam) -> None:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintEventHandler) -> None:
        ...
    
class IPrintEventHandler2:
    """
    None
    """

    def BeginElement(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotBeginElementParam) -> None:
        """
        Gives applications the opportunity to replace the element being
        plotted, or defer the element with an assigned display list priority.
        
        Remark:
        s Priority may be assigned without replacing the element. The
        input element descriptor may not be modified in any way. For
        example, this method may implement text substution or patterning
        appending linkages or changing the text characters. Since copying
        element descriptors hurts performance, simple symbology changes
        are best performed in the Resymbolize event.
        
        :param param:
        Event parameters.
        """
        ...
    
    def EndElement(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotEndElementParam) -> None:
        """
        Called when the print engine has finished output and post-processing
        of the specified element.
        
        Remark:
        s The EndElement event is invoked for every element seen by
        BeginElement, even if that element was not printed.
        
        :param param:
        Event parameters.
        """
        ...
    
    def GetColorTable(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotGetColorTableParam) -> None:
        """
        Called just after the print engine gets the color table for a model.
        
        Remark:
        s Applications may use this event to override the default color
        table. Printing-specific overrides such as automatic white-to-
        black inversion and printer-driver-defined output colors are
        applied after this method returns.
        
        :param param:
        Event parameters.
        """
        ...
    
    def OnNewModelRef(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPreModelParam) -> None:
        """
        Called before the specified model is printed, and before any of the
        transformations and other settings related to the model have been set
        up.
        
        Remark:
        s This event provides the opportunity to prevent the model from
        printing before any of the setup processing has begun.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PostElementOutput(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPostElementOutputParam) -> None:
        """
        Called after the specified element has been output.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PostElementScan(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPostElementScanParam) -> None:
        """
        Called just after the print engine finishes the element scanning loop.
        
        Remark:
        s When printing in rasterized mode, this event is called once per
        tile.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PostPlotFileClosed(self: MSPyMstnPlatform.IPrintEventHandler2) -> None:
        """
        Called during cleanup operations after plot processing has finished.
        
        Remark:
        s The plot buffer has been flushed, and the plot file (if one) has
        been closed. Post-plot operating system commands (if any) have not
        yet been executed. This event is not called for print preview, or
        in the event of plot failure.
        """
        ...
    
    def PostPlotFileOpen(self: MSPyMstnPlatform.IPrintEventHandler2) -> None:
        """
        Called during cleanup operations after plot processing has finished.
        
        Remark:
        s The plot buffer has not been flushed, and the plot file (if one)
        is still open. It is not called for print preview, or in the event
        of plot failure.
        """
        ...
    
    def PreDynamicViewClip(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPreDynamicViewClipParam) -> None:
        """
        Called before the plot begins to acquire the dynamic view clip for a
        model.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PreElementOutput(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPreElementOutputParam) -> None:
        """
        Called before the specified element has been output.
        
        Remark:
        s Depending on the actions of other print event handlers, this
        element may be different than the one seen in the BeginElement
        event. Elements ignored by BeginElement handlers will not be seen
        by the PreElementOutput/PostElementOutput events.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PreElementScan(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPreElementScanParam) -> None:
        """
        Called just before the print engine begins the element scanning loop.
        
        Remark:
        s At this point, the print engine and printer driver are fully
        initialized. Note that when printing in rasterized mode, this
        event is called once for each tile.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PreModel(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPreModelParam) -> None:
        """
        Called before the print engine begins scanning elements in the
        specified model, after plot structure setup for the model has been
        completed.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PrePenChart(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPlotPrePenChartParam) -> None:
        """
        Called during print engine setup, before the print engine plotter is
        completely configured.
        
        Remark:
        s Non-system-printer drivers have been loaded, but have not yet
        been initialized. This event gives applications the opportunity to
        override the printer driver's pen setup before the print engine
        configures its pen chart and color table.
        
        :param param:
        Event parameters.
        """
        ...
    
    def PrePrintDefinition(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.IPrePrintDefinitionParam) -> None:
        """
        Called before processing each print definition.
        
        Remark:
        s Invoked after the source file has been loaded into the worker
        process and before the print output file name has been determined
        for Print Organizer. Primary purpose is to obtain the print output
        file name in the context of the Print Organizer worker process.
        
        :param param:
        Event parameters.
        """
        ...
    
    def Resymbolize(self: MSPyMstnPlatform.IPrintEventHandler2, param: MSPyMstnPlatform.Print.IPlotResymbolizeParam) -> None:
        """
        Gives applications the opportunity to modify the current output
        symbology.
        
        Remark:
        s This event may be invoked multiple times for a given element.
        
        :param param:
        Event parameters.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintEventHandler2) -> None:
        ...
    
class IPrintSetEventHandler:
    """
    None
    """

    def BeginPrintSet(self: MSPyMstnPlatform.IPrintSetEventHandler, param: MSPyMstnPlatform.IBeginPrintSetParam) -> int:
        """
        Called before the print engine begins work on the first page of a
        print set.
        
        Remark:
        s This event is not invoked unless printing as a set to printer
        drivers that support set printing (i.e. PDF). This event is only
        called within the interative (primary) process. It is not invoked
        within the Print Organizer worker process. Neither the global
        print engine nor its internal Plotter instance has been created
        yet, so no IPrintEngine or IPlotter calls are permitted during
        this event.
        
        :param param:
        Event parameters.
        
        :returns:
        SUCCESS to continue print processing; ERROR to abort the plot.
        """
        ...
    
    def EndPrintSet(self: MSPyMstnPlatform.IPrintSetEventHandler, param: MSPyMstnPlatform.IEndPrintSetParam) -> int:
        """
        Called after the last page in a print set has been completed.
        
        Remark:
        s This event is not invoked unless printing as a set, to printer
        drivers that support set printing (i.e. PDF). This event is only
        called within the interative (primary) process. It is not invoked
        within the Print Organizer worker process. This event is called
        even if the print job fails. Use param.GetIsSuccess to query the
        job status.
        
        :param param:
        Event parameters.
        
        :returns:
        SUCCESS or ERROR.
        """
        ...
    
    def PrePrintSetDefinition(self: MSPyMstnPlatform.IPrintSetEventHandler, param: MSPyMstnPlatform.IPrePrintSetDefinitionParam) -> None:
        """
        Called before processing each print definition when printing as a set.
        
        Remark:
        s This event is not invoked unless printing as a set, to printer
        drivers that support set printing (i.e. PDF). This event is only
        called within the interative (primary) process. It is not invoked
        within the Print Organizer worker process. Important:The
        capability to change the output file name here is provided for use
        by printer drivers only. Normal print event handlers should *not*
        attempt to change the output file name during this event.
        
        :param param:
        Event parameters.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrintSetEventHandler) -> None:
        ...
    
class IPrinterDriverBase:
    """
    None
    """

    def BorderText(self: MSPyMstnPlatform.IPrinterDriverBase, param: MSPyMstnPlatform.IPlotBorderTextParam) -> None:
        """
        Draw border text.
        """
        ...
    
    def CheckStop(self: MSPyMstnPlatform.IPrinterDriverBase) -> bool:
        """
        Periodically called to give the driver the opportunity to abort print
        processing.
        
        :returns:
        false to continue processing; true to abort.
        """
        ...
    
    def DriverBeginPlot(self: MSPyMstnPlatform.IPrinterDriverBase, param: MSPyMstnPlatform.IDriverBeginPlotParam) -> int:
        """
        Called just before print processing begins.
        
        :returns:
        SUCCESS to continue print processing; ERROR to abort.
        """
        ...
    
    def DriverEndPlot(self: MSPyMstnPlatform.IPrinterDriverBase, param: MSPyMstnPlatform.IDriverEndPlotParam) -> int:
        """
        Last IPrinterDriver method called before finishing print processing.
        
        Remark:
        s The output file is still open and the driver may still write to
        it. Note that this method is called regardless of whether the job
        succeeded or failed.
        
        :returns:
        SUCCESS to continue print processing; ERROR to abort.
        """
        ...
    
    def DriverLoad(self: MSPyMstnPlatform.IPrinterDriverBase, plotter: MSPyMstnPlatform.IPlotter) -> int:
        """
        Called after the printer driver configuration file is opened and all
        .pltcfg commands have been executed.
        
        Remark:
        s May be called more than once during the lifespan of the DLL.
        
        :returns:
        SUCCESS to continue loading the driver; ERROR to abort.
        """
        ...
    
    def DriverPreBeginPlot(self: MSPyMstnPlatform.IPrinterDriverBase, param: MSPyMstnPlatform.IDriverPreBeginPlotParam) -> int:
        """
        Called for each plot, before DriverBeginPlot, just before
        IPrintEventHandler.PrePenChart.
        
        Remark:
        s The print engine has not yet been completely initialized.
        
        :returns:
        SUCCESS to continue print processing; ERROR to abort.
        """
        ...
    
    def DriverPreLoad(self: MSPyMstnPlatform.IPrinterDriverBase) -> int:
        """
        Called after the printer driver configuration file is opened, but
        before any .pltcfg commands have been executed. Drivers are expected
        to initialize all options configurable via .pltcfg commands to default
        values.
        
        Remark:
        s May be called more than once during the lifespan of the DLL.
        
        :returns:
        SUCCESS to continue loading the driver; ERROR to abort.
        """
        ...
    
    def DriverUnload(self: MSPyMstnPlatform.IPrinterDriverBase) -> None:
        """
        Called when the printer driver configuration file is closed.
        
        Remark:
        s May be called more than once during the lifespan of the DLL.
        """
        ...
    
    def PopClip(self: MSPyMstnPlatform.IPrinterDriverBase) -> None:
        """
        Restore the previous device clipping boundary.
        """
        ...
    
    def PushClip(self: MSPyMstnPlatform.IPrinterDriverBase, param: MSPyMstnPlatform.IPlotClipParam) -> None:
        """
        Push a new device clipping boundary.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrinterDriverBase) -> None:
        ...
    
class IPrinterDriverOutputPath:
    """
    None
    """

    def OutputLinestring(self: MSPyMstnPlatform.IPrinterDriverOutputVector, param: MSPyMstnPlatform.IPlotDPoints) -> None:
        """
        Output linestring.
        """
        ...
    
    def OutputPath(self: MSPyMstnPlatform.IPrinterDriverOutputPath, param: MSPyMstnPlatform.IPlotPathParam) -> None:
        """
        Output path composed of lines and cubic bezier curves.
        """
        ...
    
    def OutputPolygonSet(self: MSPyMstnPlatform.IPrinterDriverOutputVector, param: MSPyMstnPlatform.IPlotPolygonSetParam) -> None:
        """
        Output one or more filled polygons as a set.
        """
        ...
    
    def SetColor(self: MSPyMstnPlatform.IPrinterDriverOutputVector, color: MSPyDgnPlatform.RgbaColorDef) -> None:
        """
        Set output color in RGBA.
        """
        ...
    
    def SetLineCap(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineCap: MSPyMstnPlatform.PlotLineCap) -> None:
        """
        Set output line cap.
        """
        ...
    
    def SetLineJoin(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineJoin: MSPyMstnPlatform.PlotLineJoin) -> None:
        """
        Set output line join.
        """
        ...
    
    def SetLineStyleIndex(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineStyleIndex: int) -> None:
        """
        Set output line style index.
        """
        ...
    
    def SetWidth(self: MSPyMstnPlatform.IPrinterDriverOutputVector, widthDots: int) -> None:
        """
        Set output width in dots.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrinterDriverOutputPath) -> None:
        ...
    
class IPrinterDriverOutputRaster:
    """
    None
    """

    def OutputRaster(self: MSPyMstnPlatform.IPrinterDriverOutputRaster, param: MSPyMstnPlatform.IPlotRasterParam) -> None:
        """
        Output raster.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrinterDriverOutputRaster) -> None:
        ...
    
class IPrinterDriverOutputVector:
    """
    None
    """

    def OutputLinestring(self: MSPyMstnPlatform.IPrinterDriverOutputVector, param: MSPyMstnPlatform.IPlotDPoints) -> None:
        """
        Output linestring.
        """
        ...
    
    def OutputPolygonSet(self: MSPyMstnPlatform.IPrinterDriverOutputVector, param: MSPyMstnPlatform.IPlotPolygonSetParam) -> None:
        """
        Output one or more filled polygons as a set.
        """
        ...
    
    def SetColor(self: MSPyMstnPlatform.IPrinterDriverOutputVector, color: MSPyDgnPlatform.RgbaColorDef) -> None:
        """
        Set output color in RGBA.
        """
        ...
    
    def SetLineCap(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineCap: MSPyMstnPlatform.PlotLineCap) -> None:
        """
        Set output line cap.
        """
        ...
    
    def SetLineJoin(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineJoin: MSPyMstnPlatform.PlotLineJoin) -> None:
        """
        Set output line join.
        """
        ...
    
    def SetLineStyleIndex(self: MSPyMstnPlatform.IPrinterDriverOutputVector, lineStyleIndex: int) -> None:
        """
        Set output line style index.
        """
        ...
    
    def SetWidth(self: MSPyMstnPlatform.IPrinterDriverOutputVector, widthDots: int) -> None:
        """
        Set output width in dots.
        """
        ...
    
    def __init__(self: MSPyMstnPlatform.IPrinterDriverOutputVector) -> None:
        ...
    
class IPyModalDialogEvents:
    """
    None
    """

    def OnDialogClosed(self: MSPyMstnPlatform.IPyModalDialogEvents, arg0: str, arg1: MSPyMstnPlatform.PyMsdDialogBoxResult) -> None:
        ...
    
    def OnDialogOpened(self: MSPyMstnPlatform.IPyModalDialogEvents, arg0: str) -> int:
        ...
    
    def __init__(self: MSPyMstnPlatform.IPyModalDialogEvents) -> None:
        ...
    
class ISessionMgr:
    """
    None
    """

    ActiveDgnFile: DgnFile
    
    ActiveDgnModel: DgnModel
    
    ActiveDgnModelRef: DgnModelRef
    
    @staticmethod
    def AddSessionMonitor(monitor: MSPyMstnPlatform.SessionMonitor) -> None:
        """
        Add a new SessionMonitor.
        
        :param mon:
        the new SessionMonitor object. This object will be notified when
        session-related events occur until it is dropped using
        DropSessionMonitor. Ownership of the monitor object is *not*
        transferred to the SessionMgr. The caller must ensure this object
        remains valid until it is dropped.
        
        See also:
        DropSessionMonitor.
        """
        ...
    
    def CreateNewDgnFile(self: MSPyMstnPlatform.ISessionMgr, newName: MSPyBentley.WString, defaultDir: str, switchToNewFile: bool) -> int:
        """
        Prompts the user to create a new DGN file and then optionally makes it
        the Master DGN.
        
        :returns:
        SUCCESS if a file was created; otherwise, a non-zero error status
        if the user cancelled, or an error status code based on
        DGNOPEN_STATUS_BASE if the file creation failed.
        
        :param newName:
        The file path of the newly created file if successful
        
        :param defaultDir:
        Optional:The default directory.
        
        :param switchToNewFile:
        Make the new file the Master DGN?
        
        Remark:
        s This function works with MSDocumentManager to locate and manage
        files. In stand-alone MicroStation, the default directory is
        _DGNDIR, if *defaultDir* is not specified. The default seed file
        is MS_DESIGNSEED or the previously selected seed file and the
        default seed file directory is MS_SEEDFILES.
        
        Remark:
        s If *switchToNewFile* is <code>true</code>, then this function
        will call #FindDesignFile (*allowCancel=<code>true</code>)*
        followed by #SwitchToNewFile.
        
        See also:
        SwitchToNewFile
        """
        ...
    
    @staticmethod
    def DropSessionMonitor(monitor: MSPyMstnPlatform.SessionMonitor) -> None:
        """
        Add a new SessionMonitor.
        
        :param mon:
        the new SessionMonitor object. This object will be notified when
        session-related events occur until it is dropped using
        DropSessionMonitor. Ownership of the monitor object is *not*
        transferred to the SessionMgr. The caller must ensure this object
        remains valid until it is dropped.
        
        See also:
        DropSessionMonitor.
        """
        ...
    
    def FindDesignFile(self: MSPyMstnPlatform.ISessionMgr, inFileName: str, inModelName: str, fileType: int, allowCancel: bool) -> tuple:
        """
        Opens a file from a specified file name or path.
        
        :param inFileName:
        The name or path of the file to be opened.
        
        :param inModelName:
        Will be non-NULL if a specific model will be opened.
        
        :param fileType:
        The format of the file.
        
        :param allowCancel:
        Pass <code>true</code> if MicroStation should prompt the user to
        accept or cancel if the file cannot be opened read-write because
        of a sharing violation. If *allowCancel* is <code>false</code>,
        the file is opened read-only without prompting the user.
        
        Remark:
        s This function works with MSDocumentManager to locate and manage
        files. In stand-alone MicroStation, if *inFilename* is not a
        complete file path, this function will look for it in the
        directories defined by MS_DEF.
        
        Remark:
        s The newly opened file does *not* become the MasterDGN. Call
        #SwitchToNewFile to make the resulting document the MasterDGN.
        
        Remark:
        s If the file is read-only on disk, then it will be opened read-
        only. Otherwise, this function will try to open the file read-
        write. If the file cannot be opened read-write because of a
        sharing violation, then it is opened read-only. If the file is not
        in a native MicroStation file format, then it will be opened read-
        only.
        
        Remark:
        s If the file is the same as the MasterDGN, it is first closed and
        the current session is ended.
        
        See also:
        SwitchToNewFile
        
        
        
        Returns (Tuple, 0):
        A pointer to the newly opened file if successful, or NULL if the
        file could not be found or opened. See *status.*
        
        Returns (Tuple, 1):
        status.
        SUCCESS if the file was opened
        """
        ...
    
    @staticmethod
    def GetActiveDgnFile() -> MSPyDgnPlatform.DgnFile:
        """
        Get the DgnFileP for the current active model
        
        :returns:
        The DgnFileP for the current active model.
        """
        ...
    
    @staticmethod
    def GetActiveDgnModel() -> MSPyDgnPlatform.DgnModel:
        ...
    
    @staticmethod
    def GetActiveDgnModelRef() -> MSPyDgnPlatform.DgnModelRef:
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.ISessionMgr:
        ...
    
    def GetMaster(self: MSPyMstnPlatform.ISessionMgr) -> MSPyDgnPlatform.DgnDocument:
        """
        Get the Document for the Master DGN
        
        :returns:
        The document for the current Master DGN file, or NULL.
        """
        ...
    
    @staticmethod
    def GetMasterDgnFile() -> MSPyDgnPlatform.DgnFile:
        """
        Get the DgnFileP for the current Master DGN file
        
        :returns:
        The DgnFileP for the current Master DGN file.
        """
        ...
    
    def GetUIItemMenuMarkState(*args, **kwargs):
        """
        GetUIItemMenuMarkState(self: MSPyMstnPlatform.ISessionMgr, key: str, defaultIfKeyNotFound: MSPyMstnPlatform.MenuMarkType = <MenuMarkType.eMARK_NONE: 0>) -> MSPyMstnPlatform.MenuMarkType
        
        Get the MenuMarkType defined by key.
        
        :param key:
        The key used to retrieve UIItem state values.
        
        :param defaultIfKeyNotFound:
        The value to return if state value has not been specified.
        
        :returns:
        MenuMarkType associated with key, or defaultIfKeyNotFound if no
        entry is found matching the key.
        """
        ...
    
    def GetUIItemState(self: MSPyMstnPlatform.ISessionMgr, key: str, itemState: MSPyMstnPlatform.UIItemStateType, defaultIfKeyNotFound: bool) -> bool:
        """
        Get the boolean value defined by key and itemState.
        
        :param key:
        The key used to retrieve UIItem state values.
        
        :param itemState:
        The UIItemStateType that specifies which state value to get.
        
        :param defaultIfKeyNotFound:
        The value to return if state value has not been specified.
        
        :returns:
        bool value associated with key, or defaultIfKeyNotFound if no
        entry is found matching the key.
        """
        ...
    
    def GetWriteableFiles(self: MSPyMstnPlatform.ISessionMgr) -> MSPyDgnPlatform.DgnFilePtrArray:
        """
        Returns the list of all writeable files, including any activated
        references.
        """
        ...
    
    @staticmethod
    def InActiveFile(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Is this modelRef from the same file as the active model.
        """
        ...
    
    @staticmethod
    def InMasterFile(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Is this modelRef from the master file.
        """
        ...
    
    @staticmethod
    def InTransactableFile(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Is this modelRef from a transactable file.
        """
        ...
    
    @staticmethod
    def IsActiveDgnFile(dgnFile: MSPyDgnPlatform.DgnFile) -> bool:
        """
        Is this the file of the active model.
        """
        ...
    
    @staticmethod
    def IsActiveModel(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Is this modelRef the active model.
        """
        ...
    
    @staticmethod
    def IsActiveModelLocked() -> bool:
        ...
    
    def IsActiveWorkSetAssociatedToCONNECTProject(self: MSPyMstnPlatform.ISessionMgr) -> bool:
        ...
    
    def IsActiveWorkSetAssociatedToCONNECTProjectAndDGNMode(self: MSPyMstnPlatform.ISessionMgr) -> bool:
        ...
    
    def IsActiveWorkSetNoWorkSet(self: MSPyMstnPlatform.ISessionMgr) -> bool:
        ...
    
    @staticmethod
    def IsDesignFileInitialized() -> bool:
        """
        Return true if Session is active and design file has been initailized.
        Populating of model specific UI items should not happen until this
        method returns true.
        """
        ...
    
    @staticmethod
    def IsMasterDgnFile(dgnFile: MSPyDgnPlatform.DgnFile) -> bool:
        """
        Is this the master file.
        """
        ...
    
    @staticmethod
    def IsMasterFileClosing() -> bool:
        """
        Return true if Session is closing, This allows UI items to ignore
        window close events.
        """
        ...
    
    def IsReadyForUIProcessing(self: MSPyMstnPlatform.ISessionMgr) -> bool:
        """
        Return true if Session's active model has been initialized and is
        available to populate of model specific data in UI.
        """
        ...
    
    Manager: ISessionMgr
    
    @property
    def Master(arg0: MSPyMstnPlatform.ISessionMgr) -> MSPyDgnPlatform.DgnDocument:
        ...
    
    MasterDgnFile: DgnFile
    
    def OpenDgnFileDialog(self: MSPyMstnPlatform.ISessionMgr) -> tuple:
        """
        Prompts the user to select a file.
        
        
        Remark:
        s This function works with MSDocumentManager to locate and manage
        files. In stand-alone MicroStation, the standard File Open dialog
        is used. The default directory is MS_DEF or the previously
        selected directory.
        
        Remark:
        s The returned DgnDocument object is not open.
        
        See also:
        SwitchToNewFile
        
        
        
        Returns (Tuple, 0):
        NULL, if the user hit Cancel; else, a pointer to a document object
        that stores the path to the file that was chosen.
        
        Returns (Tuple, 1) :
        status. SUCCESS if a file was chosen; otherwise, the error status returned
        by the document manager.
        """
        ...
    
    def RemoveUIItemStateEntry(self: MSPyMstnPlatform.ISessionMgr, key: str) -> None:
        """
        Remove UIItemState entry that matches specified key if one exist.
        
        :param key:
        The key used to store UIItem state values.
        """
        ...
    
    def SaveDgnFileChanges(self: MSPyMstnPlatform.ISessionMgr, dgnFileVector: MSPyDgnPlatform.DgnFilePtrArray) -> bool:
        """
        Write all in-memory changes to the disk for each DgnFile in the list.
        """
        ...
    
    @staticmethod
    def SetActiveModelLocked(locked: bool) -> None:
        ...
    
    @staticmethod
    def SetAutoLockActiveModel(value: bool) -> None:
        ...
    
    def SetUIItemMenuMarkState(*args, **kwargs):
        """
        SetUIItemMenuMarkState(self: MSPyMstnPlatform.ISessionMgr, key: str, value: MSPyMstnPlatform.MenuMarkType = <MenuMarkType.eMARK_NONE: 0>, sendimmediateMessage: bool = False) -> None
        
        Set the menu mark value for a menu item. This will trigger a
        SystemEvent.ApplicationSyncUIItem event.
        
        :param key:
        The key that defines the name of the entry to modify or create.
        
        :param value:
        The MenuMarkType value.
        
        :param sendImmediateMessage:
        If true send immediate sync message, if false the sync message
        will be sent in the next UISync timer cycle.
        """
        ...
    
    def SetUIItemState(self: MSPyMstnPlatform.ISessionMgr, key: str, itemState: MSPyMstnPlatform.UIItemStateType, value: bool, sendImmediateMessage: bool = False) -> None:
        """
        Set the boolean value that defines the state of a UI item. This will
        trigger a SystemEvent.ApplicationSyncUIItem event.
        
        :param key:
        The key that defines the name of the entry to modify or create.
        
        :param itemState:
        The UIItemStateType that specifies which state value to set.
        
        :param value:
        The boolean value.
        
        :param sendImmediateMessage:
        If true send immediate sync message, if false the sync message
        will be sent in the next UISync timer cycle.
        """
        ...
    
    def SwitchToNewFile(self: MSPyMstnPlatform.ISessionMgr, doc: MSPyDgnPlatform.DgnDocument, inoutModelName: str, fileType: int, doUpdate: bool, releaseReferences: bool, reopeningAfterSave: bool = False, runInitUCM: bool = False) -> MSPyDgnPlatform.DgnFileStatus:
        """
        Makes the specified file the Master DGN, opening it if necessary.
        
        :returns:
        SUCCESS if *doc* was opened (if necessary) and has become the new
        Master DGN. See #FindDesignFile for errors that can result from a
        failed attempt to open a file.
        
        :param doc:
        Identifies the DGN to become the new master.
        
        :param inputModelName:
        The model in *doc* to become active
        
        :param fileType:
        The format of the file. Should be one of the GRAPHICSFILE_...
        values.
        
        :param doUpdate:
        Pass <code>true</code> if MicroStation should issue the UPDATE ALL
        command after making this file master.
        
        :param releaseReferences:
        Pass <code>true</code> to disable reference file load
        optimization. If <code>true</code>, the new master DGN will be
        forced to load all of its references, even those that are already
        loaded by the current master DGN. Normally, you should pass pass
        <code><code>false</code></code> for this parameter.
        
        :param reopeningAfterSave:
        Is this open being peformed after a save?
        
        :param runInitUCM:
        Runs the user command specified by MS_IT.
        
        Remark:
        s Call #FindDesignFile or #OpenDgnFileDialog to open a file and
        obtain a Document.
        
        Remark:
        s This function closes the current Master DGN, if any, and ends
        the previous session. It then begins a new session. See
        SessionManager for a description of what happens when a session
        ends and starts.
        
        Remark:
        s If *doc* is not open, then this function will try to open it
        from the file path of the document. See FindDesignFile for when a
        file is opened read-only or read-write.
        
        Remark:
        s If *doc* is not open and if its file format can be inferred from
        the file extension, then *fileType* will be inferred from the file
        extension. Specifically, if the file extension is found in the
        MS_DESIGNFILTER list, then GRAPHICSFILE_UStn will be inferred.
        File extensions such as DGNLIB, IGES, DXF, CGM, and DWG map to
        like-named GRAPHICSFILE_... values.
        
        Remark:
        s See #FindDesignFile for the case where *fileType* is
        GRAPHICSFILE_IGES or GRAPHICSFILE_CGM.
        
        See also:
        FindDesignFile
        """
        ...
    
    @property
    def WriteableFiles(arg0: MSPyMstnPlatform.ISessionMgr) -> MSPyDgnPlatform.DgnFilePtrArray:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    mdlErrno: int
    
class IURLServer:
    """
    None
    """

    def GetURL(self: MSPyMstnPlatform.IURLServer) -> MSPyBentley.WString:
        """
        Get the URL of this connection.
        
        Returns:
        The URL for the connection.
        """
        ...
    
    def GetUser(self: MSPyMstnPlatform.IURLServer) -> MSPyBentley.WString:
        """
        Get the User Name for the connection.
        
        Returns:
        The User Name for the connection.
        """
        ...
    
    def SetPassword(self: MSPyMstnPlatform.IURLServer, password: MSPyBentley.WString) -> None:
        """
        Set the User Password for the connection.
        
        Parameter ``userName``:
        The User Password for the connection. Default value is empty.
        
        Returns:
        None.
        """
        ...
    
    def SetUser(self: MSPyMstnPlatform.IURLServer, userName: MSPyBentley.WString) -> None:
        """
        Set the User Name for the connection.
        
        Parameter ``userName``:
        The User Name for the connection. Default value is empty.
        
        Returns:
        None.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class IconStyle:
    """
    Members:
    
    eICON_STYLE_NORMAL
    
    eICON_STYLE_LGREY
    
    eICON_STYLE_DGREY
    
    eICON_STYLE_DISABLED
    
    eICON_STYLE_HIGHLIGHT
    """

    def __init__(self: MSPyMstnPlatform.IconStyle, value: int) -> None:
        ...
    
    eICON_STYLE_DGREY: IconStyle
    
    eICON_STYLE_DISABLED: IconStyle
    
    eICON_STYLE_HIGHLIGHT: IconStyle
    
    eICON_STYLE_LGREY: IconStyle
    
    eICON_STYLE_NORMAL: IconStyle
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.IconStyle) -> int:
        ...
    
class ImportFeatureSpecification:
    """
    None
    """

    @property
    def FlipCoordinates(arg0: MSPyMstnPlatform.ImportFeatureSpecification) -> bool:
        ...
    @FlipCoordinates.setter
    def FlipCoordinates(arg0: MSPyMstnPlatform.ImportFeatureSpecification, arg1: bool) -> None:
        ...
    
    def GetClassName(self: MSPyMstnPlatform.ImportFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the class name of this feature specification.
        """
        ...
    
    def GetDisplayName(self: MSPyMstnPlatform.ImportFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the display name of this feature specification.
        """
        ...
    
    def GetExistingTemplateDgnFile(self: MSPyMstnPlatform.ImportFeatureSpecification) -> MSPyDgnPlatform.DgnFile:
        """
        Get the DgnFile containing the existing template of this feature specification.
        
        Returns:
        This method returns the DgnFile containing the existing element template associated with the import feature specification.
        """
        ...
    
    def GetExistingTemplateFullPath(self: MSPyMstnPlatform.ImportFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the full path of the existing template of this feature specification.
        
        Returns:
        This method returns the full path of the existing template associated with the import feature specification.
        The full path includes the template group name and the template name. For example: "MyProject\\PACounties"
        Defaults to null, indicating that a default template group name based on the GDB folder name and template name based on the class name will be used.
        If this template does not exist, it will be created. For example: "UnitedStates.gdb\\PACounties"
        """
        ...
    
    def GetFlipCoordinates(self: MSPyMstnPlatform.ImportFeatureSpecification) -> bool:
        """
        Get the boolean denoting flip coordinates state.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetIsSelected(self: MSPyMstnPlatform.ImportFeatureSpecification) -> bool:
        """
        Get the selected state of this feature specification.
        
        Returns:
        bool value.
        """
        ...
    
    @property
    def IsSelected(arg0: MSPyMstnPlatform.ImportFeatureSpecification) -> bool:
        ...
    @IsSelected.setter
    def IsSelected(arg0: MSPyMstnPlatform.ImportFeatureSpecification, arg1: bool) -> None:
        ...
    
    def SetExistingTemplateDgnFile(self: MSPyMstnPlatform.ImportFeatureSpecification, arg0: MSPyDgnPlatform.DgnFile) -> None:
        """
        Set the DgnFile containing the existing template of this feature specification.
        
        Parameter ``existingTemplateDgnFile``:
        DgnFile containing the existing element template.
        
        Returns:
        None.
        """
        ...
    
    def SetExistingTemplateFullPath(self: MSPyMstnPlatform.ImportFeatureSpecification, arg0: MSPyBentley.WString) -> None:
        """
        Set the full path of the existing template of this feature specification.
        
        Parameter ``existingTemplateFullPath``:
        Full path of the existing template.
        The full path includes the template group name and the template name. For example: "MyProject\\PACounties"
        Defaults to null, indicating that a default template group name based on the GDB folder name and template name based on the class name will be used.
        If this template does not exist, it will be created. For example: "UnitedStates.gdb\\PACounties"
        
        Returns:
        None.
        """
        ...
    
    def SetFlipCoordinates(self: MSPyMstnPlatform.ImportFeatureSpecification, arg0: bool) -> None:
        """
        Set the boolean denoting flip coordinates state.
        
        Parameter ``flipCoordinates``:
        Flip Coordinates. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetIsSelected(self: MSPyMstnPlatform.ImportFeatureSpecification, arg0: bool) -> None:
        """
        Set the selected state of this feature specification.
        
        Parameter ``isSelected``:
        Is feature specification selected.
        
        Returns:
        None.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ImportFeatureSpecificationPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, arg0: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ImportFeatureSpecification) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ImportFeatureSpecification) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, L: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, i: int, x: MSPyMstnPlatform.ImportFeatureSpecification) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray) -> MSPyMstnPlatform.ImportFeatureSpecification
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, i: int) -> MSPyMstnPlatform.ImportFeatureSpecification
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.ImportFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ImportFeatureSpecification) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class ImportManager:
    """
    None
    """

    def CreateGDBImportSpecification(self: MSPyMstnPlatform.ImportManager, gdbFolder: MSPyDgnPlatform.DgnFolderMoniker) -> tuple:
        """
        Create a new import specification for a GDB file
        
        Parameter ``[out]``:
        The new Import specification.
        
        Parameter ``gdbFolder``:
        The DgnFolderMonikerPtr of the GDB file to import.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def CreateSHPImportSpecification(self: MSPyMstnPlatform.ImportManager, shpFile: MSPyDgnPlatform.DgnDocumentMoniker, dgnContainingExistingTemplate: MSPyDgnPlatform.DgnFile, existingTemplateFullPath: MSPyBentley.WString, flipCoordinates: bool) -> tuple:
        """
        Create a new import specification for a SHP file
        
        Parameter ``[out]``:
        The new Import specification.
        
        Parameter ``shpFile``:
        The DgnDocumentMonikerPtr of the SHP file to import.
        
        Parameter ``dgnContainingExistingTemplate``:
        The DgnFile containing the existing template.
        
        Parameter ``existingTemplateFullPath``:
        The full path of the existing template. If not empty, the template is searched in the dgnContainingExistingTemplate. If empty, either the provided newTemplateName or a default template name is used.
        
        Parameter ``flipCoordinates``:
        Flip XY coordinates.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def GetImportedFeatureClassNameFromElement(featureClassName: MSPyBentley.WString, element: MSPyDgnPlatform.ElementHandle) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Get the imported feature class name from the given element
        """
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.ImportManager:
        ...
    
    @staticmethod
    def IsImportedFeatureElement(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        """
        Is this element a feature instance element that has been imported.
        
        Parameter ``element``:
        The Element to check.
        
        Returns:
        Bool value.
        """
        ...
    
    Manager: ImportManager
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class InputCallback:
    """
    None
    """

    @staticmethod
    def SetCommandFilterFunction(newFunc: Callable[[MSPyMstnPlatform.Inputq_element], MSPyMstnPlatform.CommandFilterReturnValue], funcID: str) -> Callable[[MSPyMstnPlatform.Inputq_element], MSPyMstnPlatform.CommandFilterReturnValue]:
        ...
    
    @staticmethod
    def SetEnterIdleFunction(newFunc: Callable[[int], None], funcID: str) -> Callable[[int], None]:
        ...
    
    @staticmethod
    def SetMessageReceivedFunction(newFunc: Callable[[MSPyMstnPlatform.Inputq_element], None], funcID: str) -> Callable[[MSPyMstnPlatform.Inputq_element], None]:
        ...
    
    @staticmethod
    def SetMonitorFunction(newFunc: Callable[[MSPyMstnPlatform.Inputq_element], MSPyMstnPlatform.InputFilterReturnValue], funcID: str, filter: MSPyMstnPlatform.InputMonitorFilter) -> Callable[[MSPyMstnPlatform.Inputq_element], MSPyMstnPlatform.InputFilterReturnValue]:
        ...
    
    @staticmethod
    def SetPreprocessKeyinFunction(newFunc: Callable[[MSPyBentley.WString], MSPyMstnPlatform.InputFilterReturnValue], funcID: str) -> Callable[[MSPyBentley.WString], MSPyMstnPlatform.InputFilterReturnValue]:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class InputFilterReturnValue:
    """
    Members:
    
    eINPUT_ACCEPT
    
    eINPUT_REJECT
    """

    def __init__(self: MSPyMstnPlatform.InputFilterReturnValue, value: int) -> None:
        ...
    
    eINPUT_ACCEPT: InputFilterReturnValue
    
    eINPUT_REJECT: InputFilterReturnValue
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.InputFilterReturnValue) -> int:
        ...
    
class InputMonitorFilter:
    """
    Members:
    
    eMONITOR_NOT_FROM_APP
    
    eMONITOR_FROM_APP
    
    eMONITOR_ALL
    """

    def __init__(self: MSPyMstnPlatform.InputMonitorFilter, value: int) -> None:
        ...
    
    eMONITOR_ALL: InputMonitorFilter
    
    eMONITOR_FROM_APP: InputMonitorFilter
    
    eMONITOR_NOT_FROM_APP: InputMonitorFilter
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.InputMonitorFilter) -> int:
        ...
    
class InputQueueSourceEnum:
    """
    Members:
    
    eFROM_KEYBOARD
    
    eFROM_CMDFILE
    
    eFROM_APP
    
    eFROM_UCM
    
    eTABLET_MENU
    
    eSCREEN_MENU
    
    eFUNCKEY_MENU
    
    eCURSOR_BUTTON_MENU
    
    ePULLDOWN_MENU
    
    eCONTROL_STRIP_MENU
    
    eHIERARCHICAL_MENU
    
    eWINDOW_ICON
    
    ePALETTE_MENU
    
    eFROM_STARTUP
    
    eFROM_DIALOG
    
    eFROM_PROCESS
    
    eFROM_MDL
    
    eFROM_PRDFPI
    
    eFROM_OPER_SYSTEM
    """

    def __init__(self: MSPyMstnPlatform.InputQueueSourceEnum, value: int) -> None:
        ...
    
    eCONTROL_STRIP_MENU: InputQueueSourceEnum
    
    eCURSOR_BUTTON_MENU: InputQueueSourceEnum
    
    eFROM_APP: InputQueueSourceEnum
    
    eFROM_CMDFILE: InputQueueSourceEnum
    
    eFROM_DIALOG: InputQueueSourceEnum
    
    eFROM_KEYBOARD: InputQueueSourceEnum
    
    eFROM_MDL: InputQueueSourceEnum
    
    eFROM_OPER_SYSTEM: InputQueueSourceEnum
    
    eFROM_PRDFPI: InputQueueSourceEnum
    
    eFROM_PROCESS: InputQueueSourceEnum
    
    eFROM_STARTUP: InputQueueSourceEnum
    
    eFROM_UCM: InputQueueSourceEnum
    
    eFUNCKEY_MENU: InputQueueSourceEnum
    
    eHIERARCHICAL_MENU: InputQueueSourceEnum
    
    ePALETTE_MENU: InputQueueSourceEnum
    
    ePULLDOWN_MENU: InputQueueSourceEnum
    
    eSCREEN_MENU: InputQueueSourceEnum
    
    eTABLET_MENU: InputQueueSourceEnum
    
    eWINDOW_ICON: InputQueueSourceEnum
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.InputQueueSourceEnum) -> int:
        ...
    
class Inputq_3DInputEvent:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def m_rotDirection(arg0: MSPyMstnPlatform.Inputq_3DInputEvent) -> MSPyBentleyGeom.DVec3d:
        ...
    
    @property
    def m_rotMagnitude(arg0: MSPyMstnPlatform.Inputq_3DInputEvent) -> float:
        ...
    
    @property
    def m_time(arg0: MSPyMstnPlatform.Inputq_3DInputEvent) -> int:
        ...
    
    @property
    def m_translation(arg0: MSPyMstnPlatform.Inputq_3DInputEvent) -> MSPyBentleyGeom.DVec3d:
        ...
    
class Inputq_command:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def button(arg0: MSPyMstnPlatform.Inputq_command) -> MSPyMstnPlatform.Inputq_rawButton:
        ...
    
    @property
    def command(arg0: MSPyMstnPlatform.Inputq_command) -> int:
        ...
    
    @property
    def commandClass(arg0: MSPyMstnPlatform.Inputq_command) -> int:
        ...
    
    @property
    def immediate(arg0: MSPyMstnPlatform.Inputq_command) -> bool:
        ...
    
    @property
    def taskId(arg0: MSPyMstnPlatform.Inputq_command) -> str:
        ...
    
    @property
    def unparsed(arg0: MSPyMstnPlatform.Inputq_command) -> str:
        ...
    
class Inputq_contents:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def contents(arg0: MSPyMstnPlatform.Inputq_contents) -> MSPyMstnPlatform.MentryContents:
        ...
    
    @property
    def unparsed(arg0: MSPyMstnPlatform.Inputq_contents) -> str:
        ...
    
class Inputq_cookedKey:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def keyStroke(arg0: MSPyMstnPlatform.Inputq_cookedKey) -> int:
        ...
    
    @property
    def qualifierMask(arg0: MSPyMstnPlatform.Inputq_cookedKey) -> int:
        ...
    
    @property
    def scanCode(arg0: MSPyMstnPlatform.Inputq_cookedKey) -> int:
        ...
    
    @property
    def virtualKey(arg0: MSPyMstnPlatform.Inputq_cookedKey) -> int:
        ...
    
class Inputq_datapnt:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def pnt(arg0: MSPyMstnPlatform.Inputq_datapnt) -> MSPyMstnPlatform.Inputq_pnt:
        ...
    
    @property
    def precision(arg0: MSPyMstnPlatform.Inputq_datapnt) -> int:
        ...
    
    @property
    def viewflags(arg0: MSPyMstnPlatform.Inputq_datapnt) -> List[bool]:
        ...
    
class Inputq_element:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def hdr(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_header:
        ...
    
    @property
    def u_cmd(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_command:
        ...
    
    @property
    def u_contents(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_contents:
        ...
    
    @property
    def u_cookedKey(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_cookedKey:
        ...
    
    @property
    def u_cursbutn(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_unassignedcb:
        ...
    
    @property
    def u_data(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_datapnt:
        ...
    
    @property
    def u_keyin(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_keyin:
        ...
    
    @property
    def u_m_3DInput(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_3DInputEvent:
        ...
    
    @property
    def u_m_queuedAction(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_queuedAction:
        ...
    
    @property
    def u_menumsg(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_menumsg:
        ...
    
    @property
    def u_menuwait(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_menuwait:
        ...
    
    @property
    def u_nullcmd(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_nullcmd:
        ...
    
    @property
    def u_nullqelem(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_null:
        ...
    
    @property
    def u_partial(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_partial:
        ...
    
    @property
    def u_rawButton(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_rawButton:
        ...
    
    @property
    def u_rawIconEvent(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_rawIconEvent:
        ...
    
    @property
    def u_rawKeyStroke(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_rawKeyStroke:
        ...
    
    @property
    def u_reset(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_reset:
        ...
    
    @property
    def u_submenu(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_submenu:
        ...
    
    @property
    def u_tent(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_tentpnt:
        ...
    
    @property
    def u_virtualEOQ(arg0: MSPyMstnPlatform.Inputq_element) -> MSPyMstnPlatform.Inputq_virtualEOQ:
        ...
    
class Inputq_header:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def bytes(arg0: MSPyMstnPlatform.Inputq_header) -> int:
        ...
    
    @property
    def cmdtype(arg0: MSPyMstnPlatform.Inputq_header) -> int:
        ...
    
    @property
    def source(arg0: MSPyMstnPlatform.Inputq_header) -> int:
        ...
    
    @property
    def sourcepid(arg0: MSPyMstnPlatform.Inputq_header) -> int:
        ...
    
    @property
    def taskId(arg0: MSPyMstnPlatform.Inputq_header) -> str:
        ...
    
    @property
    def uc_fno_value(arg0: MSPyMstnPlatform.Inputq_header) -> int:
        ...
    
class Inputq_keyin:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def keyin(arg0: MSPyMstnPlatform.Inputq_keyin) -> str:
        ...
    
    @property
    def len(arg0: MSPyMstnPlatform.Inputq_keyin) -> int:
        ...
    
    @property
    def type(arg0: MSPyMstnPlatform.Inputq_keyin) -> int:
        ...
    
class Inputq_menumsg:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def message(arg0: MSPyMstnPlatform.Inputq_menumsg) -> str:
        ...
    
class Inputq_menuwait:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def prompt(arg0: MSPyMstnPlatform.Inputq_menuwait) -> int:
        ...
    
    @property
    def waittype(arg0: MSPyMstnPlatform.Inputq_menuwait) -> int:
        ...
    
class Inputq_null:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def breaknow(arg0: MSPyMstnPlatform.Inputq_null) -> int:
        ...
    
class Inputq_nullcmd:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def nullcmd(arg0: MSPyMstnPlatform.Inputq_nullcmd) -> int:
        ...
    
class Inputq_partial:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def keyin(arg0: MSPyMstnPlatform.Inputq_partial) -> str:
        ...
    
    @property
    def len(arg0: MSPyMstnPlatform.Inputq_partial) -> int:
        ...
    
class Inputq_pnt:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def buttonTrans(arg0: MSPyMstnPlatform.Inputq_pnt) -> int:
        ...
    
    @property
    def cmdpoint(arg0: MSPyMstnPlatform.Inputq_pnt) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    @property
    def phys_screen(arg0: MSPyMstnPlatform.Inputq_pnt) -> int:
        ...
    
    @property
    def qualifierMask(arg0: MSPyMstnPlatform.Inputq_pnt) -> int:
        ...
    
    @property
    def rawUors(arg0: MSPyMstnPlatform.Inputq_pnt) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    @property
    def region(arg0: MSPyMstnPlatform.Inputq_pnt) -> int:
        ...
    
    @property
    def scrnpoint(arg0: MSPyMstnPlatform.Inputq_pnt) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    @property
    def uors(arg0: MSPyMstnPlatform.Inputq_pnt) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    @property
    def view(arg0: MSPyMstnPlatform.Inputq_pnt) -> int:
        ...
    
class Inputq_queuedAction:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def m_action(arg0: MSPyMstnPlatform.Inputq_queuedAction) -> MSPyMstnPlatform.QueuedAction:
        ...
    
class Inputq_rawButton:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def buttonNumber(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def buttonTime(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def buttonTrans(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def originalButtonNumber(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def physScreen(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def qualifierMask(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def region(arg0: MSPyMstnPlatform.Inputq_rawButton) -> int:
        ...
    
    @property
    def scrnPoint(arg0: MSPyMstnPlatform.Inputq_rawButton) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    @property
    def tabletPoint(arg0: MSPyMstnPlatform.Inputq_rawButton) -> MSPyBentleyGeom.DPoint3d:
        ...
    
class Inputq_rawIconEvent:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def callBackID_data(arg0: MSPyMstnPlatform.Inputq_rawIconEvent) -> int:
        ...
    
    @property
    def controlRect(arg0: MSPyMstnPlatform.Inputq_rawIconEvent) -> MSPyDgnPlatform.BSIRect:
        ...
    
    @property
    def rawButton(arg0: MSPyMstnPlatform.Inputq_rawIconEvent) -> MSPyMstnPlatform.Inputq_rawButton:
        ...
    
class Inputq_rawKeyStroke:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def keyStroke(arg0: MSPyMstnPlatform.Inputq_rawKeyStroke) -> int:
        ...
    
    @property
    def qualifierMask(arg0: MSPyMstnPlatform.Inputq_rawKeyStroke) -> int:
        ...
    
    @property
    def scanCode(arg0: MSPyMstnPlatform.Inputq_rawKeyStroke) -> int:
        ...
    
class Inputq_reset:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def reset(arg0: MSPyMstnPlatform.Inputq_reset) -> int:
        ...
    
class Inputq_submenu:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def subname(arg0: MSPyMstnPlatform.Inputq_submenu) -> str:
        ...
    
class Inputq_tentpnt:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def pnt(arg0: MSPyMstnPlatform.Inputq_tentpnt) -> MSPyMstnPlatform.Inputq_pnt:
        ...
    
class Inputq_unassignedcb:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def cursbutn(arg0: MSPyMstnPlatform.Inputq_unassignedcb) -> int:
        ...
    
    @property
    def pnt(arg0: MSPyMstnPlatform.Inputq_unassignedcb) -> MSPyMstnPlatform.Inputq_pnt:
        ...
    
class Inputq_virtualEOQ:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def process(arg0: MSPyMstnPlatform.Inputq_virtualEOQ) -> int:
        ...
    
class ItemColorType:
    """
    Members:
    
    eDITEM_COLORTYPE_BACKGROUND
    
    eDITEM_COLORTYPE_FOREGROUND
    
    eDITEM_COLORTYPE_TOPSHADOW
    
    eDITEM_COLORTYPE_BOTTOMSHADOW
    
    eDITEM_COLORTYPE_SELECT
    
    eDITEM_COLORTYPE_AUXLABEL
    
    eDITEM_COLORTYPE_SELECTTEXT
    
    eDITEM_COLORTYPE_GRAYTEXT
    
    eDITEM_COLORTYPE_FRAME
    
    eDITEM_COLORTYPE_DLOGBACKGROUND
    
    eDITEM_COLORTYPE_TRAVHIGHLIGHT
    
    eDITEM_COLORTYPE_SCROLLBAR
    
    eDITEM_COLORTYPE_TOOLTIPBG
    
    eDITEM_COLORTYPE_TOOLTIPTEXT
    
    eDITEM_COLORTYPE_LIGHT
    
    eDITEM_COLORTYPE_DARKSHADOW
    
    eDITEM_COLORTYPE_MAXCOLOR
    
    eDITEM_COLORTYPE_NCOLORS
    """

    def __init__(self: MSPyMstnPlatform.ItemColorType, value: int) -> None:
        ...
    
    eDITEM_COLORTYPE_AUXLABEL: ItemColorType
    
    eDITEM_COLORTYPE_BACKGROUND: ItemColorType
    
    eDITEM_COLORTYPE_BOTTOMSHADOW: ItemColorType
    
    eDITEM_COLORTYPE_DARKSHADOW: ItemColorType
    
    eDITEM_COLORTYPE_DLOGBACKGROUND: ItemColorType
    
    eDITEM_COLORTYPE_FOREGROUND: ItemColorType
    
    eDITEM_COLORTYPE_FRAME: ItemColorType
    
    eDITEM_COLORTYPE_GRAYTEXT: ItemColorType
    
    eDITEM_COLORTYPE_LIGHT: ItemColorType
    
    eDITEM_COLORTYPE_MAXCOLOR: ItemColorType
    
    eDITEM_COLORTYPE_NCOLORS: ItemColorType
    
    eDITEM_COLORTYPE_SCROLLBAR: ItemColorType
    
    eDITEM_COLORTYPE_SELECT: ItemColorType
    
    eDITEM_COLORTYPE_SELECTTEXT: ItemColorType
    
    eDITEM_COLORTYPE_TOOLTIPBG: ItemColorType
    
    eDITEM_COLORTYPE_TOOLTIPTEXT: ItemColorType
    
    eDITEM_COLORTYPE_TOPSHADOW: ItemColorType
    
    eDITEM_COLORTYPE_TRAVHIGHLIGHT: ItemColorType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ItemColorType) -> int:
        ...
    
class ItemTypeSpecification:
    """
    None
    """

    def GetItemTypeDgnFile(self: MSPyMstnPlatform.ItemTypeSpecification) -> MSPyDgnPlatform.DgnFile:
        """
        Gets the DgnFile containing the item type.".
        """
        ...
    
    def GetItemTypeLibraryName(self: MSPyMstnPlatform.ItemTypeSpecification) -> MSPyBentley.WString:
        """
        Gets the Item type library name.".
        """
        ...
    
    def GetItemTypeName(self: MSPyMstnPlatform.ItemTypeSpecification) -> MSPyBentley.WString:
        """
        Gets the Item type name.".
        """
        ...
    
    def SetItemTypeDgnFile(self: MSPyMstnPlatform.ItemTypeSpecification, dgnFile: MSPyDgnPlatform.DgnFile) -> None:
        """
        Sets the DgnFile containing the item type.".
        """
        ...
    
    def SetItemTypeLibraryName(self: MSPyMstnPlatform.ItemTypeSpecification, itemTypeLibraryName: MSPyBentley.WString) -> None:
        """
        Sets the Item type library name.".
        """
        ...
    
    def SetItemTypeName(self: MSPyMstnPlatform.ItemTypeSpecification, itemTypeName: MSPyBentley.WString) -> None:
        """
        Sets the Item type name.".
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ItemTypeSpecificationPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, arg0: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, x: MSPyMstnPlatform.ItemTypeSpecification) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, x: MSPyMstnPlatform.ItemTypeSpecification) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, L: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, i: int, x: MSPyMstnPlatform.ItemTypeSpecification) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> MSPyMstnPlatform.ItemTypeSpecification
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, i: int) -> MSPyMstnPlatform.ItemTypeSpecification
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.ItemTypeSpecificationPtrArray, x: MSPyMstnPlatform.ItemTypeSpecification) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
LIBRARY_AutoConvertToV8: int

LIBRARY_AutoConvertToV8NoBackup: int

LIBRARY_IgnoreV7Libraries: int

LIBRARY_PromptForConvertToV8: int

class Level:
    """
    None
    """

    @staticmethod
    def CompareLevelData(compareAttributesOut: MSPyDgnPlatform.BitMask, modelRef1: MSPyDgnPlatform.DgnModelRef, levelId1: int, modelRef2: MSPyDgnPlatform.DgnModelRef, levelId2: int, compareAttributesIn: MSPyDgnPlatform.BitMask) -> bool:
        """
        @Description Compare level related data between level1 and level2. The
        function will compare only those attributes as specified in
        pCompareAttributesMaskIn. If pCompareAttributesMaskIn is NULL, then
        all the attributes will be compared.
        
        :param compareAttributesOut:
        if non-null, then return a set of bits that represent the
        attributes of the levels that are not the same.
        
        :param modelRef1In:
        model 1
        
        :param levelId1In:
        level id of model 1
        
        :param modelRef2In:
        model 2
        
        :param levelId2In:
        level id of model 2
        
        :param compareAttributesIn:
        mask of attributes to compare
        
        :returns:
        true if the level data of the two levels matches for attributes
        specified in pCompareAttributesMaskIn
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyElement(destModelRef: MSPyDgnPlatform.DgnModelRef, destLevelId: int, sourceModelRef: MSPyDgnPlatform.DgnModelRef, sourceLevelId: int, inEntireFile: bool) -> tuple:
        """
        @Description Copy elements in source level to destination level.
        
        :param numElementCopiedOut:
        number of elements copied
        
        :param destModelRefIn:
        destination model to copy elements to
        
        :param destLevelIdIn:
        destination level to copy elements to
        
        :param sourceModelRefIn:
        source model ref whose elements to copy
        
        :param sourceLevelIdIn:
        source level from which to copy elements from
        
        :param inEntireFileIn:
        if true, then move elements in entire file of sourceModelRefIn,
        else copy elements only in the specified model
        
        :returns:
        ERROR if the model-ref or the level ids are invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyLevel(destModelRef: MSPyDgnPlatform.DgnModelRef, sourceModelRef: MSPyDgnPlatform.DgnModelRef, sourceLevelId: int, newLevelNameIn: str, setExternal: bool) -> tuple:
        """
        @Description Copy a level from source model into destination model.
        Creates a new level in the destination model with the same level-name
        & level-code as the source level.
        
        :param levelIdOut:
        id of new level in pDestModelRefIn
        
        :param destModelRefIn:
        destination model-ref to copy into
        
        :param sourceModelRefIn:
        source model ref
        
        :param sourceLevelIdIn:
        id of library level to copy
        
        :param setExternalIn:
        if true, then set the imported level as " external ". Should be true
        only if pSourceModelRef is LEVEL_LIBRARY_MODELREF.
        
        :returns:
        SUCCESS if the level data is successfully copied.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table of the
        destination model-ref is in a read-only state <DT>
        **MSGID_errorTableIsOfAttachment** <DD> the destination model-ref
        is for an attachment <DT> **ERROR** <DD> if model-ref or level id
        is invalid or the copy failed for some unspecified reason </DL>
        
        Remark:
        s A successful level copy set raises a LEVEL_CHANGE_ATTRIBUTE
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table.
        
        See also:
        LevelTable.Rewrite
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyLevelData(destModelRef: MSPyDgnPlatform.DgnModelRef, destLevelId: int, sourceModelRef: MSPyDgnPlatform.DgnModelRef, sourceLevelId: int) -> int:
        """
        @Description Copy all level related data from source level into
        destination level. This function does not copy the level-name & level-
        code.
        
        :param destModelRefIn:
        destination model
        
        :param destLevelIdIn:
        destination level id
        
        :param sourceModelRefIn:
        source model
        
        :param sourceLevelIdIn:
        source level id
        
        :returns:
        SUCCESS if the level data is successfully copied.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table of the
        destination model-ref is in a read-only state <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified destination
        level is in a read-only state <DT> **ERROR** <DD> if
        source/destination model-ref or level id is invalid or the copy
        failed for some unspecified reason </DL>
        
        Remark:
        s A successful level copy raises a LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table.
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyLevelDataByAttributeMask(destModelRef: MSPyDgnPlatform.DgnModelRef, destLevelId: int, sourceModelRef: MSPyDgnPlatform.DgnModelRef, sourceLevelId: int, copyAttributesMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Copy level related data as specified by the level-
        attributes mask from source level into destination level. This
        function does not copy the level-name & level-code.
        
        :param destModelRefIn:
        destination model
        
        :param destLevelIdIn:
        destination level id
        
        :param sourceModelRefIn:
        source model
        
        :param sourceLevelIdIn:
        source level id
        
        :param copyAttributesMaskIn:
        mask of attributes to copy - will never copy level name
        
        :returns:
        SUCCESS if the level data is successfully copied.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table of the
        destination model-ref is in a read-only state <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified destination
        level is in a read-only state <DT> **ERROR** <DD> if
        source/destination model-ref or level id is invalid or the copy
        failed for some unspecified reason </DL>
        
        Remark:
        s A successful level copy raises a LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table.
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Create(modelRef: MSPyDgnPlatform.DgnModelRef, levelName: str, levelCode: int) -> tuple:
        """
        @Description Create a new level.
        
        Remark:
        s A new level can be created only in the context of the current
        file (i.e. specified model-ref should be a root-model of the
        current file).
        
        Remark:
        s The specified level-name should be unique in the context of the
        all other root levels of the level-table. Otherwise the level is
        not created.
        
        Remark:
        s The specified level-code should be unique in the context of the
        entire level-table. Otherwise the level is not created.
        LEVEL_NULL_CODE can be specified for the level-code, in which
        case, Level.Create will automatically generate a unique level-
        code and assign it to the new level. Such a level-code will be
        termed as a " system - assigned " level-code.
        
        :param levelIdOut:
        level id of new level
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelNameIn:
        level name of new level
        
        :param levelCodeIn:
        level code of new level - maybe LEVEL_NULL_CODE.
        
        :returns:
        SUCCESS if level is successfully created.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorCannotCreateNewAttachmentLevel** <DD>
        the specified model-ref is for an attachment <DT>
        **MSGID_errorLevelNameIsDuplicate** <DD> the specified level-name
        is duplicate <DT> **MSGID_errorLevelCodeIsDuplicate** <DD> the
        specified level-code is duplicate <DT> **ERROR** <DD> if the
        model-ref is invalid or the new level cannot be created for some
        unspecified reason </DL>
        
        Remark:
        s A successful level create raises a LEVEL_CREATE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.Delete LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateFromSeed(modelRef: MSPyDgnPlatform.DgnModelRef, levelName: str, levelCode: int, seedLevelId: int, copyAttributeMask: MSPyDgnPlatform.BitMask) -> tuple:
        """
        @Description Create a new level. The new level takes its attributes as
        specified " copyAttributeMaskIn " from the " seed " level. Typically,
        " copyAttributeMaskIn " is got by calling function
        <i>LevelAttribute.GetMask
        (MS_LEVEL_CREATE_FROM_SEED_ATTRIBUTE_MASK)</i>
        
        :param levelIdOut:
        level id of new level
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelNameIn:
        level name of new level
        
        :param levelCodeIn:
        level code of new level - maybe LEVEL_NULL_CODE.
        
        :param seedLevelIdIn:
        seed level
        
        :param copyAttributeMaskIn:
        seed level
        
        :returns:
        SUCCESS if level is successfully created.
        
        Remark:
        s A successful level create raises a LEVEL_CREATE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.Create usmtnLevel.GetSeedLevelC LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Delete(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> int:
        """
        @Description Delete a level.
        
        Remark:
        s A level can be deleted only in the context of the current file
        (i.e. modelRefIn should be a root-model of the current file).
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id to delete
        
        :returns:
        SUCCESS if the level is successfully deleted.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorCannotDeleteAttachmentLevel** <DD>
        the specified model-ref is for an attachment <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified level is in a
        read-only state <DT> **MSGID_errorLevelIsUsed** <DD> the specified
        level is used by some element in the file <DT>
        **MSGID_errorCannotDeleteExternalLevel** <DD> the specified level
        is a library level <DT> **MSGID_errorCannotDeleteDefaultLevel**
        <DD> the specified level is the default level <DT>
        **MSGID_errorCannotDeleteDefpointsLevel** <DD> the specified level
        is the DWG DEFPOINTS level <DT> **ERROR** <DD> if model-ref or
        level-id is invalid or the level cannot be deleted for some
        unspecified reason </DL>
        
        Remark:
        s A successful level delete raises a LEVEL_DELETE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.Create LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def DeleteElement(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, inEntireFile: bool, updateView: bool) -> tuple:
        """
        @Description Delete elements on specified level.
        
        :param numElementDeletedOut:
        number of elements deleted
        
        :param modelRefIn:
        source model ref whose elements to delete
        
        :param levelIdIn:
        source level from which to delete elements
        
        :param inEntireFileIn:
        if true, then delete elements in entire file that contains
        modelRefIn, else delete elements only in the specified model
        
        :param updateViewIn:
        if true, then update the views
        
        :returns:
        ERROR if the model-ref or the level ids are invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Draw(viewDraw: List[bool[8]], incremental: bool, drawMode: MSPyDgnPlatform.DgnDrawMode, modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, startEndMsg: bool, drawShared: bool) -> int:
        """
        @Description Draw all elements on specified level
        
        @Param(input) viewDrawIn views to update. Should point to an array
        dimensioned to MSPyDgnPlatform.MAX_VIEWS, and viewDraw[i] controls
        whether view i is drawn. If NULL, all views are drawn.
        
        :param incrementalIn:
        if false, don't erase before drawing
        
        :param drawModeIn:
        erasing portion of drawing
        
        :param modelRefIn:
        model ref
        
        :param levelIdIn:
        level to draw
        
        :param startEndMsgIn:
        if true then want in prog/complete msg
        
        :param drawSharedIn:
        if true, then draw all models/attachments which use the same level
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.Draw Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetActive() -> tuple:
        """
        @Description Get the current active level.
        
        :param levelIdOut:
        active level id
        
        :returns:
        SUCCESS
        
        See also:
        Level.IsActive Level.SetActive Level.SetActiveByName
        Params.SetActive Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetAttributesDifferFromSource(differencesMask: MSPyDgnPlatform.BitMask, modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the 'level's attributes differ from source' flag.
        
        :param levelDifferOut:
        true if the level differs from its source
        
        :param differencesMaskOut:
        list of attributes which differ.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCode(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level code.
        
        :param levelCodeOut:
        level code
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetCode Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetColor(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level color and color-override flag. An element is
        displayed with this color in a view when the color-override flag is
        true and when level-symbology for the view is turned ON.
        
        :param colorOut:
        level color
        
        :param colorOverrideOut:
        level color override - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetColor Level.GetSymbology Level.SetSymbology
        
        See also:
        Level.GetSymbology Level.SetSymbology Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetCreateTimeStamp(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level create time stamp
        
        :param createTimeStampOut:
        level create time stamp
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetDescription Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDescription(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level description.
        
        :param descriptionOut:
        level description
        
        :param stringSizeIn:
        number of characters pLevelDescriptionOut can hold
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetDescription Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDisplay(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the display flag.
        
        :param levelDisplayOut:
        level display flag - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetDisplayMask Level.GetDisplayMask
        Level.SetDisplay Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDisplayPriority(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level display priority
        
        :param priorityOut:
        level display priority
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetDisplayPriority Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementAccess(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the element access mode.
        
        :param elementAccessOut:
        element access - one of <TT>LEVEL_ELEMENT_ACCESS_</TT>... (defined
        in leveltypes.h)
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementAccess Level.IsElementLocked
        Level.IsElementReadOnly Level.IsElementViewOnly Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementColor(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level element color. This color value is applied
        on an element when the element's color is set to BYLEVEL.
        
        :param colorOut:
        element color
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementColor Level.GetElementSymbology
        Level.SetElementSymbology
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementCount(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the the number of elements of specified model-ref
        that use specified level.
        
        :param usageCountOut:
        number of elements that use the level
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.GetUsageMask Level.IsUsed Level.GetUsage
        Level.ReportUsage Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementMaterialId(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level element material id associated with the level.
        
        :param materialIdOut:
        element material id
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementMaterialId Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementStyle(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level element style and custom-line style
        override info. This style value is applied on an element when the
        element's style is set to BYLEVEL.
        
        :param styleOut:
        element style
        
        :param styleParamsOut:
        custom line style modifiers
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementStyle Level.GetElementSymbology
        Level.SetElementSymbology
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementSymbology(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the element symbology.
        
        :param elementColorOut:
        element color
        
        :param elementStyleOut:
        element style
        
        :param elementStyleParamsOut:
        custom line style modifiers
        
        :param elementWeightOut:
        element weight
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementSymbology Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetElementWeight(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level element weight. This weight value is
        applied on an element when the the element's weight is set to BYLEVEL.
        
        :param weightOut:
        element weight
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetElementWeight Level.GetElementSymbology
        Level.SetElementSymbology
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetFrozen(modelRef: MSPyDgnPlatform.DgnModelRef, levelIdIn: int, frozenTypeIn: MSPyMstnPlatform.LevelFrozenType) -> tuple:
        """
        @Description Get the frozen flag
        
        :param levelFrozenOut:
        level frozen flag
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param frozenTypeIn:
        one of <TT>LEVEL_FROZEN_TYPE_</TT>... (defined in leveltable.h)
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        LevelTable.GetFrozenMask LevelTable.SetFrozenMask
        LevelTable.GetDisplayFrozenMask Level.IsFrozen
        Level.SetFrozen Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetHidden(modelRef: MSPyDgnPlatform.DgnModelRef, levelIdIn: int) -> tuple:
        """
        @Description Get the hidden flag.
        
        :param levelHiddenOut:
        level hidden flag
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        LevelTable.GetHiddenMask Level.IsHidden Level.SetHidden
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetIdFromCode(modelRef: MSPyDgnPlatform.DgnModelRef, levelCode: int) -> tuple:
        """
        @Description Given a level-code, get its level-id.
        
        :param levelIdOut:
        level id
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelCodeIn:
        level code
        
        :returns:
        SUCCESS if the level-id is successfully returned.
        
        Remark:
        s This function does not look in level libraries.
        
        See also:
        Level.GetIdFromCodeIncludingLibraries
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorLevelCodeIsInvalid** <DD> the level-code is not valid
        <DT> **ERROR** <DD> if the model-ref is invalid or the level
        cannot be returned for some unspecified reason </DL>
        
        See also:
        Level.GetIdFromName Level.GetIdFromElementId
        Level.GetIdFromElementRef Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetIdFromCodeIncludingLibraries(modelRef: MSPyDgnPlatform.DgnModelRef, levelCode: int) -> tuple:
        """
        @Description Given a level-code, get its level-id, including levels
        that are in level libraries.
        
        :param levelIdOut:
        level id
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelCodeIn:
        level code
        
        :returns:
        SUCCESS if the level-id is successfully returned.
        
        See also:
        Level.GetIdFromCode
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorLevelCodeIsInvalid** <DD> the level-code is not valid
        <DT> **ERROR** <DD> if the model-ref is invalid or the level
        cannot be returned for some unspecified reason </DL>
        
        See also:
        Level.GetIdFromName Level.GetIdFromElementId
        Level.GetIdFromElementRef Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetIdFromName(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, levelName: str) -> tuple:
        """
        @Description Given a level-name, get its level-id.
        
        :param levelIdOut:
        level id
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelNameIn:
        level name
        
        :returns:
        SUCCESS if the level-id is successfully returned.
        
        Remark:
        s This function does not look in level libraries.
        
        See also:
        Level.GetIdFromNameIncludingLibraries
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorLevelNameIsInvalid** <DD> the level-name is not valid
        <DT> **ERROR** <DD> if the model-ref is invalid or the level
        cannot be returned for some unspecified reason </DL>
        
        See also:
        Level.GetIdFromCode Level.GetIdFromElementId
        Level.GetIdFromElementRef Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetIdFromNameIncludingLibraries(modelRef: MSPyDgnPlatform.DgnModelRef, levelName: str) -> tuple:
        """
        @Description Given a level-name, get its level-id, including levels
        that are in level libraries.
        
        :param levelIdOut:
        level id
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelNameIn:
        level name
        
        :returns:
        SUCCESS if the level-id is successfully returned.
        
        See also:
        Level.GetIdFromName
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorLevelNameIsInvalid** <DD> the level-name is not valid
        <DT> **ERROR** <DD> if the model-ref is invalid or the level
        cannot be returned for some unspecified reason </DL>
        
        See also:
        Level.GetIdFromCode Level.GetIdFromElementId
        Level.GetIdFromElementRef Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetMaterialId(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get material id associated with the level.
        
        :param materialIdOut:
        level material id
        
        :param materialOverrideOut:
        level material override
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetMaterialId Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetName(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level name.
        
        :param levelNameOut:
        level name
        
        :param stringSizeIn:
        number of (WChar) characters pLevelNameOut can hold
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetName Level.GetPathName Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetPlot(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the plot flag.
        
        :param levelPlotOut:
        level plot flag
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        LevelTable.GetPlotMask Level.SetPlot Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetSeedLevel(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Get level-id of seed level. When a new level is created,
        then the user designated seed level whose attributes need to be
        applied on the newly created level.
        
        Remark:
        s <i>Level.CreateLevel</i> does not apply the attributes of the
        seed level. <i>Level.CreateLevel</i> will only create a newly
        allocated level. The attributes of the seed level can then be
        applied using <i>Level.CopyLevelData</i>. To create a level &
        apply the seed in one step, call the function
        <i>Level.CreateFromSeed</i>
        
        :param modelRefIn:
        model ref
        
        :returns:
        MSPyDgnPlatform.LevelId of seed level
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetStyle(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level style, custom-line style override info and
        style-override flag. An element is displayed with this style in a view
        when the style-override flag is true and when level-symbology for the
        view is turned ON.
        
        :param styleOut:
        level style
        
        :param styleParamsOut:
        custom line style modifiers
        
        :param styleOverrideOut:
        level style override - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetStyle Level.GetSymbology Level.SetSymbology
        
        See also:
        Level.GetSymbology Level.SetSymbology Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetSymbology(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level symbology and symbology-override flags.
        
        :param colorOut:
        color
        
        :param colorOverrideOut:
        color override - true or false
        
        :param styleOut:
        style
        
        :param styleParamsOut:
        custom line style modifiers
        
        :param styleOverrideOut:
        style override - true or false
        
        :param weightOut:
        weight
        
        :param weightOverrideOut:
        weight override - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetSymbology Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetTransparency(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get level display transparency
        
        :param transparencyOut:
        level display transparency (value between 0.0 & 1.0)
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetTransparency Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetUniqueID(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level element's unique ID. The level element's
        unique id is assigned by the system and cannot be modified. This
        unique ID should not be confused with the level id returned by
        Level.GetIdFromName (or Level.GetIdFromCode or
        LevelIterator.GetFirst ..). The unique ID is an Int64 is stored at
        element->ehdr.uniqueId and is unique in the context of a file-object.
        The level-id is also system assigned, but is a UInt and is unique in
        the context of a level-table.
        
        :param uniqueIDOut:
        unique ID
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetUsage(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, inFile: bool) -> tuple:
        """
        @Description Get the level usage flag.
        
        :param usageOut:
        usage flag - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param inFile:
        if true, then check the level is used in the entire file
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        Remark:
        s <UL> <LI> If *pUsageOut is true, then the level is used. <LI> If
        *pUsageOut is false, then the level is not used. </UL>
        
        See also:
        Level.GetUsageMask Level.IsUsed Level.ReportUsage
        Level.GetElementCount Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetWeight(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get the level weight and weight-override flag. An element
        is displayed with this style in a view when the weight-override flag
        is true and when level-symbology for the view is turned ON.
        
        :param weightOut:
        level weight
        
        :param weightOverrideOut:
        level weight override - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetWeight Level.GetSymbology Level.SetSymbology
        
        See also:
        Level.GetSymbology Level.SetSymbology Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsActive(levelId: int) -> bool:
        """
        @Description Check if a level of the current-file is the active level.
        
        :param levelIdIn:
        level id
        
        :returns:
        true if iLevelIdIn is the active level, else false
        
        See also:
        Level.GetActive Level.SetActive Level.SetActiveByName
        Params.SetActive Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsCodeAutoGenerated(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Get if the level code is auto generated (that means
        generated by MicroStation) or is manually set by the user
        
        :param isAutoGeneratedOut:
        true if the level code is auto generated
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.SetCode Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsElementLocked(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if elements on the specified level are locked.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level's element-access is atleast locked, else false,
        else SUCCESS
        
        See also:
        Level.SetElementAccess Level.GetElementAccess Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsElementReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if elements on the specified level are read-only
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level's element-access is atleast read-only, else
        false
        
        See also:
        Level.SetElementAccess Level.GetElementAccess Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsElementViewOnly(*args, **kwargs):
        """
        Overloaded function.
        
        1. IsElementViewOnly(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool
        
        @Description Check if elements on the specified level are view-only
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level's element-access is view-only, else false
        
        See also:
        Level.SetElementAccess Level.GetElementAccess
        
        Bentley Systems
        
        Remark:
        
        
        2. IsElementViewOnly(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool
        
        @Description Check if elements on the specified level are view-only
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level's element-access is view-only, else false
        
        See also:
        Level.SetElementAccess Level.GetElementAccess
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsExternal(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if a level is an external (library) level or not.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level is external, else false
        
        See also:
        LevelTable.GetExternalMask Level.GetExternal
        Level.GetLibraryRef Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsFrozen(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, frozenType: MSPyMstnPlatform.LevelFrozenType) -> bool:
        """
        @Description Check if a level is frozen.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param frozenTypeIn:
        one of <TT>LEVEL_FROZEN_TYPE_</TT>... (defined in leveltable.h)
        
        :returns:
        true if the level is frozen, else false
        
        See also:
        LevelTable.GetFrozenMask LevelTable.SetFrozenMask
        LevelTable.GetDisplayFrozenMask Level.GetFrozen
        Level.SetFrozen Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsHidden(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if a level is hidden.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level is hidden, else false
        
        See also:
        LevelTable.GetHiddenMask Level.GetHidden Level.SetHidden
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if a level is read-only.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level is read-only, else false
        
        See also:
        LevelTable.GetReadOnlyMask Level.GetReadOnly
        Level.SetReadOnly Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsUsed(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, inFile: bool) -> bool:
        """
        @Description Check if a level is used. A level is used if there is an
        element on the level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param inFile:
        if false, then check if a level is used in the context of
        modelRefIn only. if true, then returns if a level is used in the
        entire file of modelRefIn.
        
        :returns:
        true if the level is used, else false
        
        See also:
        Level.GetUsageMask Level.GetUsage Level.ReportUsage
        Level.GetElementCount Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsValid(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if the specified level id is a valid existing
        level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :returns:
        true if the level is valid, else false. Returns false if
        modelRefIn is invalid.
        
        See also:
        Level.IsValidByName Level.IsValidByCode
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsValidByCode(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> bool:
        """
        @Description Check if level with specified code is a valid existing
        level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level code
        
        :returns:
        true if the level is valid, else false. Returns false if
        modelRefIn is invalid.
        
        See also:
        Level.IsValid Level.IsValidByName Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsValidByName(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, levelName: str) -> bool:
        """
        @Description Check if level with specified name is a valid existing
        level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelNameIn:
        level name
        
        :returns:
        true if the level is valid, else false. Returns false if
        modelRefIn is invalid.
        
        See also:
        Level.IsValid Level.IsValidByCode Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def MoveElementLevel(destLevelId: int, modelRef: MSPyDgnPlatform.DgnModelRef, sourceLevelId: int, inEntireFile: bool) -> tuple:
        """
        @Description Move elements of source level to destination level. The
        model-refs of both the source level and destination level are the
        same.
        
        :param numElementMovedOut:
        number of elements moved
        
        :param destLevelIdIn:
        destination level to move elements to
        
        :param modelRefIn:
        model ref
        
        :param sourceLevelIdIn:
        source level from which to elements from
        
        :param inEntireFileIn:
        if true, then move elements in entire file of modelRefIn, else
        move elements only in the specified model
        
        :returns:
        ERROR if the model-ref or the level ids are invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def ReportUsage(reportString: MSPyBentley.WString, modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> int:
        """
        @Description Generate a report that describes where a level is used in
        the context of the file of specified model-ref
        
        :param reportStringOut:
        report string
        
        :param modelRefIn:
        model ref
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the model-ref or level id is invalid, else SUCCESS
        
        See also:
        Level.GetUsageMask Level.IsUsed Level.GetUsage
        Level.GetElementCount Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SelectElement(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int) -> tuple:
        """
        @Description Select elements on specified level.
        
        :param numElementSelectedOut:
        number of elements selected
        
        :param modelRefIn:
        source model ref whose elements to copy
        
        :param levelIdIn:
        source level from which to copy elements from
        
        :returns:
        ERROR if the model-ref or the level ids are invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetActive(levelId: int) -> int:
        """
        @Description Set level as active.
        
        :param levelIdIn:
        level id
        
        :returns:
        ERROR if the level id is invalid or the level cannot be set as
        active
        
        Remark:
        s Returns **MSGID_errorElementAccessIsReadOnly** if element-access
        mode of the level is set to LevelElementAccess.ReadOnly or
        LevelElementAccess.ViewOnly
        
        See also:
        Level.IsActive Level.GetActive Level.SetActiveByName
        Params.SetActive Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetActiveByCode(levelCode: int) -> int:
        """
        @Description Set level with specified code as active. This function
        handles setting a library level as active. If the level with specified
        code is a library level, then, if necessary, the library level is
        copied into the current-file before setting the level active.
        
        :param levelCodeIn:
        level code
        
        :returns:
        ERROR if the level code is invalid or the level cannot be set as
        active, else SUCCESS
        
        See also:
        Level.IsActive Level.GetActive Level.SetActive
        Params.SetActive Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetActiveByName(levelId: int, levelName: str) -> int:
        """
        @Description Set level with specified name as active. This function
        handles setting a library level as active. If the level with specified
        name is a library level, then, if necessary, the library level is
        copied into the current-file before setting the level active.
        
        :param levelNameIn:
        level name
        
        :returns:
        ERROR if the level name is invalid or the level cannot be set as
        active, else SUCCESS
        
        See also:
        Level.IsActive Level.GetActive Level.SetActive
        Params.SetActive Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetCode(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, levelCode: int) -> int:
        """
        @Description Set level code. A level's code should be unique in the
        context of all the levels in a level-table i.e. all level codes in the
        context of a level-table should be unique.
        
        Remark:
        s A level code is displayed under the " Number " column of the
        level-manager.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param levelCodeIn:
        level code
        
        :returns:
        SUCCESS if the level code is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorCannotChangeAttachmentLevelCode**
        <DD> the specified model-ref is for an attachment <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified level is in a
        read-only state <DT> **MSGID_errorCannotChangeExternalLevel** <DD>
        the specified level is a library level <DT>
        **MSGID_errorCannotChangeDefaultLevelCode** <DD> the specified
        level is the default level <DT> **MSGID_errorLevelCodeIsNull**
        <DD> the specified level code is LEVEL_NULL_CODE <DT>
        **MSGID_errorLevelCodeIsDuplicate** <DD> the specified level code
        is duplicate <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level code cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level code set raises a LEVEL_CHANGE_CODE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetCode LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetColor(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, color: int, colorOverride: bool) -> int:
        """
        @Description Set level color. This sets the color to apply on an
        element of the level, when " level symbology " is turned on for the
        view. This is also termed as the level's OVERRIDE color. Note that
        this function has an additional " override " flag. The " override " flag
        has to be ON in order to use the color.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param colorIn:
        level color - may be NULL
        
        :param colorOverrideIn:
        level color override (true or false) - may be NULL
        
        :returns:
        SUCCESS if the level color is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level color cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level color set raises a LEVEL_CHANGE_ATTRIBUTE
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, then colorIn (if
        defined) is assumed to identify a color in the referenced file.
        
        See also:
        Level.GetColor Level.GetSymbology Level.SetSymbology
        LevelTable.Rewrite
        
        See also:
        Level.GetSymbology Level.SetSymbology LevelTable.Rewrite
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDescription(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, description: str) -> int:
        """
        @Description Set level description
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param descriptionIn:
        level name
        
        :returns:
        SUCCESS if the level description is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorCannotChangeAttachmentLevelCode**
        <DD> the specified model-ref is for an attachment <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified level is in a
        read-only state <DT> **MSGID_errorCannotChangeExternalLevel** <DD>
        the specified level is a library level <DT> **ERROR** <DD> if
        model-ref or level id is invalid or the level description cannot
        be set for some unspecified reason </DL>
        
        Remark:
        s A successful level description set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetDescription LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDisplay(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, display: bool) -> int:
        """
        @Description Set level display on/off. Turning off the display makes
        all the elements on the level invisible in all the views.
        
        Remark:
        s Call View.SetLevelDisplay to control the level display in a
        specific view.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param displayIn:
        display flag - true or false
        
        :returns:
        SUCCESS if the level display flag is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **ERROR** <DD> if model-ref or level id is invalid
        or the level display cannot be set for some unspecified reason
        </DL>
        
        Remark:
        s A successful level display flag raises a LEVEL_CHANGE_DISPLAY
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.SetDisplayMask Level.GetDisplayMask
        Level.GetDisplay Level.Rewrite View.SetLevelDisplay
        View.GetLevelDisplay
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDisplayPriority(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, priority: int) -> int:
        """
        @Description Set level display priority
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param priorityIn:
        level priority - may be NULL
        
        :returns:
        SUCCESS if the level priority is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level color cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful priority set raises a LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetDisplayPriority LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementAccess(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, elementAccess: MSPyDgnPlatform.LevelElementAccess) -> int:
        """
        @Description Set the level's element access mode. This can take one of
        4 values - LevelElementAccess.All, LevelElementAccess.Locked,
        LevelElementAccess.ReadOnly & LevelElementAccess.ViewOnly. The mode
        applies to elements on the level. The meaning attached to each of the
        modes is:<TABLE border=" 1 " cellspacing=" 3 " cellpadding=" 3 "> <TR>
        <TH>Access Mode</TH> <TH>Meaning</TH> </TR> <TR>
        <TD><TT>LevelElementAccess.All</TT></TD> <TD>Elements on the level
        have all access. This is the default mode.</TD> </TR> <TR>
        <TD><TT>LevelElementAccess.Locked</TT></TD> <TD>Elements on the level
        are locked. They can be copied, but cannot be modified or deleted. New
        elements can be added to the level - once added they are immediately
        locked. The level can be set active.</TD> </TR> <TR>
        <TD><TT>LevelElementAccess.ReadOnly</TT></TD> <TD>Elements on the
        level are for read-only purposes. They cannot be modified or deleted.
        The elements may be copied into another level. The level cannot be set
        active.</TD> </TR> <TR> <TD><TT>LevelElementAccess.ViewOnly</TT></TD>
        <TD>Elements on the level can only be viewed. They cannot be copied,
        modified or deleted. The level cannot be set active.</TD> </TR>
        </TABLE>
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param elementAccessIn:
        element access - one of <TT>LEVEL_ELEMENT_ACCESS_</TT>... (defined
        in leveltypes.h)
        
        :returns:
        SUCCESS if the level element access is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorTableIsOfAttachment** <DD> the specified model-ref is
        for an attachment <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level element access cannot be set for some
        unspecified reason </DL>
        
        Remark:
        s A successful level element access raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetElementAccess LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementByLevel(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, elementAttributeString: MSPyDgnPlatform.BitMask, inEntireFile: bool, isSetByLevel: bool) -> tuple:
        """
        @Description set or unset elements symbology to that of BYLEVEL.
        
        :param numElementChangedOut:
        number of elements changed
        
        :param modelRefIn:
        model ref
        
        :param levelIdIn:
        level to change elements symbology
        
        :param elementAttributeStringIn:
        mask of attributes, 1:color, 2:style, 3:weight
        
        :param inEntireFileIn:
        if true, then set elements symbology in entire file of modelrefIn,
        else set elements symbology only in the specified model
        
        :param isSetByLevel:
        if true, then set elements symbology to that of BYLEVEL, else
        unset elements symbology to that of BYLEVEL.
        
        :returns:
        ERROR if the model-ref or the level ids are invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementColor(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, color: int) -> int:
        """
        @Description Set element color. This sets the color to apply on an
        element of the level, when the element has its color set to BYLEVEL.
        This is also be termed as the level's BYLEVEL color.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param colorIn:
        element color
        
        :returns:
        SUCCESS if the level element color is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **MSGID_errorElementAccessIsReadOnly**
        <DD> the element-access for the level is atleast
        LevelElementAccess.ReadOnly <DT> **ERROR** <DD> if model-ref or
        level id is invalid or the element color cannot be set for some
        unspecified reason </DL>
        
        Remark:
        s A successful level element color set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table *
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, then colorIn (if
        defined) is assumed to identify a color in the referenced file.
        
        See also:
        Level.GetElementColor Level.GetElementSymbology
        Level.SetElementSymbology LevelTable.Rewrite
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementMaterialId(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, materialId: int) -> int:
        """
        @Description Set level element material id.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param materialIdIn:
        material id
        
        :returns:
        SUCCESS if the level color is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level color cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level material id set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, materialIdIn is
        assumed to identify a material in the referenced file.
        
        See also:
        Level.GetElementMaterialId Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementStyle(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, style: int, styleParams: MSPyDgnPlatform.LineStyleParams) -> int:
        """
        @Description Set element style. This sets the style to apply on an
        element of the level, when the element has its style set to BYLEVEL.
        This is also be termed as the level's BYLEVEL style.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param styleIn:
        element style - maybe NULL
        
        :param styleParamsIn:
        custom line style modifiers - maybe NULL
        
        :returns:
        SUCCESS if the level element style is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **MSGID_errorElementAccessIsReadOnly**
        <DD> the element-access for the level is atleast
        LevelElementAccess.ReadOnly <DT> **ERROR** <DD> if model-ref or
        level id is invalid or the element style cannot be set for some
        unspecified reason </DL>
        
        Remark:
        s A successful level element style set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, then styleIn (if
        defined) is assumed to identify a style in the referenced file.
        
        See also:
        Level.GetElementStyle Level.GetElementSymbology
        Level.SetElementSymbology LevelTable.Rewrite
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementSymbology(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, color: int, style: int, styleParams: MSPyDgnPlatform.LineStyleParams, weight: int) -> int:
        """
        @Description Set element symbology. This functions allows setting the
        one or more of the element color, style, weight & fill color
        simultaneously.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param colorIn:
        element color - maybe NULL
        
        :param styleIn:
        element style - maybe NULL
        
        :param styleParamsIn:
        custom line style modifiers - maybe NULL
        
        :param weightIn:
        element weight - maybe NULL
        
        :returns:
        SUCCESS if the level element fill color is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **MSGID_errorElementAccessIsReadOnly**
        <DD> the element-access for the level is atleast
        LevelElementAccess.ReadOnly <DT> **ERROR** <DD> if model-ref or
        level id is invalid or the level element symbology cannot be set
        for some unspecified reason </DL>
        
        Remark:
        s A successful level element symbology set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, then colorIn and
        styleIn (if defined) *must* identify color and style in the
        referenced file.
        
        See also:
        Level.GetElementSymbology LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetElementWeight(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, weight: int) -> int:
        """
        @Description Set element weight. This sets the style to apply on an
        element of the level, when the element has its weight set to BYLEVEL.
        This is also be termed as the level's BYLEVEL weight.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param weightIn:
        element weight
        
        :returns:
        SUCCESS if the level element weight is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **MSGID_errorElementAccessIsReadOnly**
        <DD> the element-access for the level is atleast
        LevelElementAccess.ReadOnly <DT> **ERROR** <DD> if model-ref or
        level id is invalid or the element weight cannot be set for some
        unspecified reason </DL>
        
        Remark:
        s A successful level element weight set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetElementWeight Level.GetElementSymbology
        Level.SetElementSymbology LevelTable.Rewrite
        
        See also:
        Level.GetElementSymbology Level.SetElementSymbology
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetFrozen(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, frozenType: MSPyMstnPlatform.LevelFrozenType, frozen: bool) -> int:
        """
        @Description Set level frozen on/off. Turning on the frozen makes all
        the elements on the level invisible. This is like turning off the
        display flag of a level with the following differences:<UL> <LI> If a
        cell-instance is on a frozen level, then all the elements of the cell-
        instance are not displayed, irrespective of the contained element's
        level. <LI> If an attachment is on a frozen level, then the attachment
        is not displayed. </UL>
        
        Remark:
        s There are two types of frozen controls described as follows:<DL
        COMPACT> <DT> <TT>LEVEL_FROZEN_TYPE_GLOBAL</TT> <DD>Turning on the
        global frozen flag makes an element on the level invisible across
        every use of the element in the file. <DT>
        <TT>LEVEL_FROZEN_TYPE_VP_FREEZE</TT> <DD>Turning on the viewport
        frozen flag makes an element on the level invisible only in the
        context of the model-ref. The specified model-ref should be either
        a layout model-ref, or a viewport model-ref or an attachment
        model-ref of a layout or a viewport. If the specified model-ref is
        an attachment model-ref, then the global frozen flag is propagated
        to all the model-refs (within the layout or viewport) with same
        file-object as the specified model-ref. </DL>
        
        :param modelRefIn:
        model
        
        :param levelIdIn:
        level id
        
        :param frozenTypeIn:
        one of <TT>LEVEL_FROZEN_TYPE_GLOBAL</TT> or
        <TT>LEVEL_FROZEN_TYPE_VP_FREEZE</TT> (defined in leveltable.h)
        
        :param frozenIn:
        frozen flag - true or false
        
        :returns:
        SUCCESS if the level freeze flag is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **ERROR** <DD> if model-ref or level id is invalid
        or the level freeze cannot be set for some unspecified reason
        </DL>
        
        Remark:
        s A successful level freeze flag raises a LEVEL_CHANGE_DISPLAY
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        LevelTable.GetFrozenMask LevelTable.SetFrozenMask
        LevelTable.GetDisplayFrozenMask Level.IsFrozen
        Level.GetFrozen Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetHidden(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, hidden: bool) -> int:
        """
        @Description Set level hidden on/off. A Hidden Level will not be
        visible in the User Interface i.e. none of the Level Controls will
        display such a level. Applications can use this together with Element
        Access set to READ_ONLY/VIEW_ONLY to throw elements into the design
        file that can only be viewed. Using regular Microstation, the user has
        no control over such elements. By default Hidden is OFF
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param hiddenIn:
        hidden flag - true or false
        
        :returns:
        SUCCESS if the level hidden flag is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorTableIsOfAttachment** <DD> the specified model-ref is
        for an attachment <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level hidden cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level hidden flag set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        LevelTable.GetHiddenMask Level.GetHidden Level.IsHidden
        Level.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetMaterialId(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, matrialId: int, materialOverride: bool) -> int:
        """
        @Description Set level material id.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param materialIdIn:
        material id - may be NULL
        
        :param materialOverrideIn:
        material override (true or false) - may be NULL
        
        :returns:
        SUCCESS if the level color is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level color cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level material id set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, materialIdIn is
        assumed to identify a material in the referenced file.
        
        See also:
        Level.GetMaterialId Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetName(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, name: str) -> int:
        """
        @Description Set level name. A level's name should be unique in the
        level table.
        
        Remark:
        
        Remark:
        s A space character is valid character, though leading and
        trailing spaces are disallowed. This function will strip off
        leading and trailing spaces from the specified name.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param nameIn:
        level name
        
        :returns:
        SUCCESS if the level is successfully renamed.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorCannotChangeAttachmentLevelName**
        <DD> the specified model-ref is for an attachment <DT>
        **MSGID_errorLevelIsReadOnly** <DD> the specified level is in a
        read-only state <DT> **MSGID_errorCannotChangeExternalLevel** <DD>
        the specified level is a library level <DT>
        **MSGID_errorCannotChangeDefaultLevelName** <DD> the specified
        level is the default level <DT> **MSGID_errorLevelNameIsNull**
        <DD> the specified level name is null <DT>
        **MSGID_errorLevelNameIsInvalid** <DD> the specified level name
        has invalid characters <DT> **MSGID_errorLevelNameIsDuplicate**
        <DD> the specified level name is duplicate <DT> **ERROR** <DD> if
        model-ref or level id is invalid or the level name cannot be set
        for some unspecified reason </DL>
        
        Remark:
        s A successful level name set raises a LEVEL_CHANGE_NAME event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetName Level.GetPathName
        LevelName.HasValidCharacters
        LevelName.ReplaceInvalidCharacters LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetPlot(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, plot: bool) -> int:
        """
        @Description Set level plot on/off. Turning off the plot disables
        plotting of all elements on the level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param plotIn:
        plot flag - true or false
        
        :returns:
        SUCCESS if the level plot flag is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT> **ERROR** <DD> if model-ref or
        level id is invalid or the level plot cannot be set for some
        unspecified reason </DL>
        
        Remark:
        s A successful level plot flag set raises a LEVEL_CHANGE_ATTRIBUTE
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        LevelTable.GetPlotMask Level.GetPlot Level.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, isReadOnly: bool) -> int:
        """
        @Description Set level read-only on/off. Setting a level as read-only
        means that its attributes cannot be changed. (exception:setting the
        level's display on/off is not affected by this setting). A read-only
        level cannot be deleted.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param isReadOnlyIn:
        read-only flag - true or false
        
        :returns:
        SUCCESS if the level read-only flag is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorTableIsOfAttachment** <DD> the
        specified model-ref is for an attachment <DT>
        **MSGID_errorLevelIsActive** <DD> the specified level is active
        and if setting the level to read-only <DT> **ERROR** <DD> if
        model-ref or level id is invalid or the level read-only flag
        cannot be set for some unspecified reason </DL>
        
        Remark:
        s A successful level read-only flag set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table.
        
        See also:
        LevelTable.GetReadOnlyMask Level.GetReadOnly
        Level.IsReadOnly Level.Rewrite
        
        See also:
        LevelTable.Rewrite
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetStyle(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, style: int, styleParams: MSPyDgnPlatform.LineStyleParams, styleOverride: bool) -> int:
        """
        @Description Set level style. This sets the style to apply on an
        element of the level, when " level symbology " is turned on for the
        view. This is also termed as the level's OVERRIDE style. Note that
        this function has an additional " override " flag. The " override " flag
        has to be ON in order to use the style.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param styleIn:
        level style - may be NULL
        
        :param styleParamsIn:
        custom line style modifiers - may be NULL
        
        :param styleOverrideIn:
        level style override (true or false) - may be NULL
        
        :returns:
        SUCCESS if the level style is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level style cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level style set raises a LEVEL_CHANGE_ATTRIBUTE
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        Remark:
        s If modelRefIn is a MSPyDgnPlatform.DgnAttachment, then piStyleIn
        (if defined) is assumed to identify a style in the referenced
        file.
        
        See also:
        Level.GetStyle Level.GetSymbology
        msmthLevel.SetSymbologyC LevelTable.Rewrite
        
        See also:
        Level.GetSymbology Level.SetSymbology LevelTable.Rewrite
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetTransparency(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, transparency: float) -> int:
        """
        @Description Set level display transparency. This sets the display
        transparency to apply on an element of the level.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param transparencyIn:
        level transparency (value between 0.0 & 1.0)
        
        :returns:
        SUCCESS if the level transparency is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level color cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level transparency set raises a
        LEVEL_CHANGE_ATTRIBUTE event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetTransparency LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetWeight(modelRef: MSPyDgnPlatform.DgnModelRef, levelId: int, weight: int, weightOverride: bool) -> int:
        """
        @Description Set level weight. This sets the weight to apply on an
        element of the level, when " level symbology " is turned on for the
        view. This is also termed as the level's OVERRIDE weight. Note that
        this function has an additional " override " flag. The " override " flag
        has to be ON in order to use the weight.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelIdIn:
        level id
        
        :param weightIn:
        level weight
        
        :param weightOverrideIn:
        level weight override - true or false
        
        :returns:
        SUCCESS if the level weight is successfully set.
        
        Remark:
        s Possible return failure codes are:<DL COMPACT> <DT>
        **MSGID_errorTableIsReadOnly** <DD> the level-table is in a read-
        only state <DT> **MSGID_errorLevelIsReadOnly** <DD> the specified
        level is in a read-only state <DT>
        **MSGID_errorCannotChangeExternalLevel** <DD> the specified level
        is a library level <DT> **ERROR** <DD> if model-ref or level id is
        invalid or the level weight cannot be set for some unspecified
        reason </DL>
        
        Remark:
        s A successful level weight set raises a LEVEL_CHANGE_ATTRIBUTE
        event.
        
        Remark:
        s Call LevelTable.Rewrite to save the updated level-table
        
        See also:
        Level.GetWeight Level.GetSymbology Level.SetSymbology
        LevelTable.Rewrite
        
        See also:
        LevelTable.Rewrite Bentley Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LevelAttribute:
    """
    None
    """

    @staticmethod
    def GetMask(attribyteType: LevelAttributeMaskType) -> MSPyDgnPlatform.BitMask:
        """
        Return the level-attribute bit-mask for a given attribute list type.
        
        :param attributeTypeIn:
        level attribute mask type to get
        
        :returns:
        level attribute bit-mask for given type.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LevelChangeType:
    """
    Members:
    
    eLEVEL_TABLE_REWRITE
    
    eLEVEL_CREATE
    
    eLEVEL_DELETE
    
    eLEVEL_CHANGE_NAME
    
    eLEVEL_CHANGE_CODE
    
    eLEVEL_CHANGE_PARENT
    
    eLEVEL_CHANGE_DISPLAY
    
    eLEVEL_CHANGE_ATTRIBUTE
    
    eLEVEL_CHANGE_ACTIVE
    
    eLEVEL_LIBRARY_ATTACH
    
    eLEVEL_LIBRARY_DETACH
    
    eLEVEL_CHANGE_USAGE
    
    eLEVEL_CHANGE_ELEMENT_COUNT
    
    eLEVEL_TABLE_UNDO
    
    eLEVEL_TABLE_REDO
    
    eLEVEL_TABLE_IMPORT
    
    eLEVEL_PRE_CHANGE_ACTIVE
    
    eLEVEL_PRE_DELETE
    
    eLEVEL_REWRITE
    """

    def __init__(self: MSPyMstnPlatform.LevelChangeType, value: int) -> None:
        ...
    
    eLEVEL_CHANGE_ACTIVE: LevelChangeType
    
    eLEVEL_CHANGE_ATTRIBUTE: LevelChangeType
    
    eLEVEL_CHANGE_CODE: LevelChangeType
    
    eLEVEL_CHANGE_DISPLAY: LevelChangeType
    
    eLEVEL_CHANGE_ELEMENT_COUNT: LevelChangeType
    
    eLEVEL_CHANGE_NAME: LevelChangeType
    
    eLEVEL_CHANGE_PARENT: LevelChangeType
    
    eLEVEL_CHANGE_USAGE: LevelChangeType
    
    eLEVEL_CREATE: LevelChangeType
    
    eLEVEL_DELETE: LevelChangeType
    
    eLEVEL_LIBRARY_ATTACH: LevelChangeType
    
    eLEVEL_LIBRARY_DETACH: LevelChangeType
    
    eLEVEL_PRE_CHANGE_ACTIVE: LevelChangeType
    
    eLEVEL_PRE_DELETE: LevelChangeType
    
    eLEVEL_REWRITE: LevelChangeType
    
    eLEVEL_TABLE_IMPORT: LevelChangeType
    
    eLEVEL_TABLE_REDO: LevelChangeType
    
    eLEVEL_TABLE_REWRITE: LevelChangeType
    
    eLEVEL_TABLE_UNDO: LevelChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelChangeType) -> int:
        ...
    
class LevelCountType:
    """
    Members:
    
    eLEVEL_COUNT_TYPE_ALL
    
    eLEVEL_COUNT_TYPE_USED
    
    eLEVEL_COUNT_TYPE_UNUSED
    
    eLEVEL_COUNT_TYPE_HIDDEN
    """

    def __init__(self: MSPyMstnPlatform.LevelCountType, value: int) -> None:
        ...
    
    eLEVEL_COUNT_TYPE_ALL: LevelCountType
    
    eLEVEL_COUNT_TYPE_HIDDEN: LevelCountType
    
    eLEVEL_COUNT_TYPE_UNUSED: LevelCountType
    
    eLEVEL_COUNT_TYPE_USED: LevelCountType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelCountType) -> int:
        ...
    
class LevelFrozenType:
    """
    Members:
    
    eLEVEL_FROZEN_TYPE_GLOBAL
    
    eLEVEL_FROZEN_TYPE_VP_FREEZE
    
    eLEVEL_FROZEN_TYPE_EFFECTIVE
    """

    def __init__(self: MSPyMstnPlatform.LevelFrozenType, value: int) -> None:
        ...
    
    eLEVEL_FROZEN_TYPE_EFFECTIVE: LevelFrozenType
    
    eLEVEL_FROZEN_TYPE_GLOBAL: LevelFrozenType
    
    eLEVEL_FROZEN_TYPE_VP_FREEZE: LevelFrozenType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelFrozenType) -> int:
        ...
    
class LevelIterateType:
    """
    Members:
    
    eLEVEL_ITERATE_TYPE_ALL_LEVELS
    
    eLEVEL_ITERATE_TYPE_USED_LEVELS
    
    eLEVEL_ITERATE_TYPE_UNUSED_LEVELS
    """

    def __init__(self: MSPyMstnPlatform.LevelIterateType, value: int) -> None:
        ...
    
    eLEVEL_ITERATE_TYPE_ALL_LEVELS: LevelIterateType
    
    eLEVEL_ITERATE_TYPE_UNUSED_LEVELS: LevelIterateType
    
    eLEVEL_ITERATE_TYPE_USED_LEVELS: LevelIterateType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelIterateType) -> int:
        ...
    
class LevelLibraryCountType:
    """
    Members:
    
    eLEVEL_LIBRARY_COUNT_TYPE_ALL
    
    eLEVEL_LIBRARY_COUNT_TYPE_MANUAL_ATTACHED
    
    eLEVEL_LIBRARY_COUNT_TYPE_AUTO_ATTACHED
    """

    def __init__(self: MSPyMstnPlatform.LevelLibraryCountType, value: int) -> None:
        ...
    
    eLEVEL_LIBRARY_COUNT_TYPE_ALL: LevelLibraryCountType
    
    eLEVEL_LIBRARY_COUNT_TYPE_AUTO_ATTACHED: LevelLibraryCountType
    
    eLEVEL_LIBRARY_COUNT_TYPE_MANUAL_ATTACHED: LevelLibraryCountType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelLibraryCountType) -> int:
        ...
    
class LevelLibraryFormat:
    """
    Members:
    
    eLEVEL_LIBRARY_FORMAT_ANY
    
    eLEVEL_LIBRARY_FORMAT_DGN
    
    eLEVEL_LIBRARY_FORMAT_CSV
    
    eLEVEL_LIBRARY_FORMAT_XML
    
    eLEVEL_LIBRARY_FORMAT_V7_LVL
    
    eLEVEL_LIBRARY_FORMAT_DWG
    """

    def __init__(self: MSPyMstnPlatform.LevelLibraryFormat, value: int) -> None:
        ...
    
    eLEVEL_LIBRARY_FORMAT_ANY: LevelLibraryFormat
    
    eLEVEL_LIBRARY_FORMAT_CSV: LevelLibraryFormat
    
    eLEVEL_LIBRARY_FORMAT_DGN: LevelLibraryFormat
    
    eLEVEL_LIBRARY_FORMAT_DWG: LevelLibraryFormat
    
    eLEVEL_LIBRARY_FORMAT_V7_LVL: LevelLibraryFormat
    
    eLEVEL_LIBRARY_FORMAT_XML: LevelLibraryFormat
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelLibraryFormat) -> int:
        ...
    
class LevelLibraryImportMethod:
    """
    Members:
    
    eLEVEL_LIBRARY_IMPORT_BY_ANY
    
    eLEVEL_LIBRARY_IMPORT_BY_NAME
    
    eLEVEL_LIBRARY_IMPORT_BY_CODE
    """

    def __init__(self: MSPyMstnPlatform.LevelLibraryImportMethod, value: int) -> None:
        ...
    
    eLEVEL_LIBRARY_IMPORT_BY_ANY: LevelLibraryImportMethod
    
    eLEVEL_LIBRARY_IMPORT_BY_CODE: LevelLibraryImportMethod
    
    eLEVEL_LIBRARY_IMPORT_BY_NAME: LevelLibraryImportMethod
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelLibraryImportMethod) -> int:
        ...
    
class LevelMaskOperation:
    """
    Members:
    
    eOff
    
    eOn
    
    eToggle
    """

    def __init__(self: MSPyMstnPlatform.LevelMaskOperation, value: int) -> None:
        ...
    
    eOff: LevelMaskOperation
    
    eOn: LevelMaskOperation
    
    eToggle: LevelMaskOperation
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LevelMaskOperation) -> int:
        ...
    
class LevelName:
    """
    None
    """

    @staticmethod
    def HasValidCharacters(nameString: str) -> bool:
        """
        @Description Check if specified Name String is valid
        
        :param nameStringIn:
        level name
        
        :returns:
        true if the Name String is valid, else false
        
        See also:
        LevelName.SetName LevelName.ReplaceInvalidCharacters Bentley
        Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LevelOverrideInfo:
    """
    None
    """

    @property
    def FileNameRegex(self: MSPyMstnPlatform.LevelOverrideInfo) -> MSPyBentley.WString:
        ...
    @FileNameRegex.setter
    def FileNameRegex(self: MSPyMstnPlatform.LevelOverrideInfo, arg0: MSPyBentley.WString) -> None:
        ...
    
    @property
    def IsOn(self: MSPyMstnPlatform.LevelOverrideInfo) -> bool:
        ...
    @IsOn.setter
    def IsOn(self: MSPyMstnPlatform.LevelOverrideInfo, arg0: bool) -> None:
        ...
    
    @property
    def LevelNameRegex(self: MSPyMstnPlatform.LevelOverrideInfo) -> MSPyBentley.WString:
        ...
    @LevelNameRegex.setter
    def LevelNameRegex(self: MSPyMstnPlatform.LevelOverrideInfo, arg0: MSPyBentley.WString) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LevelOverrideInfoArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.LevelOverrideInfoArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.LevelOverrideInfoArray, arg0: MSPyMstnPlatform.LevelOverrideInfoArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.LevelOverrideInfoArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.LevelOverrideInfoArray, x: MSPyMstnPlatform.LevelOverrideInfo) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.LevelOverrideInfoArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.LevelOverrideInfoArray, L: MSPyMstnPlatform.LevelOverrideInfoArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.LevelOverrideInfoArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.LevelOverrideInfoArray, i: int, x: MSPyMstnPlatform.LevelOverrideInfo) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.LevelOverrideInfoArray) -> MSPyMstnPlatform.LevelOverrideInfo
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.LevelOverrideInfoArray, i: int) -> MSPyMstnPlatform.LevelOverrideInfo
        
        Remove and return the item at index ``i``
        """
        ...
    
class LevelSpecification:
    """
    None
    """

    def GetDgnFile(self: MSPyMstnPlatform.LevelSpecification) -> MSPyDgnPlatform.DgnFile:
        """
        Gets the DgnFile containing the level".
        """
        ...
    
    def GetLevelName(self: MSPyMstnPlatform.LevelSpecification) -> MSPyBentley.WString:
        """
        Gets the level name for a LevelSpecification".
        """
        ...
    
    def SetDgnFile(self: MSPyMstnPlatform.LevelSpecification, dgnFile: MSPyDgnPlatform.DgnFile) -> None:
        """
        Sets the DgnFile containing the level".
        """
        ...
    
    def SetLevelName(self: MSPyMstnPlatform.LevelSpecification, levelName: MSPyBentley.WString) -> None:
        """
        Sets the level name for a LevelSpecification".
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LevelSpecificationPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.LevelSpecificationPtrArray, arg0: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.LevelSpecificationPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.LevelSpecificationPtrArray, x: MSPyMstnPlatform.LevelSpecification) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.LevelSpecificationPtrArray, x: MSPyMstnPlatform.LevelSpecification) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.LevelSpecificationPtrArray, L: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.LevelSpecificationPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.LevelSpecificationPtrArray, i: int, x: MSPyMstnPlatform.LevelSpecification) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.LevelSpecificationPtrArray) -> MSPyMstnPlatform.LevelSpecification
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.LevelSpecificationPtrArray, i: int) -> MSPyMstnPlatform.LevelSpecification
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.LevelSpecificationPtrArray, x: MSPyMstnPlatform.LevelSpecification) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class LevelTable:
    """
    None
    """

    @staticmethod
    def DrawLevels(viewDraw: List[bool[8]], incremental: bool, drawMode: MSPyDgnPlatform.DgnDrawMode, modelRef: MSPyDgnPlatform.DgnModelRef, levelBitMask: MSPyDgnPlatform.BitMask, startEndMsg: bool, startShared: bool) -> int:
        """
        @Description Draw all elements on a list of specified levels
        
        :param viewDraw:
        views to update. Should point to an array dimensioned to
        MSPyDgnPlatform.MAX_VIEWS, and viewDraw[i] controls whether view i is
        drawn. If NULL, all views are drawn.
        
        :param incrementalIn:
        if false, don't erase before drawing
        
        :param drawModeIn:
        erasing portion of drawing
        
        :param modelRefIn:
        model ref
        
        :param levelBitMaskIn:
        bitmask representing the list of levels to draw
        
        :param startEndMsgIn:
        if true then want in prog/complete msg
        
        :param drawSharedIn:
        if true, then draw all models/attachments which use the same level
        
        :returns:
        ERROR if the input level bit-mask is NULL or the model-ref is
        invalid, else SUCCESS
        
        See also:
        Level.Draw Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDisplayFrozenMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the effective combined display + frozen mask for
        level-table. Returns in a bit-mask form a represention of whether is
        level is displayed or not frozen (each bit is represented as:display-
        bit & inverse frozen-bit).
        
        @Remarks The bit-mask is 1 based. For example to get the display-
        frozen flag for a level with the function BitMask.TestBit, your
        call should look like:BitMask.TestBit(pDisplayFrozenBitMask,
        levelid -1) @Remarks Note the " const "ness of the returned bit-mask. It
        is important not to cast into a non-const bit-mask. This bit-mask
        should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The display + frozen mask as a BitMask. Returns NULL if modelRefIn
        is invalid. @Group " Level Tables "
        
        See also:
        usmthLevelTable.GetFrozenMaskC
        usmthLevelTable.GetDisplayMaskC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDisplayMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the display mask for level-table. Returns a bit-mask
        that represents which level's display is turned on or off.
        
        @Remarks The bit-mask is 1 based. For example to get the display flag
        for a level with the function BitMask.TestBit, your call should
        look like:BitMask.TestBit(pDisplayBitMask, levelid -1) @Remarks
        Note the " const "ness of the returned bit-mask. It is important not to
        cast into a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The display mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevel.SetDisplayMaskC
        usmthLevelTable.GetDisplayFrozenMaskC usmthLevel.GetDisplayC
        usmthLevel.SetDisplayC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetExternalMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the external mask for level-table. Returns a bit-mask
        that represents whether a level is external or not. A level is
        external, if it is associated with a library level.
        
        @Remarks The bit-mask is 1 based. For example to get the external flag
        for a level with the function BitMask.TestBit, your call should
        look like:BitMask.TestBit(pExternalBitMask, levelid -1) @Remarks
        Note the " const "ness of the returned bit-mask. It is important not to
        cast into a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The external mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevel.GetExternalC usmthLevel.IsExternalC
        usmthLevel.GetLibraryRefC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetFrozenMask(modelRef: MSPyDgnPlatform.DgnModelRef, frozenType: MSPyMstnPlatform.LevelFrozenType) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the frozen mask for level-table. Returns a bit-mask
        that represents whether a level is frozen or not.
        
        @Remarks The bit-mask is 1 based. For example to get the frozen flag
        for a level with the function BitMask.TestBit, your call should
        look like:BitMask.TestBit(pFrozenBitMask, levelid -1) @Remarks
        Note the " const "ness of the returned bit-mask. It is important not to
        cast into a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param frozenTypeIn:
        one of <TT>LEVEL_FROZEN_TYPE_</TT>... (defined in leveltable.h)
        
        :returns:
        The frozen mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevelTable.SetFrozenMaskC
        usmthLevelTable.GetDisplayFrozenMaskC usmthLevel.GetFrozenC
        usmthLevel.IsFrozenC usmthLevel.SetFrozenC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetHiddenMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the hidden mask for level-table. Returns a bit-mask
        that represents whether a level is hidden or not. If a level is
        hidden, then it is not displayed in the level manager.
        
        @Remarks The bit-mask is 1 based. For example to get the hidden flag
        for a level with the function BitMask.TestBit, your call should
        look like:BitMask.TestBit(pHiddenBitMask, levelid -1) @Remarks
        Note the " const "ness of the returned bit-mask. It is important not to
        cast into a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The hidden mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevel.GetHiddenC usmthLevel.IsHiddenC
        usmthLevel.SetHiddenC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetHighestLevelCode(modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Get the value of highest used level code in level-table.
        
        :param highestLevelCodeOut:
        highest level code
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        ERROR if the model-ref is invalid or pHighestLevelCode is NULL,
        else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetHighestLevelId(modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Get the value of highest used level id in level-table.
        
        :param highestLevelIdOut:
        highest level id
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        ERROR if the model-ref is invalid or highestLevelIdOut is NULL,
        else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetLevelCount(modelRef: MSPyDgnPlatform.DgnModelRef, levelCountType: int) -> tuple:
        """
        @Description Get the number of levels in level-table.
        
        :param levelCountOut:
        level count in level-table
        
        :param modelRefIn:
        model-ref of level-table
        
        :param levelCountTypeIn:
        one of <TT>LEVEL_COUNT_TYPE_</TT>... (defined in leveltable.h)
        
        Remark:
        s The return value of levelCountOut will depend on value of
        levelCountTypeIn as follows:<TABLE border=" 1 " cellspacing=" 3 "
        cellpadding=" 3 "> <TR> <TH>levelCountTypeIn</TH>
        <TH>levelCountOut</TH> </TR> <TR>
        <TD><TT>LEVEL_COUNT_TYPE_ALL</TT></TD> <TD>The number of levels in
        level table</TD> </TR> <TR>
        <TD><TT>LEVEL_COUNT_TYPE_USED</TT></TD> <TD>The number of used
        levels in level table</TD> </TR> <TR>
        <TD><TT>LEVEL_COUNT_TYPE_UNUSED</TT></TD> <TD>The number of un-
        used levels in level table</TD> </TR> </TABLE>
        
        :returns:
        ERROR if the model-ref is invalid or levelCountOut is NULL, else
        SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetPlotMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the plot mask for level-table. Returns a bit-mask
        that represents which level's plot is turned on or off.
        
        @Remarks The bit-mask is 1 based. For example to get the plot flag for
        a level with the function BitMask.TestBit, your call should look
        like:BitMask.TestBit(pPlotBitMask, levelid -1) @Remarks Note the
        " const "ness of the returned bit-mask. It is important not to cast into
        a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The plot mask as a BitMask. Returns NULL if modelRefIn is invalid
        @Group " Level Tables "
        
        See also:
        usmthLevel.GetPlotC usmthLevel.SetPlotC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Get read-only flag of level-table.
        
        :param isReadOnlyOut:
        read-only flag - true or false
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        ERROR if the model-ref is invalid or isReadOnlyOut is NULL, else
        SUCCESS
        
        See also:
        LevelTable.IsReadOnly LevelTable.SetReadOnly Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetReadOnlyMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the read-only mask for level-table. Returns a bit-
        mask that represents whether a level is read-only or not. If a level
        is readonly, then its attributes cannot be changed.
        
        @Remarks The bit-mask is 1 based. For example to get the read-only
        flag for a level with the function BitMask.TestBit, your call
        should look like:BitMask.TestBit(pReadOnlyBitMask, levelid -1)
        @Remarks Note the " const "ness of the returned bit-mask. It is
        important not to cast into a non-const bit-mask. This bit-mask should
        not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The read-only mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevel.GetReadOnlyC usmthLevel.IsReadOnlyC
        usmthLevel.SetReadOnlyC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetUsageMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the level usage mask for level-table. Returns a bit-
        mask that represents whether a level is used or not.
        
        @Remarks The bit-mask is 1 based. For example to get the used flag for
        a level with the function BitMask.TestBit, your call should look
        like:BitMask.TestBit(pUsedBitMask, levelid -1) @Remarks Note the
        " const "ness of the returned bit-mask. It is important not to cast into
        a non-const bit-mask. This bit-mask should not be changed.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        The usage mask as a BitMask. Returns NULL if modelRefIn is
        invalid. @Group " Level Tables "
        
        See also:
        usmthLevel.GetUsageC usmthLevel.IsUsedC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Check if level-table is read-only.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        true if the level-table is read-only, else false
        
        Remark:
        s If modelRefIn is invalid, then the function returns false.
        
        See also:
        LevelTable.GetReadOnly LevelTable.SetReadOnly Bentley
        Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Rewrite(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Rewrite the level-table data into current-file. This
        action has one of the following effects:<UL> <LI> If the level-table
        does not exist in the file, then it is added into the file. <LI> If
        the level-table already exists in the file, then the information in
        this level-table is updated based on changes made to the level-data.
        <LI> For an attachment's level-table, if there are no more any
        override levels, then this function will remove the attachment's
        override level-table from file. </UL>
        
        <p> This function should be called whenever any of the level-table's
        data is changed by calls to any of the Level.Set... or
        LevelTable.Set... functions. The call to LevelTable.Rewrite will
        make the changes permanent. Otherwise, the changes will be valid only
        in the current session. The call to LevelTable.Rewrite is
        accumalative, i.e. it writes all the changes made to level data. In
        other words, multiple changes in the context of a single model-ref can
        be made before calling LevelTable.Rewrite. The rewrite function
        will rewrite all the changes made to levels of the specified model-
        ref. </p>
        
        @Remarks A successful write to file raises a LEVEL_TABLE_REWRITE
        event.
        
        :param modelRefIn:
        model-ref of level-table
        
        :returns:
        ERROR if the model-ref is invalid, else SUCCESS
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDisplayMask(modelRef: MSPyDgnPlatform.DgnModelRef, displayMask: MSPyDgnPlatform.BitMask, updateView: bool) -> int:
        """
        @Description Set the display flag for all levels of level-table.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param displayMaskIn:
        level display mask to set
        
        :param updateViewIn:
        if true, then update the views
        
        :returns:
        ERROR if the model-ref is invalid or the level-table is READ-ONLY,
        else SUCCESS @Group " Level Tables "
        
        See also:
        usmthLevel.GetDisplayMaskC usmthLevel.GetDisplayC
        usmthLevel.SetDisplayC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetFrozenMask(modelRef: MSPyDgnPlatform.DgnModelRef, frozenMask: MSPyDgnPlatform.BitMask, frozenType: MSPyMstnPlatform.LevelFrozenType, updateView: bool) -> int:
        """
        @Description Set the frozen flag for all levels of level-table.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param frozenMaskIn:
        level frozen mask to set
        
        :param frozenTypeIn:
        one of <TT>LEVEL_FROZEN_TYPE_</TT>... (defined in leveltable.h)
        
        :param updateViewIn:
        if true, then update the views
        
        :returns:
        ERROR if the model-ref is invalid or the level-table is READ-ONLY,
        else SUCCESS @Group " Level Tables "
        
        See also:
        usmthLevelTable.GetFrozenMaskC
        usmthLevelTable.GetDisplayFrozenMaskC usmthLevel.GetFrozenC
        usmthLevel.IsFrozenC usmthLevel.SetFrozenC Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef, isReadOnly: bool) -> int:
        """
        @Description Set read-only flag of level-table. Setting a level-table
        as read-only has the following implications:<UL> <LI>No new levels
        can be created in the level-table. <LI>None of the exisiting levels
        can be deleted from the level-table. <LI>None of the level attributes
        can be modified. <LI>No new level library can be attached to the
        level-table. <LI>None of the existing level libraries can be detached
        from the level-table. </UL> By default, read-only is OFF.
        
        :param modelRefIn:
        model-ref of level-table
        
        :param isReadOnlyIn:
        read-only flag - true or false
        
        :returns:
        ERROR if the model-ref is invalid, else SUCCESS
        
        See also:
        LevelTable.IsReadOnly LevelTable.GetReadOnly Bentley Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LocateCallback:
    """
    None
    """

    @staticmethod
    def SetAcceptFunction(newFunc: Callable[[MSPyBentleyGeom.DPoint3d, int], None], funcID: str) -> Callable[[MSPyBentleyGeom.DPoint3d, int], None]:
        """
        @Description Set up the locate function for when the user accepts the
        highlighted element. This function is also set with the pAccept
        argument to mdlState_startModifyCommand. <p> Whenever a primitive
        command is started, the locate user functions are cleared. Therefore,
        always call mdlState_startModifyCommand before calling
        SetAcceptFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set,or NULL.
        """
        ...
    
    @staticmethod
    def SetCleanFunction(newFunc: Callable[[str], None], funcID: str) -> Callable[[str], None]:
        """
        @Description Set up the locate function to clean up the result of a
        selection. This function is also set with the pClean argument to
        mdlState_startModifyCommand. <p> Whenever a primitive command is
        started, the locate user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetCleanFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetElementDoubleClickFunction(newFunc: Callable[[MSPyDgnPlatform.DisplayPath], bool], funcID: str) -> Callable[[MSPyDgnPlatform.DisplayPath], bool]:
        """
        @Description Set up the locate function to respond to double-click
        events on an element. <p> Whenever a primitive command is started, the
        locate user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling
        SetElementDoubleClickFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetGlobalPostLocateFunction(newFunc: Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus], funcID: str) -> Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus]:
        """
        @Description This is the same as SetPostLocateFunction, except that
        this function is remains active regardless of the active command.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The
        return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetGlobalPreLocateFunction(newFunc: Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus], funcID: str) -> Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus]:
        """
        @Description This is the same as SetPreLocateFunction, except that
        this function is remains active regardless of the active command.
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetNotFoundFunction(newFunc: Callable[[str], None], funcID: str) -> Callable[[str], None]:
        """
        @Description Set up the locate function that is called whenever
        MicroStation attempts to Locate an element, but no acceptable elements
        were found. <p> Whenever a primitive command is started, the locate
        user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetNotFoundFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetOverridePathDescriptionFunction(newFunc: Callable[[MSPyDgnPlatform.DisplayPath, MSPyBentley.WString], None], funcID: str) -> Callable[[MSPyDgnPlatform.DisplayPath, MSPyBentley.WString], None]:
        """
        @Description Set up the locate function that is called to provide a
        description of a DisplayPathCP for the user. <p> Whenever a primitive
        command is started, the locate user functions are cleared. Therefore,
        always call mdlState_startModifyCommand before calling
        SetOverridePathDescriptionFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetPostLocateFunction(newFunc: Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus], funcID: str) -> Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus]:
        """
        @Description Set up the locate function for all elements that are in
        the proximity of the test point, **after** the element has already
        passed the Search Criteria. <p> Whenever a primitive command is
        started, the locate user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetPostLocateFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetPreLocateFunction(newFunc: Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus], funcID: str) -> Callable[[MSPyDgnPlatform.LOCATE_Action, MSPyDgnPlatform.MSElement, MSPyDgnPlatform.DgnModelRef, int, MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.HitPath, MSPyBentley.WString], MSPyDgnPlatform.LocateFilterStatus]:
        """
        @Description Set up the locate function for all elements that are in
        the proximity of the test point, but **before** MicroStation applies
        the Search Criteria. <p> Whenever a primitive command is started, the
        locate user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetPreLocateFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetSelectCmdFunction(newFunc: Callable[[MSPyDgnView.SelectionSetAction, int, MSPyDgnPlatform.DgnModelRef], int], funcID: str) -> Callable[[MSPyDgnView.SelectionSetAction, int, MSPyDgnPlatform.DgnModelRef], int]:
        """
        @Description Set up the locate function that is called whenever
        MicroStation attempts to Locate an element, but no acceptable elements
        were found. <p> Whenever a primitive command is started, the locate
        user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetSelectCmdFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    @staticmethod
    def SetShowFunction(newFunc: Callable[[MSPyBentleyGeom.DPoint3d, int], None], funcID: str) -> Callable[[MSPyBentleyGeom.DPoint3d, int], None]:
        """
        @Description Set up the locate function to show the result of a
        selection. This function is also set with the pShow argument to
        mdlState_startModifyCommand. <p> Whenever a primitive command is
        started, the locate user functions are cleared. Therefore, always call
        mdlState_startModifyCommand before calling SetShowFunction. <p>
        @Param(input) newFunc The new function to call, or NULL.
        @Param(input) funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set, or NULL.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class LockChanged_Events:
    """
    Members:
    
    eLOCKCHANGED_Snap
    
    eLOCKCHANGED_Grid
    
    eLOCKCHANGED_Unit
    
    eLOCKCHANGED_Angle
    
    eLOCKCHANGED_Textnode
    
    eLOCKCHANGED_Axis
    
    eLOCKCHANGED_Scale
    
    eLOCKCHANGED_GraphicGroup
    
    eLOCKCHANGED_Level
    
    eLOCKCHANGED_CellStretch
    
    eLOCKCHANGED_ConstructionPlane
    
    eLOCKCHANGED_Isometric
    
    eLOCKCHANGED_Association
    
    eLOCKCHANGED_Depth
    
    eLOCKCHANGED_ConstructionPlanePerp
    
    eLOCKCHANGED_FenceMode
    
    eLOCKCHANGED_IsometricPlane
    
    eLOCKCHANGED_UseAnnotationScale
    
    eLOCKCHANGED_ACSContext
    
    eLOCKCHANGED_ElementTemplateAssociation
    
    eLOCKCHANGED_SharedCells
    """

    def __init__(self: MSPyMstnPlatform.LockChanged_Events, value: int) -> None:
        ...
    
    eLOCKCHANGED_ACSContext: LockChanged_Events
    
    eLOCKCHANGED_Angle: LockChanged_Events
    
    eLOCKCHANGED_Association: LockChanged_Events
    
    eLOCKCHANGED_Axis: LockChanged_Events
    
    eLOCKCHANGED_CellStretch: LockChanged_Events
    
    eLOCKCHANGED_ConstructionPlane: LockChanged_Events
    
    eLOCKCHANGED_ConstructionPlanePerp: LockChanged_Events
    
    eLOCKCHANGED_Depth: LockChanged_Events
    
    eLOCKCHANGED_ElementTemplateAssociation: LockChanged_Events
    
    eLOCKCHANGED_FenceMode: LockChanged_Events
    
    eLOCKCHANGED_GraphicGroup: LockChanged_Events
    
    eLOCKCHANGED_Grid: LockChanged_Events
    
    eLOCKCHANGED_Isometric: LockChanged_Events
    
    eLOCKCHANGED_IsometricPlane: LockChanged_Events
    
    eLOCKCHANGED_Level: LockChanged_Events
    
    eLOCKCHANGED_Scale: LockChanged_Events
    
    eLOCKCHANGED_SharedCells: LockChanged_Events
    
    eLOCKCHANGED_Snap: LockChanged_Events
    
    eLOCKCHANGED_Textnode: LockChanged_Events
    
    eLOCKCHANGED_Unit: LockChanged_Events
    
    eLOCKCHANGED_UseAnnotationScale: LockChanged_Events
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.LockChanged_Events) -> int:
        ...
    
class MSBitMask:
    """
    None
    """

    @staticmethod
    def AnyBitSet(bitMask: MSPyDgnPlatform.BitMask) -> bool:
        """
        @Description Check if specified bit-mask has any bit set to true
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :returns:
        true if any bit is set
        
        Remark:
        """
        ...
    
    @staticmethod
    def Clone(bitMask: MSPyDgnPlatform.BitMask) -> MSPyDgnPlatform.BitMask:
        """
        @Description Clone the specified BitMask.
        
        :param pBitMask:
        (input) the BitMask to copy
        
        :returns:
        a deep copy of the BitMask or NULL if there was an error
        
        Remark:
        """
        ...
    
    @staticmethod
    def Create(arg0: bool) -> tuple:
        """
        defaultBitValue
        """
        ...
    
    @staticmethod
    def CreateFromBitArray(bitArray: MSPyBentleyGeom.UInt16Array, defaultBitValue: bool) -> tuple:
        """
        @Description Create a new bit-mask structure - initializes itself from
        input bit-array. Note:This function copies the input bit-array.
        
        :param ppBitMaskOut:
        (output) new bit-mask structure
        
        :param numValidBitsIn:
        (input) number of bits that are valid in pBitArrayIn
        
        :param pBitArrayIn:
        (input) bit array as an array of short-words
        
        :param defaultBitValueIn:
        (input) the default value for bits in the mask.
        
        :returns:
        ERROR if the bit-mask structure cannot be created
        
        Remark:
        """
        ...
    
    @staticmethod
    def Dump(fileName: str, bitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Dump specified bit-mask data into specified file
        
        :param pFileNameIn:
        (input) file name to dump into
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :returns:
        SUCCESS
        
        Remark:
        """
        ...
    
    @staticmethod
    def EnsureCapacity(bitMask: MSPyDgnPlatform.BitMask, numBit: int) -> int:
        """
        @Description Ensure that if the specified bit-mask can carry the
        specified number of bits. This function will only expand the specified
        the bit-mask to specified number of bits (conversely, will never
        contract the specified bit-mask)
        
        :param pBitMaskIn:
        (input) bit-mask
        
        :param numBitIn:
        (input) number of bits to ensure
        
        :returns:
        ERROR if the bit-mask structure cannot be expanded.
        
        Remark:
        """
        ...
    
    @staticmethod
    def Equal(bitMask1: MSPyDgnPlatform.BitMask, bitMask2: MSPyDgnPlatform.BitMask) -> bool:
        """
        @Description Check if two specified bit-masks are equal
        
        :param pBitMask1In:
        (input) first bit mask
        
        :param pBitMask2In:
        (input) second bit mask
        
        :returns:
        true if the bit-masks are equal, false if not
        
        Remark:
        """
        ...
    
    @staticmethod
    def Free(bitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Free specified bit-mask & all its internal memory
        
        :param ppBitMaskIn:
        (input) bit-mask structure to free
        
        :returns:
        ERROR if the bit-mask structure cannot be freed
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetAsString(stringOut: MSPyBentley.WString, bitMask: MSPyDgnPlatform.BitMask, indexOrigin: int) -> int:
        """
        @Description Get a string which represents the bit-mask. The string
        will a ", " delimited set of bit indices which are set to ON. Ranges of
        ON bit-indices will be returned in a range form (such as n1-n2). An
        example return string:1,10-15,20,31-35
        
        :param pStringOut:
        (output) pre-allocated string in which the bit-mask will be outputted
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param indexOriginIn:
        (input) index corresponding to lowest order bit (1 or 0)
        
        :returns:
        ERROR if the bits from specified string cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetBit(bitMask: MSPyDgnPlatform.BitMask, bitIndex: int) -> tuple:
        """
        @Description Get value at specified bit-position in bit-mask.
        
        :param pBitFlagOut:
        (output) bit flag, true then bit is on, else false
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param bitIndexIn:
        (input) bit index to get
        
        :returns:
        ERROR if the bit-position is outside the size of bit-mask
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetDefaultBitValue(bitMask: MSPyDgnPlatform.BitMask) -> bool:
        """
        @Description Get the default value for bits beyond the allocated
        number of bits in the bit mask.
        
        :param pBitMaskIn:
        (input) bit-mask for which to get defaultBitValue
        
        :returns:
        the default bit value for pBitMaskIn
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetHighestBit(bitMask: MSPyDgnPlatform.BitMask) -> tuple:
        """
        @Description Get the position of the highest possible bit in specified
        bit-mask that can be set without expanding the bit-mask
        
        :param pHighestPositionOut:
        (output) highest bit position possible without requiring an expansion
        
        :param pBitMaskIn:
        (input) bit-mask array
        
        :returns:
        ERROR if the highest bit cannot be got
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetNumBitsSet(bitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Get the number of bits set to 1 in the bit mask.
        
        :param pBitMaskIn:
        (input) bit-mask for which to get number valid bits
        
        :returns:
        The number of bits set
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetNumValidBits(bitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Get the number of valid bits in the bit mask.
        
        :param pBitMaskIn:
        (input) bit-mask for which to get number valid bits
        
        :returns:
        the number of valid bits.
        
        Remark:
        """
        ...
    
    @staticmethod
    def InvertAll(bitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Invert value of all bits in specified bit-mask
        
        :param pBitMaskIn:
        (input) bit-mask array
        
        :returns:
        ERROR if the bits cannot be inverted
        
        Remark:
        """
        ...
    
    @staticmethod
    def InvertBit(bitMask: MSPyDgnPlatform.BitMask, bitIndex: int) -> int:
        """
        @Description Invert value of specified bit in specified bit-mask
        
        :param pBitMaskIn:
        (input) bit-mask array
        
        :param bitIndexIn:
        (input) bit index to invert
        
        :returns:
        ERROR if the specified bit cannot be inverted
        
        Remark:
        """
        ...
    
    @staticmethod
    def LogicalOperation(bitMaskOut: MSPyDgnPlatform.BitMask, bitMaskIn: MSPyDgnPlatform.BitMask, operation: MSPyDgnPlatform.BitMaskOperation) -> int:
        """
        @Description Apply " pBitMask " on " pBitMaskOut " using specified logical
        operation. The logical operation may be BitMaskOperation.And,
        BitMaskOperation.Or, BitMaskOperation.Xor, BitMaskOperation.OrNot,
        BitMaskOperation.AndNot.
        
        :param pBitMaskOut:
        (output) destination bit-mask array and first operand
        
        :param pBitMaskIn:
        (input) second operand
        
        :param operation:
        (input) operation code (see above)
        
        :returns:
        ERROR if the bits from specified string cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetAll(bitMask: MSPyDgnPlatform.BitMask, bitFlag: bool) -> int:
        """
        @Description Set all bits in specified bit-mask to either true or
        false
        
        :param pBitMaskIn:
        (input) bit-mask array
        
        :param bitFlagIn:
        (input) bit flag, if false then set all bits off, else set all bits ON
        
        :returns:
        ERROR if the bits cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetBit(bitMask: MSPyDgnPlatform.BitMask, bitIndex: int, bitFlag: bool) -> int:
        """
        @Description Set value at specified bit-position in bit-mask. If the
        specified bit-position is outside the size of the bit-mask, then this
        function will expand the size of the input bit-mask to fit in the bit-
        position.
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param bitIndexIn:
        (input) bit index to set
        
        :param bitFlagIn:
        (input) bit flag, if true then bit as on, else as off
        
        :returns:
        ERROR if the bit at specified position cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetBitAtPositions(bitMask: MSPyDgnPlatform.BitMask, arrayPosition: int, bitPosition: int, bitFlag: bool) -> int:
        """
        @Description Set bit at specified array-position (bitIndexIn / 16) &
        bit-position in array (bitIndexIn % 16)
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param arrayPositionIn:
        (input) internal array position of bit index
        
        :param bitPositionIn:
        (input) internal bit position of bit index
        
        :param bitFlagIn:
        (input) bit value to set
        
        :returns:
        ERROR if the bit at specified position cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetBits(bitMask: MSPyDgnPlatform.BitMask, bitIndexArray: MSPyBentleyGeom.UInt32Array, bitFlag: bool) -> int:
        """
        @Description Set the value of an array of specified bit-positions in
        bit-mask. If any of the specified bit-positions are outside the size
        of the bit-mask, then this function will expand the size of the input
        bit-mask to fit-in for the maximum possible bit-position.
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param numBitInArray:
        (input) number of bits in array
        
        :param pBitIndexArrayIn:
        (input) bit index array
        
        :param bitFlagIn:
        (input) bit flag, if true then bit as on, else as off
        
        :returns:
        ERROR if the bits at specified positions cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDefaultBitValue(bitMask: MSPyDgnPlatform.BitMask, defaultBitValue: bool) -> int:
        """
        @Description Set the default value for bits beyond the allocated
        number of bits in the bit mask.
        
        :param pBitMaskIn:
        (input) bit-mask for which to set defaultBitValue
        
        :param defaultBitValueIn:
        (input) the default value for bits in the mask.
        
        :returns:
        ERROR if pBitMaskIn is NULL
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetFromBitArray(bitMask: MSPyDgnPlatform.BitMask, bitArray: MSPyBentleyGeom.UInt16Array) -> int:
        """
        @Description Set bit-mask from specified bit-array. The resultant bit-
        mask will be of the same size as the specified bit-array.
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param numValidBitsIn:
        (input) number of bits that are valid in pBitArrayIn
        
        :param pBitArrayIn:
        (input) bit array as an array of short-words
        
        :returns:
        ERROR if the bit from bit-array cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetFromBitMask(bitMask: MSPyDgnPlatform.BitMask, sourceBitMask: MSPyDgnPlatform.BitMask) -> int:
        """
        @Description Set bit-mask from specified source bit-mask. The
        resultant bit-mask will be of the same size as the specified source
        bit-mask. The default value of the resultant bit-mask will be set to
        be the same as that of the source bit-mask.
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param pSourceBitMaskIn:
        (input) source bit mask array
        
        :returns:
        ERROR if the bits from specified bit-mask cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetFromString(bitMask: MSPyDgnPlatform.BitMask, sourceString: str, indexOrigin: int, maxIndex: int) -> int:
        """
        @Description Set bit-mask from specified string. Set bit-mask from a
        set of " " or ", " delimited in a string. The string may contain ranges
        too. e.g. string:1,10-15,3,20,25-28,31-35 If the largest bit-position
        implied in the specified string is larger than the bit-mask size, then
        the bit-mask will expand to fit-in the largest bit-position.
        " maxIndexIn " is used if you have/want a bitmask of a predetermined
        size & do not want its size to exceed the specified value.
        " maxIndexIn " can be set to -1, in which case the argument is ignored.
        
        :param pBitMaskOut:
        (output) bit mask array
        
        :param pSourceStringIn:
        (input) source string from which to parse the bit-mask information
        
        :param indexOriginIn:
        (input) index corresponding to lowest order bit (1 or 0)
        
        :param maxIndexIn:
        (input) maximum index to set
        
        :returns:
        ERROR if the bits from specified string cannot be set
        
        Remark:
        """
        ...
    
    @staticmethod
    def TestBit(bitMask: MSPyDgnPlatform.BitMask, bitPosition: int) -> bool:
        """
        @Description Check if specified bit of bit-mask is set to true
        
        :param pBitMaskIn:
        (input) bit mask array
        
        :param bitPositionIn:
        (input) bit position to test
        
        :returns:
        true if the bit at specified position is ON (true), false if not
        
        Remark:
        """
        ...
    
    @staticmethod
    def TestBitMask(bitMask1: MSPyDgnPlatform.BitMask, bitMask2: MSPyDgnPlatform.BitMask) -> bool:
        """
        @Description Check if two specified bit-masks have any bits which have
        the same value
        
        :param pBitMask1In:
        (input) first bit mask
        
        :param pBitMask2In:
        (input) second bit mask
        
        :returns:
        true if the bit-masks have any bit in common
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MSDisplayDescr:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.MSDisplayDescr) -> None:
        ...
    
    @property
    def aspect(self: MSPyMstnPlatform.MSDisplayDescr) -> float:
        ...
    @aspect.setter
    def aspect(self: MSPyMstnPlatform.MSDisplayDescr, arg0: float) -> None:
        ...
    
    @property
    def charHeight(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @charHeight.setter
    def charHeight(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def charWidth(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @charWidth.setter
    def charWidth(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def cursorHeight(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @cursorHeight.setter
    def cursorHeight(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def cursorWidth(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @cursorWidth.setter
    def cursorWidth(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def gammaCorrection(self: MSPyMstnPlatform.MSDisplayDescr) -> float:
        ...
    @gammaCorrection.setter
    def gammaCorrection(self: MSPyMstnPlatform.MSDisplayDescr, arg0: float) -> None:
        ...
    
    @property
    def gammaTable(arg0: MSPyMstnPlatform.MSDisplayDescr) -> bytearray:
        ...
    
    @property
    def id(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @id.setter
    def id(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def screenHeight(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @screenHeight.setter
    def screenHeight(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def screenRect(self: MSPyMstnPlatform.MSDisplayDescr) -> MSPyDgnPlatform.BSIRect:
        ...
    @screenRect.setter
    def screenRect(self: MSPyMstnPlatform.MSDisplayDescr, arg0: MSPyDgnPlatform.BSIRect) -> None:
        ...
    
    @property
    def screenWidth(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @screenWidth.setter
    def screenWidth(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def xResolution(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @xResolution.setter
    def xResolution(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
    @property
    def yResolution(self: MSPyMstnPlatform.MSDisplayDescr) -> int:
        ...
    @yResolution.setter
    def yResolution(self: MSPyMstnPlatform.MSDisplayDescr, arg0: int) -> None:
        ...
    
class MSDocumentManager:
    """
    None
    """

    def CompareDocumentWorkspaces(self: MSPyMstnPlatform.MSDocumentManager, document1: MSPyDgnPlatform.DgnDocumentMoniker, document2: MSPyDgnPlatform.DgnDocumentMoniker, generatorArgs: str) -> tuple:
        """
        Compares workspace of two documents
        
        
        
        
        :param document1:
        Moniker to first document of which workspace is to be compared
        with that of second document.
        
        :param document2:
        Moniker to second document of which workspace is to be compared
        with that of first document.
        
        :param generatorArgs:
        Arguments for worker process *
        
        Returns (Tuple, 0):
        SUCCESS if comparison is done successfully.
        
        
        Returns (Tuple, 1):
        profilesEqual. Reference to a bool. Its value will be true if workspaces are
        equal.
        """
        ...
    
    def CreateDgnBaseMonikerList(self: MSPyMstnPlatform.MSDocumentManager) -> MSPyDgnPlatform.DgnBaseMonikerList:
        ...
    
    def CreateFolderMonikerList(self: MSPyMstnPlatform.MSDocumentManager) -> MSPyDgnPlatform.DgnFolderMonikerList:
        ...
    
    def CreateMonikerList(self: MSPyMstnPlatform.MSDocumentManager) -> MSPyDgnPlatform.DgnDocumentMonikerList:
        ...
    
    def CreateNewDocumentDialog(self: MSPyMstnPlatform.MSDocumentManager, params: MSPyMstnPlatform.PyDocumentOpenDialogParams, overwriteMode: MSPyDgnPlatform.DgnDocument.OverwriteMode) -> tuple:
        """
        Create a new document, using a dialog to browse for the file name and
        location. Optionally, test for the existence of the file, and
        optionally prompt the user for whether to overwrite the file or not.
        
        
        
        :param params:
        A structure containing file open parameters. The entire structure
        should be memset to 0 and then individual fields set as necessary.
        
        :param overwriteMode:
        Sepcifies what to do if the document already exists *
        
        Returns(Tuple, 0):
        An DgnDocument that represents the file. On failure, NULL is
        Returned.
        
        Returns (Tuple, 1):
        status. this gives an indication of why.
        """
        ...
    
    def DeleteDocument(*args, **kwargs):
        """
        DeleteDocument(self: MSPyMstnPlatform.DgnDocumentManager, doc: MSPyDgnPlatform.DgnDocument, options: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions = <DeleteOptions.eDefault: 0>) -> int
        
        @name Methods to manage documents in the DMS repository Remove the
        document from the DMS.
        
        Remark:
        s If the DMS is the native file system, this method deletes the
        disk file.
        """
        ...
    
    def DeleteFolder(*args, **kwargs):
        """
        DeleteFolder(self: MSPyMstnPlatform.DgnDocumentManager, folderMoniker: MSPyDgnPlatform.DgnFolderMoniker, options: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions = <DeleteOptions.eDefault: 0>) -> int
        
        Remove the folder from the DMS.
        """
        ...
    
    class DeleteOptions:
        """
        Members:
        
        eDefault
        
        eAllowRestore
        
        eIncludeSubItems
        """
    
        def __init__(self: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions, value: int) -> None:
            ...
        
        eAllowRestore: DeleteOptions
        
        eDefault: DeleteOptions
        
        eIncludeSubItems: DeleteOptions
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.DgnDocumentManager.DeleteOptions) -> int:
            ...
        
    class DgnBrowserStatus:
        """
        Members:
        
        eSuccess
        
        eCancel
        
        eNoIntegrationLoaded
        """
    
        def __init__(self: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus, value: int) -> None:
            ...
        
        eCancel: DgnBrowserStatus
        
        eNoIntegrationLoaded: DgnBrowserStatus
        
        eSuccess: DgnBrowserStatus
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus) -> int:
            ...
        
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.MSDocumentManager:
        """
        Obtain a reference to MicroStation's document manager. To call methods
        on the document manager, use MSDocumentManager.GetManager().Method
        
        :returns:
        The document manager *
        """
        ...
    
    def OpenDocumentDialog(self: MSPyMstnPlatform.MSDocumentManager, params: MSPyMstnPlatform.PyDocumentOpenDialogParams, attributes: MSPyMstnPlatform.FileOpenExtAttr, openMode: MSPyDgnPlatform.DgnDocument.FetchMode) -> tuple:
        """
        Browse for a document. This will browse the current repository, if one
        is active, and the file system if the current session of MicroStation
        is not integrated with a document management system.
        
        
        :param params:
        A structure containing file open parameters. The entire structure
        should be memset to 0 and then individual fields set as necessary.
        
        :param attributes:
        MicroStation file open dialog attribues (FILEOPENEXTATTR flagword)
        
        :param openMode:
        With what access the DgnDocument should be fetched from the DMS,
        if integrated, or what file access is required of the local file,
        if not integrated.. *
        
        Returns (Tuple, 0):
        An DgnDocument that represents the file. If the file cannot be
        found or cannot be accessed, NULL is returned.
        
        Returns (Tuple, 1):
        status. this gives an indication of why.
        """
        ...
    
    def OpenFolderBrowser(self: MSPyMstnPlatform.DgnDocumentManager, status: MSPyMstnPlatform.DgnDocumentManager.DgnBrowserStatus, defaults: MSPyDgnPlatform.DgnFolderBrowserDefaults) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Browse for a folder in the DMS
        """
        ...
    
    def OpenFolderDialog(self: MSPyMstnPlatform.MSDocumentManager, params: MSPyMstnPlatform.PyDocumentOpenDialogParams, attributes: int, basePath: str, fetchMode: MSPyDgnPlatform.DgnDocument.FetchMode) -> tuple:
        """
        :param attributes:
        MicroStation file list attribues (FILELISTATTR flagword) *
        
        Returns (Tuple, 0):
        retVal.
        
        Returns (Tuple, 1):
        status.
        """
        ...
    
    def PortableNameFromFullPath(portableName: MSPyBentley.WString, fullPath: str, basePath: str, dirCfgVar: str, relative: MSPyDgnPlatform.RelativePathPreference) -> None:
        """
        Creates a portable file name given the data that is returned from the
        File Open dialog. A portable name never includes explicit disk drive
        and path information.
        
        :param portableName:
        A portable file name that can be used in a moniker that is to be
        persisted in a design file.
        
        :param fullPath:
        The full file path to the file for which the portableName is
        generated.
        
        :param basePath:
        The full file path to the file in which the portableName will be
        persisted.
        
        :param dirCfgVar:
        If not NULL, this is a configuration variable whose value is the
        directory in fullPath.
        
        :param relative:
        The preference for relative paths. If Allow or CreateIfPossible,
        and dirCfgVar is NULL, attempts to make the portableName a
        relative path from basePath to fullPath. @note If dirCfgVar is not
        NULL, the portable name will consist of the dirCfgVar and the
        filename and extension from fullPath. @note If fullPath and
        basePath are not on the same physical drive, it is not possible to
        create a relative path between them.
        """
        ...
    
    def PortableNameFromUserEnteredFileName(portableName: MSPyBentley.WString, userEnteredPath: str, fullPath: str, basePath: str, relativePref: MSPyDgnPlatform.RelativePathPreference) -> None:
        """
        Creates a portable file name given the data that is keyed in by a
        user. A portable name never includes explicit disk drive and path
        information.
        
        :param portableName:
        A portable file name that can be used in a moniker that is to be
        persisted in a design file.
        
        :param userEnteredPath:
        The file name that the user keyed in. If not NULL, as much as
        possible of it is used to generate portableName.
        
        :param fullPath:
        Identifies the disk file to which the portable moniker should
        point. This is often the full file name as returned from the File
        Open dialog box.
        
        :param basePath:
        The base path that the caller will use relative searches for the
        file represented by the portable moniker. If the portable moniker
        is to be persisted in a DgnFile, basePath is usually the path of
        that DgnFile.
        
        :param relativePref:
        The preference for relative paths. If Allow, accepts relative
        paths that are in userEnteredPath. If CreateIfPossible, attempts
        to create a relative path. If Never, discards relative paths.
        @note If userEnteredPath does not contain an extension, but
        fullPath does contain an extension, the extension in fullPath will
        be the extension in portableName. @note If userEnteredPath starts
        with a configuration variable name followed by a colon, that
        configuration variable and any path information following it is
        retained, and relativePref is ignored. @note If fullPath and
        basePath are not on the same physical drive, it is not possible to
        create a relative path between them.
        """
        ...
    
    def PutDocumentList(self: MSPyMstnPlatform.MSDocumentManager, docs: MSPyMstnPlatform.DgnDocumentList, putAction: MSPyDgnPlatform.DgnDocument.PutAction, putOptions: MSPyDgnPlatform.DgnDocument.PutOptions, comment: str = None) -> int:
        """
        commit the local copies of this DgnDocumentList to the DMS *
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eAllowRestore: DeleteOptions
    
    eCancel: DgnBrowserStatus
    
    eDefault: DeleteOptions
    
    eIncludeSubItems: DeleteOptions
    
    eNoIntegrationLoaded: DgnBrowserStatus
    
    eSuccess: DgnBrowserStatus
    
class MSInputQueuePos:
    """
    Members:
    
    eINPUTQ_HEAD
    
    eINPUTQ_EOQ
    """

    def __init__(self: MSPyMstnPlatform.MSInputQueuePos, value: int) -> None:
        ...
    
    eINPUTQ_EOQ: MSInputQueuePos
    
    eINPUTQ_HEAD: MSInputQueuePos
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MSInputQueuePos) -> int:
        ...
    
class MSWindow:
    """
    None
    """

    def Activate(self: MSPyMstnPlatform.MSWindow, requestType: int, bypassFocusOut: bool, ignoreFocusOutErrors: bool = False) -> int:
        """
        Attempts to set the input focus to the Window.
        
        :param requestType:
        should always be set to 1, because the call will not be in
        response to a user button event. @Param(input) bypassFocusOut should
        only be set to true if the focus is to be changed to the specified
        window regardless of whether the current focus window wants to
        relinquish the focus. Dialog boxes, for example, refuse to
        relinquish the focus if the item focus is set to a text item, and
        the input currently in the text item is invalid. In general, MDL
        programs should set this argument to false, to make sure they are
        cooperative with other applications. @Param(input)
        ignoreFocusOutErrors should only be set to true if forcing focus
        to the Window @Return SUCCESS, or a non-zero value if the system
        cannot set the focus to the Window.
        """
        ...
    
    def ClearRect(self: MSPyMstnPlatform.MSWindow, rectP: MSPyDgnPlatform.BSIRect, clipRectP: MSPyDgnPlatform.BSIRect = None) -> None:
        """
        Clears the rectangle in the Window's background color. The affected
        window is passed in rectP. A clipping rectangle can be passed in
        clipRectP. If clipRectP is NULL, the rectangle is clipped to the
        window's content rectangle. @Param(input) rectP rectangle to clear
        @Param(input) clipRectP overriding clip rectangle
        """
        ...
    
    def Close(self: MSPyMstnPlatform.MSWindow, reasonCode: MSPyMstnPlatform.HideReasonCode, bypassFocusOut: bool) -> int:
        """
        Closes the window by hiding it then destroying it @Param(input)
        reasonCode reason code for the close - HideReasonCode enum found in
        dlogitem.h. @Param(input) bypassFocusOut bypass the focus out @Return
        SUCCESS or ERROR An error may be caused if the window refused to
        relinquish focus and bypassFocusOut is false.
        """
        ...
    
    def GetAttributes(self: MSPyMstnPlatform.MSWindow) -> MSPyMstnPlatform.GuiWAttributes:
        """
        Returns a reference to the Windows attributes.
        
        See also:
        GuiWAttributes
        """
        ...
    
    def GetContentRectGlobal(self: MSPyMstnPlatform.MSWindow, rect: MSPyDgnPlatform.BSIRect) -> int:
        """
        Gets the content rectangle for the Window in global coordinates.
        @Remarks Each window has an associated content and global rectangle.
        The content rectangle is the window portion on which the application
        draws. The global rectangle includes the window's content rectangle
        and borders and title rectangle. The GetContentRectLocal and
        GetContentRectGlobal methods get the content rectangle for the Window,
        and GetGlobalRectLocal and GetGlobalRectGlobal are used to get the
        global rectangle for the Window. Get...RectLocal methods return the
        rectangle in local coordinates, while the Get...RectGlobal method
        return the same information in global coordinates. @Param(output) rect
        content rect in global coords @Return SUCCESS or ERROR
        """
        ...
    
    def GetContentRectLocal(self: MSPyMstnPlatform.MSWindow, rect: MSPyDgnPlatform.BSIRect) -> int:
        """
        Gets the content rectangle for the Window in local coordinates.
        @Remarks Each window has an associated content and global rectangle.
        The content rectangle is the window portion on which the application
        draws. The global rectangle includes the window's content rectangle
        and borders and title rectangle. The GetContentRectLocal and
        GetContentRectGlobal methods get the content rectangle for the Window,
        and GetGlobalRectLocal and GetGlobalRectGlobal are used to get the
        global rectangle for the Window. Get...RectLocal methods return the
        rectangle in local coordinates, while the Get...RectGlobal method
        return the same information in global coordinates. @Param(output) rect
        content rect in local coords @Return SUCCESS or ERROR
        """
        ...
    
    def GetDockExtent(self: MSPyMstnPlatform.BaseWindow) -> MSPyBentleyGeom.Point2d:
        """
        Returns the size of the Window as docked
        """
        ...
    
    def GetDockPosition(self: MSPyMstnPlatform.BaseWindow) -> MSPyMstnPlatform.DockPosition:
        """
        Returns the dock position of the Window
        
        See also:
        DockPosition
        """
        ...
    
    def GetDockPriority(self: MSPyMstnPlatform.BaseWindow) -> MSPyMstnPlatform.DockPriority:
        """
        Returns the dock priority of the Window
        
        See also:
        DockPriority
        """
        ...
    
    def GetDoubleBufferContext(self: MSPyMstnPlatform.BaseWindow) -> int:
        """
        Returns the double-buffer context for the Window
        """
        ...
    
    def GetGlobalRectGlobal(self: MSPyMstnPlatform.MSWindow, rect: MSPyDgnPlatform.BSIRect) -> int:
        """
        Gets the global rectangle for the Window in global coordinates.
        @Remarks Each window has an associated content and global rectangle.
        The content rectangle is the window portion on which the application
        draws. The global rectangle includes the window's content rectangle
        and borders and title rectangle. The GetContentRectLocal and
        GetContentRectGlobal methods get the content rectangle for the Window,
        and GetGlobalRectLocal and GetGlobalRectGlobal are used to get the
        global rectangle for the Window. Get...RectLocal methods return the
        rectangle in local coordinates, while the Get...RectGlobal method
        return the same information in global coordinates. @Param(output) rect
        global rect in global coords @Return SUCCESS or ERROR
        """
        ...
    
    def GetGlobalRectLocal(self: MSPyMstnPlatform.MSWindow, rect: MSPyDgnPlatform.BSIRect) -> int:
        """
        Gets the global rectangle for the Window in local coordinates.
        @Remarks Each window has an associated content and global rectangle.
        The content rectangle is the window portion on which the application
        draws. The global rectangle includes the window's content rectangle
        and borders and title rectangle. The GetContentRectLocal and
        GetContentRectGlobal methods get the content rectangle for the Window,
        and GetGlobalRectLocal and GetGlobalRectGlobal are used to get the
        global rectangle for the Window. Get...RectLocal methods return the
        rectangle in local coordinates, while the Get...RectGlobal method
        return the same information in global coordinates. @Param(output) rect
        global rect in local coords @Return SUCCESS or ERROR
        """
        ...
    
    def GetGraphHandle(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the Graphics Handle for the Window. In Microsoft Windows, this
        is an HWND.
        """
        ...
    
    def GetNext(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the next Window in the linked list
        """
        ...
    
    def GetPrevious(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the previous Window in the linked list
        """
        ...
    
    def GetScreenContext(self: MSPyMstnPlatform.BaseWindow) -> int:
        """
        Returns the screen device context for the Window
        """
        ...
    
    def GetScreenNumber(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the screen number for the Window
        """
        ...
    
    def GetTitle(self: MSPyMstnPlatform.BaseWindow) -> str:
        """
        Gets the title for the Window. @Param(output) title A WString that
        receives a copy of the Window's title
        """
        ...
    
    def GetViewport(self: MSPyMstnPlatform.MSWindow) -> MSPyDgnPlatform.IndexedViewport:
        """
        Returns the Window's Viewport only if the Window is a View window.
        @Return A pointer to the IndexedViewport associated with the View
        window
        
        See also:
        IndexedViewport
        """
        ...
    
    def Hide(self: MSPyMstnPlatform.MSWindow, reasonCode: MSPyMstnPlatform.HideReasonCode, bypassFocusOut: bool) -> int:
        """
        Temporarily hides the Window @Remarks The Show method brings the
        Window back into view. The Close method hides the Window and destroys
        it. @Param(input) reasonCode reason code for the hide - HideReasonCode
        enum found in dlogitem.h. @Param(input) bypassFocusOut bypass the focus
        out, usually false @Return SUCCESS, or ERROR if the window refused to
        relinquish focus and bypassFocusOut is false.
        """
        ...
    
    def IsActive(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is active
        """
        ...
    
    def IsDisplayed(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window has been displayed initially
        """
        ...
    
    def IsDoubleBuffered(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is double-buffered
        """
        ...
    
    def IsFocusable(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is focusable
        """
        ...
    
    def IsObscured(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is obscured
        """
        ...
    
    def IsResizable(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is resizable
        """
        ...
    
    def IsVisible(self: MSPyMstnPlatform.MSWindow) -> bool:
        """
        Determines whether the Window is visible
        """
        ...
    
    def Maximized(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window is currently maximized
        """
        ...
    
    def Minimized(self: MSPyMstnPlatform.BaseWindow) -> bool:
        """
        Determines whether the Window is currently minimized
        """
        ...
    
    def SetTitle(self: MSPyMstnPlatform.BaseWindow, title: str) -> int:
        """
        Sets the title for the Window. @Param(input) title The new title for the
        Window
        """
        ...
    
    def Show(self: MSPyMstnPlatform.MSWindow, noInitialUpdate: bool) -> int:
        """
        Shows the Window, initially or after a hide operation. @Remarks The
        Hide method temporarily hides the Window. The Show method brings it
        back into view. The Close method hides the window and destroys it.
        
        :param noInitialUpdate:
        inhibits the first refresh message normally sent when the Window
        is first displayed. Generally, this argument should be set to
        false. @Return SUCCESS, or ERROR if the Window could not be shown.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @staticmethod
    def contentRectGetGlobal(contentRectP: MSPyDgnPlatform.BSIRect, windowP: MSPyMstnPlatform.MSWindow) -> int:
        ...
    
    @staticmethod
    def contentRectGetLocal(contentRectP: MSPyDgnPlatform.BSIRect, windowP: MSPyMstnPlatform.MSWindow) -> int:
        """
        Gets the content rectangle for a window in the window's local coordinates.
        @Remarks
        In MicroStation, each window has an associated content and global rectangle. The
        content rectangle is the window portion on which the application draws. The
        global rectangle includes the window's content rectangle and borders and title
        rectangle. The MSWindow.contentRectGetLocal and
        MSWindow.contentRectGetGlobal functions get the content rectangle for
        windowP, and MSWindow.globalRectGetLocal and
        MSWindow.globalRectGetGlobal are used to get the global rectangle for windowP.
        The RectGetLocal routines return the rectangle in local coordinates,
        while the RectGetGlobal routines return the same information in
        global coordinates.
        
        :param(output):
        contentRectP content rect in global coords
        
        :param(input):
        windowP window to get content rect for
        
        :returns:
        eSUCCESS or eERROR
        """
        ...
    
    @staticmethod
    def extentSet(windowP: MSPyMstnPlatform.MSWindow, newWidth: int, newHeight: int) -> None:
        """
        Changes the window size specified in windowP.
        It lets you specify a new width and height for the window in newWidth and
        newHeight, respectively. Normally, the window resizes by moving its lower right
        corner. However, if the DIALOGATTR_RESIZESINWARD attribute is used, the appropriate
        corner will be moved to size the window toward the center of the screen.
        
        :param(input):
        windowP window to resize
        
        :param(input):
        newWidth new window width
        
        :param(input):
        newHeight new window height.
        """
        ...
    
    @staticmethod
    def globalRectGetGlobal(rP: MSPyDgnPlatform.BSIRect, windowP: MSPyMstnPlatform.MSWindow) -> int:
        ...
    
    @staticmethod
    def globalRectGetLocal(rP: MSPyDgnPlatform.BSIRect, windowP: MSPyMstnPlatform.MSWindow) -> int:
        ...
    
    @staticmethod
    def viewWindowGet(viewNum: int) -> MSPyMstnPlatform.MSWindow:
        """
        Retrieves a window pointer for one of
        MicroStation's views. viewindex, of the value 0 to MSPyDgnPlatform.MAX_VIEWS - 1, inclusive, specifies
        the MicroStation view. If the specified view is out of range, the function returns
        NULL. Otherwise, it returns a pointer to the window structure (which may or may
        not be visible) for the view.
        
        :param(input):
        viewNum view to get window pointer for
        
        :returns:
        A pointer to the window of the given view. It returns NULL if viewIndex is out of range.
        """
        ...
    
class MdlApplicationClass:
    """
    Members:
    
    eNoChange
    
    eUser
    
    eMSRequired
    
    eInitApp
    
    eDGNApp
    
    eUIServer
    
    ePlotDriver
    
    eAutoDGN
    
    eStayResidentServer
    
    eManaged
    
    eLicenseApp
    
    eRibbonProvider
    """

    def __init__(self: MSPyMstnPlatform.MdlApplicationClass, value: int) -> None:
        ...
    
    eAutoDGN: MdlApplicationClass
    
    eDGNApp: MdlApplicationClass
    
    eInitApp: MdlApplicationClass
    
    eLicenseApp: MdlApplicationClass
    
    eMSRequired: MdlApplicationClass
    
    eManaged: MdlApplicationClass
    
    eNoChange: MdlApplicationClass
    
    ePlotDriver: MdlApplicationClass
    
    eRibbonProvider: MdlApplicationClass
    
    eStayResidentServer: MdlApplicationClass
    
    eUIServer: MdlApplicationClass
    
    eUser: MdlApplicationClass
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MdlApplicationClass) -> int:
        ...
    
class MdlErrorValues:
    """
    Members:
    
    eMDLERR_NOTRANSFORM
    
    eMDLERR_BADVIEWNUMBER
    
    eMDLERR_INSFINFO
    
    eMDLERR_FILE2SUB3
    
    eMDLERR_BADELEMENT
    
    eMDLERR_INVREGEX
    
    eMDLERR_BADMODELREF
    
    eMDLERR_BADFILENUMBER
    
    eMDLERR_BADSLOT
    
    eMDLERR_FILEREADONLY
    
    eMDLERR_DISKFULL
    
    eMDLERR_WRITEINHIBIT
    
    eMDLERR_WRITEFAILED
    
    eMDLERR_MODIFYCOMPLEX
    
    eMDLERR_CANNOTOPENFILE
    
    eMDLERR_ENDOFFILE
    
    eMDLERR_BADSCANLIST
    
    eMDLERR_INSFMEMORY
    
    eMDLERR_NOTCMPLXHDR
    
    eMDLERR_ALREADYLOADED
    
    eMDLERR_BADFILETYPE
    
    eMDLERR_READFAILED
    
    eMDLERR_NOSUCHAPPLICATION
    
    eMDLERR_REJECTED
    
    eMDLERR_NOMATCH
    
    eMDLERR_AMBIGUOUS
    
    eMDLERR_BADARG
    
    eMDLERR_BADCOPYPARALLEL
    
    eMDLERR_RESOURCENOTFOUND
    
    eMDLERR_NOCELLLIBRARY
    
    eMDLERR_VIEWNOTDISPLAYED
    
    eMDLERR_CELLNOTFOUND
    
    eMDLERR_CELLEXISTS
    
    eMDLERR_INVALIDCELL
    
    eMDLERR_BADINDEX
    
    eMDLERR_CELLTOOLARGE
    
    eMDLERR_INVALIDLIBRARY
    
    eMDLERR_BADLINKERINFO
    
    eMDLERR_NOTAVAILABLE
    
    eMDLERR_CELLLIB2DGN3
    
    eMDLERR_MAXMCSLTASKS
    
    eMDLERR_SYSTEMERROR
    
    eMDLERR_TIMEOUT
    
    eMDLERR_PROGRAMTERMINATED
    
    eMDLERR_USERABORT
    
    eMDLERR_ELEMENTFROZEN
    
    eMDLERR_NOEXTPGMSTACK
    
    eMDLERR_REJECTEDBYINIT
    
    eMDLERR_TOOLARGE
    
    eMDLERR_NOKEYS
    
    eMDLERR_SHMEMNOTFOUND
    
    eMDLERR_DUPTASKID
    
    eMDLERR_BADSCREENNUMBER
    
    eMDLERR_NULLOUTPUTBUFFER
    
    eMDLERR_BADRASTERFORMAT
    
    eMDLERR_NOTSUPPORTED
    
    eMDLERR_DLMNOTALLOWED
    
    eMDLERR_TOOMANYSURFACEELMS
    
    eMDLERR_ELEMTOOLARGE
    
    eMDLERR_LINKAGENOTFOUND
    
    eMDLERR_NAMENOTUNIQUE
    
    eMDLERR_MODELNOTEMPTY
    
    eMDLERR_NOCHANGE
    
    eMDLERR_OPERVIOLATESCONSTRAINTS
    
    eMDLERR_RELATIVECELLLEVELNOTFOUND
    
    eMDLERR_FILENOTFOUND
    
    eMDLERR_NOFENCE
    
    eMDLERR_NOCLIPVOLUME
    
    eMDLERR_NAMETOOLONG
    
    eMDLERR_BADMODELID
    
    eMDLERR_MODELNAMEEXISTS
    
    eMDLERR_MODELIDEXISTS
    
    eMDLERR_NOMODELINFO
    
    eMDLERR_NOPARENTMODEL
    
    eMDLERR_CANTCREATEFILE
    
    eMDLERR_CANTSAVEFILE
    
    eMDLERR_V7CELLLIBRARY
    
    eMDLERR_FILEEXISTS
    
    eMDLERR_V8B2CELLLIBRARY
    
    eMDLERR_FARASSOCREQUIRED
    
    eMDLERR_ELMENTNOTFOUND
    
    eMDLERR_IDNOTFOUND
    
    eMDLERR_IDEXISTS
    
    eMDLERR_CACHENOTENABLED
    
    eMDLERR_WRONGELEMID
    
    eMDLERR_CACHEINUSE
    
    eMDLERR_CACHENOTFOUND
    
    eMDLERR_BADNAME
    
    eMDLERR_NOTOPEN
    
    eMDLERR_SHARINGVIOLATION
    
    eMDLERR_ACCESSVIOLATION
    
    eMDLERR_ALREADYOPEN
    
    eMDLERR_BADWORDSTOFOLLOW
    
    eMDLERR_ALREADYEXISTS
    
    eMDLERR_BADFORMAT
    
    eMDLERR_BADVERSION
    
    eMDLERR_TOOMANYOPENFILES
    
    eMDLERR_OPERATIONCANCELED
    
    eMDLERR_UNKNOWNERROR
    
    eMDLERR_BADFILE
    
    eMDLERR_CANNOTOPENSEED
    
    eMDLERR_INVALIDOPERATIONFORNESTED
    
    eMDLERR_INVALIDOPERATIONFORNONNESTED
    
    eMDLERR_NOTLOADED
    
    eMDLERR_NOMODEL
    
    eMDLERR_HASCHANGES
    
    eMDLERR_LOADINGINTERFACE
    
    eMDLERR_COMPRESSIONERROR
    
    eMDLERR_UNKNOWNFORMAT
    
    eMDLERR_NOSUCHMODEL
    
    eMDLERR_NOTLOCKED
    
    eMDLERR_CANNOTIMPORTSEED
    
    eMDLERR_CACHELOADERROR
    
    eMDLERR_RENAMEERROR
    
    eMDLERR_COPYERROR
    
    eMDLERR_CACHENOTFILLED
    
    eMDLERR_ACCUDRAWNOTENABLED
    
    eMDLERR_MUNOTLARGERTHANSU
    
    eMDLERR_NOTSAMEUNITBASE
    
    eMDLERR_NOTCOMPLEXHEADER
    
    eMDLERR_ADDINGCOMPLEXELEMENT
    
    eMDLERR_2D3D_MISMATCH
    
    eMDLERR_REPLACING_DELETED
    
    eMDLERR_OVERSIZE_ELEMENT
    
    eMDLERR_UNDERSIZE_ELEMENT
    
    eMDLERR_BADELEMENTTYPE
    
    eMDLERR_STYLENOTFOUND
    
    eMDLERR_TOOMANYITERATIONS
    
    eMDLERR_ANONYMOUS_SHAREDCELL
    
    eMDLERR_STYLEISUSED
    
    eMDLERR_CAPABILITYRESTRICTION
    
    eMDLERR_INVALIDFORNEUTRALMDL
    
    eMDLERR_ALLMODELSFILTEREDOUT
    
    eMDLERR_NONPLANARELEMENT
    
    eMDLERR_NOASSOCIATEDTEMPLATE
    
    eMDLERR_HISTORYREVISIONNOTFOUND
    
    eMDLERR_MISSINGIMAGEBAND
    
    eMDLERR_NOMASTERFILE
    
    eMDLERR_NOTSUPPORTEDACTIVATEDREF
    
    eMDLERR_GEOCOORD_REFTRANSFORMDISABLED
    
    eMDLERR_GEOCOORD_NOMASTERGCS
    
    eMDLERR_GEOCOORD_NOREFGCS
    
    eMDLERR_GEOCOORD_NOGEOCODE
    
    eMDLERR_GEOCOORD_NOTGEOTRANSFORMED
    
    eMDLERR_GEOCOORD_NEEDSRECALCULATION
    
    eMDLERR_GEOCOORD_UNITSWRONG
    
    eMDLERR_NOPOLES
    
    eMDLERR_NOKNOTS
    
    eMDLERR_NOWEIGHTS
    
    eMDLERR_NOBOUNDS
    
    eMDLERR_NONUMBOUNDS
    
    eMDLERR_NOBSPHEADER
    
    eMDLERR_TOOFEWPOLES
    
    eMDLERR_TOOMANYPOLES
    
    eMDLERR_BADBSPELM
    
    eMDLERR_BADPARAMETER
    
    eMDLERR_BADORDER
    
    eMDLERR_BADPERIODICITY
    
    eMDLERR_BADPOLES
    
    eMDLERR_BADKNOTS
    
    eMDLERR_BADWEIGHTS
    
    eMDLERR_BADSPIRALDEFINITION
    
    eMDLERR_TOOMANYKNOTS
    
    eMDLERR_NOOFFSETINTERSECTION
    
    eMDLERR_BADCONTINUITY
    
    eMDLERR_RECURSELIMIT
    
    eMDLERR_CANNOTDELETEDEFAULTMODEL
    
    eMDLERR_SYMBOLTOOLONG
    
    eMDLERR_INVALID_FOR_RESTRICTED_PRODUCT
    
    eMDLERR_FIRSTEXPRERROR
    
    eMDLERR_ALREADYINUSE
    
    eMDLERR_BADTYPE
    
    eMDLERR_NEEDINT
    
    eMDLERR_STRUCTNEEDED
    
    eMDLERR_RIGHT_NOT_GRANTED_FOR_OPERATION
    
    eMDLERR_BADHEX
    
    eMDLERR_NEEDEXPONENT
    
    eMDLERR_BADOCTAL
    
    eMDLERR_BADFLOAT
    
    eMDLERR_BADSTRING
    
    eMDLERR_BADCHARCONS
    
    eMDLERR_ILLEGALCHAR
    
    eMDLERR_UNSUPPORTED
    
    eMDLERR_NOSYMBOL
    
    eMDLERR_SYNTAXERROR
    
    eMDLERR_INVALIDSYMBOL
    
    eMDLERR_TYPESINCOMPATIBLE
    
    eMDLERR_CANNOTDEREF
    
    eMDLERR_NOTSTRUCT
    
    eMDLERR_NOTMEMBER
    
    eMDLERR_ADDRNOTKNOWN
    
    eMDLERR_TOOCOMPLEX
    
    eMDLERR_INVALIDFORSTRUCT
    
    eMDLERR_INVALIDFORFLOAT
    
    eMDLERR_DIVIDEBYZERO
    
    eMDLERR_ADDRNOTVALID
    
    eMDLERR_INVALIDFORTYPE
    
    eMDLERR_INTEGRALNEEDED
    
    eMDLERR_NOTVALIDEXPRESS
    
    eMDLERR_NOTFUNCTION
    
    eMDLERR_TOOMANYARGUMENTS
    
    eMDLERR_TOOFEWARGUMENTS
    
    eMDLERR_BADRSCTYPE
    
    eMDLERR_INVALIDFORFUNC
    
    eMDLERR_LASTEXPRERROR
    
    eMDLERR_INVALIDACSTYPE
    
    eMDLERR_INVALIDBUTTON
    
    eMDLERR_NOTDESIGNFILE
    
    eMDLERR_3DREF2DMASTER
    
    eMDLERR_DUPLICATELOGICAL
    
    eMDLERR_NOTSINGLEVIEW
    
    eMDLERR_INVALIDREFORG
    
    eMDLERR_INVALIDMASTERORG
    
    eMDLERR_INVALIDREF
    
    eMDLERR_INVALIDCLIP
    
    eMDLERR_INVALIDPATSPACE
    
    eMDLERR_NONCLOSEDPATELM
    
    eMDLERR_NONSOLIDPATELM
    
    eMDLERR_NONCLOSEDELM
    
    eMDLERR_ELMFILLED
    
    eMDLERR_ELMNOTFILLED
    
    eMDLERR_ELMTOOLARGE
    
    eMDLERR_ELMNOTPLANAR
    
    eMDLERR_NULLSOLUTION
    
    eMDLERR_UNBOUNDEDSOLUTION
    
    eMDLERR_NONCOPLANARSHAPES
    
    eMDLERR_OLDMATERIALTABLE
    
    eMDLERR_NOSELECTIONSET
    
    eMDLERR_NOREFSLOTS
    
    eMDLERR_NOACSDEFINED
    
    eMDLERR_ACSREPLACED
    
    eMDLERR_ACSNOTFOUND
    
    eMDLERR_VIEWNOTFOUND
    
    eMDLERR_NOGRAPHICGROUP
    
    eMDLERR_VIEWGROUPNOTFOUND
    
    eMDLERR_NOLEVELMASK
    
    eMDLERR_NOTDIRECTATTACHMENT
    
    eMDLERR_MODELNOTFOUND
    
    eMDLERR_RELOADNOTNEEDED
    
    eMDLERR_COINCIDENTSELFREF
    
    eMDLERR_REDUNDANTREF
    
    eMDLERR_BADFONT
    
    eMDLERR_BADTEXTSTYLE
    
    eMDLERR_NOINTERNALMATERIALS
    
    eMDLERR_COMMANDRECEIVED
    
    eMDLERR_RSCERROR
    
    eMDLERR_RSCFILEERROR
    
    eMDLERR_RSCHANDLEINVALID
    
    eMDLERR_RSCFILENOTFOUND
    
    eMDLERR_RSCINSFMEM
    
    eMDLERR_RSCWRITEERROR
    
    eMDLERR_RSCWRITEVIOLATION
    
    eMDLERR_RSCADDRINVALID
    
    eMDLERR_RSCTYPEINVALID
    
    eMDLERR_RSCALREADYEXISTS
    
    eMDLERR_RSCBADVERSION
    
    eMDLERR_RSCINUSE
    
    eMDLERR_RSCNOTFOUND
    
    eMDLERR_RSCSTRINGNOTFOUND
    
    eMDLERR_RSCQRYIDINVALID
    
    eMDLERR_RSCDIRECTADDPEND
    
    eMDLERR_RSCBADRANGETREE
    
    eMDLERR_RSCFILENOTOPEN
    
    eMDLERR_RSCBADRSCSIZE
    
    eMDLERR_RSCINVALIDFILEHANDLE
    
    eMDLERR_RSCALIASREQUIRED
    
    eMDLERR_RSCFILECORRUPT
    
    eMDLERR_RSCFOPENFAILURE
    
    eMDLERR_RSCFILEHANDLETABLEFULL
    
    eMDLERR_RSCCONDITIONFALSE
    
    eMDLERR_LICHANDLENOTFOUND
    
    eMDLERR_NOLICENSEAVAILABLE
    
    eMDLERR_BADVRBLARRAYSIZE
    
    eMDLERR_NOTCONVRULES
    
    eMDLERR_BADDATADEF
    
    eMDLERR_DATADEFNOTFOUND
    
    eMDLERR_BUFFERALIGNMENTSDIFFER
    
    eMDLERR_OUTPUTBUFFERWRONGALIGNMENT
    
    eMDLERR_INVALIDPLATFORMID
    
    eMDLERR_VOIDDATATYPE
    
    eMDLERR_INPUTBUFFERWRONGALIGNMENT
    
    eMDLERR_BADCOLORPALETTE
    
    eMDLERR_BADCOLORPALETTEINDEX
    
    eMDLERR_BADCOLORPALETTEDATA
    
    eMDLERR_BADSETMETHODID
    
    eMDLERR_PALETTEWRONGSIZE
    
    eMDLERR_BADCOLORTABLE
    
    eMDLERR_COLORMGRNOTINITIALIZED
    
    eMDLERR_BADCOLORDESCR
    
    eMDLERR_NOQUEUEENTRIES
    
    eMDLERR_QUEUEFULL
    
    eMDLERR_QUEUEERROR
    
    eMDLERR_NOMESSAGE
    
    eMDLERR_ATTRUNDEFTYPE
    
    eMDLERR_ATTRSETNAMELONG
    
    eMDLERR_ATTRSETNOTFOUND
    
    eMDLERR_ATTRNOTINSET
    
    eMDLERR_ATTRSETPREVDEFINED
    
    eMDLERR_ATTRSETTOOBIG
    
    eMDLERR_ATTRBADRPTFILE
    
    eMDLERR_ATTRBADRPTKEYWORD
    
    eMDLERR_ATTRBADASSOC
    
    eMDLERR_ATTRNOTARGET
    
    eMDLERR_ATTRPREVDEFINED
    
    eMDLERR_ATTRNOTFOUND
    
    eMDLERR_NOMDLPLOTDRIVERINPLT
    
    eMDLERR_MACROSTILLRUNNING
    
    eMDLERR_MACRONOTSTARTED
    
    eMDLERR_CANNOTLOADMACROHOST
    
    eMDLERR_CANNOTFINDMACRO
    
    eMDLERR_MACROVARNOTDEFINED
    
    eMDLERR_NOTATOMICDATATYPE
    
    eMDLERR_VARWRONGSIZE
    
    eMDLERR_CANNOTSETVALUE
    
    eMDLERR_ARRAYWRONGSIZE
    
    eMDLERR_THREADUNKNOWN
    
    eMDLERR_SYMBOLNOTRESOLVED
    
    eMDLERR_MODELERNOTLOADED
    
    eMDLERR_PARASOLID_ERROR
    
    eMDLERR_CIRCULARDEPENDENCY
    
    eMDLERR_INVALIDDEPENDENCY
    
    eMDLERR_EXCEPTION
    
    eMDLERR_DGNFILEOBJINUSE
    
    eMDLERR_SIGNATURE_NOT_FOUND
    
    eMDLERR_SIGNATURE_NOT_VERIFIED
    
    eMDLERR_SIGNATURE_NOT_RECOGNIZED
    
    eMDLERR_RIGHT_NOT_GRANTED
    
    eMDLERR_SIGNATURE_SILENT
    
    eMDLERR_NOTAVALIDSHAPEFILE
    
    eMDLERR_SHAPEFILEFULL
    
    eMDLERR_SHAPEALREADYEXISTS
    
    eMDLERR_CLOSEDGROUP
    
    eMDLERR_DUPLICATEMEMBER
    
    eMDLERR_FARREFERENCE
    
    eMDLERR_GROUPOPINPROGRESS
    
    eMDLERR_INVALIDCOLORMODE
    
    eMDLERR_NO_TRANSPARENCY
    
    eMDLERR_INVALID_COLOR
    
    eMDLERR_MULTIPLE_TRANSPARENCY
    
    eMDLERR_BADRASTER
    
    eMDLERR_INVALIDACCESSMODE
    
    eMDLERR_NO_GEOCODINGELM
    
    eMDLERR_SERVER_MAX_USER_REACHED
    
    eMDLERR_INTERSECTSITSELF
    
    eMDLERR_ELEMENTISHOLED
    
    eMDLERR_INVALIDLOGICALNAME
    
    eMDLERR_CONNECTIONERROR
    
    eMDLERR_INVALIDPAGE
    
    eMDLERR_EMPTYSOURCE
    
    eMDLERR_INVALIDPASSWORD
    
    eMDLERR_MSELEMENTDESCRCOLLECTOR_TERMINATE_COLLECTION
    
    eMDLERR_DOCMGR_CREATE_FAILED
    """

    def __init__(self: MSPyMstnPlatform.MdlErrorValues, value: int) -> None:
        ...
    
    eMDLERR_2D3D_MISMATCH: MdlErrorValues
    
    eMDLERR_3DREF2DMASTER: MdlErrorValues
    
    eMDLERR_ACCESSVIOLATION: MdlErrorValues
    
    eMDLERR_ACCUDRAWNOTENABLED: MdlErrorValues
    
    eMDLERR_ACSNOTFOUND: MdlErrorValues
    
    eMDLERR_ACSREPLACED: MdlErrorValues
    
    eMDLERR_ADDINGCOMPLEXELEMENT: MdlErrorValues
    
    eMDLERR_ADDRNOTKNOWN: MdlErrorValues
    
    eMDLERR_ADDRNOTVALID: MdlErrorValues
    
    eMDLERR_ALLMODELSFILTEREDOUT: MdlErrorValues
    
    eMDLERR_ALREADYEXISTS: MdlErrorValues
    
    eMDLERR_ALREADYINUSE: MdlErrorValues
    
    eMDLERR_ALREADYLOADED: MdlErrorValues
    
    eMDLERR_ALREADYOPEN: MdlErrorValues
    
    eMDLERR_AMBIGUOUS: MdlErrorValues
    
    eMDLERR_ANONYMOUS_SHAREDCELL: MdlErrorValues
    
    eMDLERR_ARRAYWRONGSIZE: MdlErrorValues
    
    eMDLERR_ATTRBADASSOC: MdlErrorValues
    
    eMDLERR_ATTRBADRPTFILE: MdlErrorValues
    
    eMDLERR_ATTRBADRPTKEYWORD: MdlErrorValues
    
    eMDLERR_ATTRNOTARGET: MdlErrorValues
    
    eMDLERR_ATTRNOTFOUND: MdlErrorValues
    
    eMDLERR_ATTRNOTINSET: MdlErrorValues
    
    eMDLERR_ATTRPREVDEFINED: MdlErrorValues
    
    eMDLERR_ATTRSETNAMELONG: MdlErrorValues
    
    eMDLERR_ATTRSETNOTFOUND: MdlErrorValues
    
    eMDLERR_ATTRSETPREVDEFINED: MdlErrorValues
    
    eMDLERR_ATTRSETTOOBIG: MdlErrorValues
    
    eMDLERR_ATTRUNDEFTYPE: MdlErrorValues
    
    eMDLERR_BADARG: MdlErrorValues
    
    eMDLERR_BADBSPELM: MdlErrorValues
    
    eMDLERR_BADCHARCONS: MdlErrorValues
    
    eMDLERR_BADCOLORDESCR: MdlErrorValues
    
    eMDLERR_BADCOLORPALETTE: MdlErrorValues
    
    eMDLERR_BADCOLORPALETTEDATA: MdlErrorValues
    
    eMDLERR_BADCOLORPALETTEINDEX: MdlErrorValues
    
    eMDLERR_BADCOLORTABLE: MdlErrorValues
    
    eMDLERR_BADCONTINUITY: MdlErrorValues
    
    eMDLERR_BADCOPYPARALLEL: MdlErrorValues
    
    eMDLERR_BADDATADEF: MdlErrorValues
    
    eMDLERR_BADELEMENT: MdlErrorValues
    
    eMDLERR_BADELEMENTTYPE: MdlErrorValues
    
    eMDLERR_BADFILE: MdlErrorValues
    
    eMDLERR_BADFILENUMBER: MdlErrorValues
    
    eMDLERR_BADFILETYPE: MdlErrorValues
    
    eMDLERR_BADFLOAT: MdlErrorValues
    
    eMDLERR_BADFONT: MdlErrorValues
    
    eMDLERR_BADFORMAT: MdlErrorValues
    
    eMDLERR_BADHEX: MdlErrorValues
    
    eMDLERR_BADINDEX: MdlErrorValues
    
    eMDLERR_BADKNOTS: MdlErrorValues
    
    eMDLERR_BADLINKERINFO: MdlErrorValues
    
    eMDLERR_BADMODELID: MdlErrorValues
    
    eMDLERR_BADMODELREF: MdlErrorValues
    
    eMDLERR_BADNAME: MdlErrorValues
    
    eMDLERR_BADOCTAL: MdlErrorValues
    
    eMDLERR_BADORDER: MdlErrorValues
    
    eMDLERR_BADPARAMETER: MdlErrorValues
    
    eMDLERR_BADPERIODICITY: MdlErrorValues
    
    eMDLERR_BADPOLES: MdlErrorValues
    
    eMDLERR_BADRASTER: MdlErrorValues
    
    eMDLERR_BADRASTERFORMAT: MdlErrorValues
    
    eMDLERR_BADRSCTYPE: MdlErrorValues
    
    eMDLERR_BADSCANLIST: MdlErrorValues
    
    eMDLERR_BADSCREENNUMBER: MdlErrorValues
    
    eMDLERR_BADSETMETHODID: MdlErrorValues
    
    eMDLERR_BADSLOT: MdlErrorValues
    
    eMDLERR_BADSPIRALDEFINITION: MdlErrorValues
    
    eMDLERR_BADSTRING: MdlErrorValues
    
    eMDLERR_BADTEXTSTYLE: MdlErrorValues
    
    eMDLERR_BADTYPE: MdlErrorValues
    
    eMDLERR_BADVERSION: MdlErrorValues
    
    eMDLERR_BADVIEWNUMBER: MdlErrorValues
    
    eMDLERR_BADVRBLARRAYSIZE: MdlErrorValues
    
    eMDLERR_BADWEIGHTS: MdlErrorValues
    
    eMDLERR_BADWORDSTOFOLLOW: MdlErrorValues
    
    eMDLERR_BUFFERALIGNMENTSDIFFER: MdlErrorValues
    
    eMDLERR_CACHEINUSE: MdlErrorValues
    
    eMDLERR_CACHELOADERROR: MdlErrorValues
    
    eMDLERR_CACHENOTENABLED: MdlErrorValues
    
    eMDLERR_CACHENOTFILLED: MdlErrorValues
    
    eMDLERR_CACHENOTFOUND: MdlErrorValues
    
    eMDLERR_CANNOTDELETEDEFAULTMODEL: MdlErrorValues
    
    eMDLERR_CANNOTDEREF: MdlErrorValues
    
    eMDLERR_CANNOTFINDMACRO: MdlErrorValues
    
    eMDLERR_CANNOTIMPORTSEED: MdlErrorValues
    
    eMDLERR_CANNOTLOADMACROHOST: MdlErrorValues
    
    eMDLERR_CANNOTOPENFILE: MdlErrorValues
    
    eMDLERR_CANNOTOPENSEED: MdlErrorValues
    
    eMDLERR_CANNOTSETVALUE: MdlErrorValues
    
    eMDLERR_CANTCREATEFILE: MdlErrorValues
    
    eMDLERR_CANTSAVEFILE: MdlErrorValues
    
    eMDLERR_CAPABILITYRESTRICTION: MdlErrorValues
    
    eMDLERR_CELLEXISTS: MdlErrorValues
    
    eMDLERR_CELLLIB2DGN3: MdlErrorValues
    
    eMDLERR_CELLNOTFOUND: MdlErrorValues
    
    eMDLERR_CELLTOOLARGE: MdlErrorValues
    
    eMDLERR_CIRCULARDEPENDENCY: MdlErrorValues
    
    eMDLERR_CLOSEDGROUP: MdlErrorValues
    
    eMDLERR_COINCIDENTSELFREF: MdlErrorValues
    
    eMDLERR_COLORMGRNOTINITIALIZED: MdlErrorValues
    
    eMDLERR_COMMANDRECEIVED: MdlErrorValues
    
    eMDLERR_COMPRESSIONERROR: MdlErrorValues
    
    eMDLERR_CONNECTIONERROR: MdlErrorValues
    
    eMDLERR_COPYERROR: MdlErrorValues
    
    eMDLERR_DATADEFNOTFOUND: MdlErrorValues
    
    eMDLERR_DGNFILEOBJINUSE: MdlErrorValues
    
    eMDLERR_DISKFULL: MdlErrorValues
    
    eMDLERR_DIVIDEBYZERO: MdlErrorValues
    
    eMDLERR_DLMNOTALLOWED: MdlErrorValues
    
    eMDLERR_DOCMGR_CREATE_FAILED: MdlErrorValues
    
    eMDLERR_DUPLICATELOGICAL: MdlErrorValues
    
    eMDLERR_DUPLICATEMEMBER: MdlErrorValues
    
    eMDLERR_DUPTASKID: MdlErrorValues
    
    eMDLERR_ELEMENTFROZEN: MdlErrorValues
    
    eMDLERR_ELEMENTISHOLED: MdlErrorValues
    
    eMDLERR_ELEMTOOLARGE: MdlErrorValues
    
    eMDLERR_ELMENTNOTFOUND: MdlErrorValues
    
    eMDLERR_ELMFILLED: MdlErrorValues
    
    eMDLERR_ELMNOTFILLED: MdlErrorValues
    
    eMDLERR_ELMNOTPLANAR: MdlErrorValues
    
    eMDLERR_ELMTOOLARGE: MdlErrorValues
    
    eMDLERR_EMPTYSOURCE: MdlErrorValues
    
    eMDLERR_ENDOFFILE: MdlErrorValues
    
    eMDLERR_EXCEPTION: MdlErrorValues
    
    eMDLERR_FARASSOCREQUIRED: MdlErrorValues
    
    eMDLERR_FARREFERENCE: MdlErrorValues
    
    eMDLERR_FILE2SUB3: MdlErrorValues
    
    eMDLERR_FILEEXISTS: MdlErrorValues
    
    eMDLERR_FILENOTFOUND: MdlErrorValues
    
    eMDLERR_FILEREADONLY: MdlErrorValues
    
    eMDLERR_FIRSTEXPRERROR: MdlErrorValues
    
    eMDLERR_GEOCOORD_NEEDSRECALCULATION: MdlErrorValues
    
    eMDLERR_GEOCOORD_NOGEOCODE: MdlErrorValues
    
    eMDLERR_GEOCOORD_NOMASTERGCS: MdlErrorValues
    
    eMDLERR_GEOCOORD_NOREFGCS: MdlErrorValues
    
    eMDLERR_GEOCOORD_NOTGEOTRANSFORMED: MdlErrorValues
    
    eMDLERR_GEOCOORD_REFTRANSFORMDISABLED: MdlErrorValues
    
    eMDLERR_GEOCOORD_UNITSWRONG: MdlErrorValues
    
    eMDLERR_GROUPOPINPROGRESS: MdlErrorValues
    
    eMDLERR_HASCHANGES: MdlErrorValues
    
    eMDLERR_HISTORYREVISIONNOTFOUND: MdlErrorValues
    
    eMDLERR_IDEXISTS: MdlErrorValues
    
    eMDLERR_IDNOTFOUND: MdlErrorValues
    
    eMDLERR_ILLEGALCHAR: MdlErrorValues
    
    eMDLERR_INPUTBUFFERWRONGALIGNMENT: MdlErrorValues
    
    eMDLERR_INSFINFO: MdlErrorValues
    
    eMDLERR_INSFMEMORY: MdlErrorValues
    
    eMDLERR_INTEGRALNEEDED: MdlErrorValues
    
    eMDLERR_INTERSECTSITSELF: MdlErrorValues
    
    eMDLERR_INVALIDACCESSMODE: MdlErrorValues
    
    eMDLERR_INVALIDACSTYPE: MdlErrorValues
    
    eMDLERR_INVALIDBUTTON: MdlErrorValues
    
    eMDLERR_INVALIDCELL: MdlErrorValues
    
    eMDLERR_INVALIDCLIP: MdlErrorValues
    
    eMDLERR_INVALIDCOLORMODE: MdlErrorValues
    
    eMDLERR_INVALIDDEPENDENCY: MdlErrorValues
    
    eMDLERR_INVALIDFORFLOAT: MdlErrorValues
    
    eMDLERR_INVALIDFORFUNC: MdlErrorValues
    
    eMDLERR_INVALIDFORNEUTRALMDL: MdlErrorValues
    
    eMDLERR_INVALIDFORSTRUCT: MdlErrorValues
    
    eMDLERR_INVALIDFORTYPE: MdlErrorValues
    
    eMDLERR_INVALIDLIBRARY: MdlErrorValues
    
    eMDLERR_INVALIDLOGICALNAME: MdlErrorValues
    
    eMDLERR_INVALIDMASTERORG: MdlErrorValues
    
    eMDLERR_INVALIDOPERATIONFORNESTED: MdlErrorValues
    
    eMDLERR_INVALIDOPERATIONFORNONNESTED: MdlErrorValues
    
    eMDLERR_INVALIDPAGE: MdlErrorValues
    
    eMDLERR_INVALIDPASSWORD: MdlErrorValues
    
    eMDLERR_INVALIDPATSPACE: MdlErrorValues
    
    eMDLERR_INVALIDPLATFORMID: MdlErrorValues
    
    eMDLERR_INVALIDREF: MdlErrorValues
    
    eMDLERR_INVALIDREFORG: MdlErrorValues
    
    eMDLERR_INVALIDSYMBOL: MdlErrorValues
    
    eMDLERR_INVALID_COLOR: MdlErrorValues
    
    eMDLERR_INVALID_FOR_RESTRICTED_PRODUCT: MdlErrorValues
    
    eMDLERR_INVREGEX: MdlErrorValues
    
    eMDLERR_LASTEXPRERROR: MdlErrorValues
    
    eMDLERR_LICHANDLENOTFOUND: MdlErrorValues
    
    eMDLERR_LINKAGENOTFOUND: MdlErrorValues
    
    eMDLERR_LOADINGINTERFACE: MdlErrorValues
    
    eMDLERR_MACRONOTSTARTED: MdlErrorValues
    
    eMDLERR_MACROSTILLRUNNING: MdlErrorValues
    
    eMDLERR_MACROVARNOTDEFINED: MdlErrorValues
    
    eMDLERR_MAXMCSLTASKS: MdlErrorValues
    
    eMDLERR_MISSINGIMAGEBAND: MdlErrorValues
    
    eMDLERR_MODELERNOTLOADED: MdlErrorValues
    
    eMDLERR_MODELIDEXISTS: MdlErrorValues
    
    eMDLERR_MODELNAMEEXISTS: MdlErrorValues
    
    eMDLERR_MODELNOTEMPTY: MdlErrorValues
    
    eMDLERR_MODELNOTFOUND: MdlErrorValues
    
    eMDLERR_MODIFYCOMPLEX: MdlErrorValues
    
    eMDLERR_MSELEMENTDESCRCOLLECTOR_TERMINATE_COLLECTION: MdlErrorValues
    
    eMDLERR_MULTIPLE_TRANSPARENCY: MdlErrorValues
    
    eMDLERR_MUNOTLARGERTHANSU: MdlErrorValues
    
    eMDLERR_NAMENOTUNIQUE: MdlErrorValues
    
    eMDLERR_NAMETOOLONG: MdlErrorValues
    
    eMDLERR_NEEDEXPONENT: MdlErrorValues
    
    eMDLERR_NEEDINT: MdlErrorValues
    
    eMDLERR_NOACSDEFINED: MdlErrorValues
    
    eMDLERR_NOASSOCIATEDTEMPLATE: MdlErrorValues
    
    eMDLERR_NOBOUNDS: MdlErrorValues
    
    eMDLERR_NOBSPHEADER: MdlErrorValues
    
    eMDLERR_NOCELLLIBRARY: MdlErrorValues
    
    eMDLERR_NOCHANGE: MdlErrorValues
    
    eMDLERR_NOCLIPVOLUME: MdlErrorValues
    
    eMDLERR_NOEXTPGMSTACK: MdlErrorValues
    
    eMDLERR_NOFENCE: MdlErrorValues
    
    eMDLERR_NOGRAPHICGROUP: MdlErrorValues
    
    eMDLERR_NOINTERNALMATERIALS: MdlErrorValues
    
    eMDLERR_NOKEYS: MdlErrorValues
    
    eMDLERR_NOKNOTS: MdlErrorValues
    
    eMDLERR_NOLEVELMASK: MdlErrorValues
    
    eMDLERR_NOLICENSEAVAILABLE: MdlErrorValues
    
    eMDLERR_NOMASTERFILE: MdlErrorValues
    
    eMDLERR_NOMATCH: MdlErrorValues
    
    eMDLERR_NOMDLPLOTDRIVERINPLT: MdlErrorValues
    
    eMDLERR_NOMESSAGE: MdlErrorValues
    
    eMDLERR_NOMODEL: MdlErrorValues
    
    eMDLERR_NOMODELINFO: MdlErrorValues
    
    eMDLERR_NONCLOSEDELM: MdlErrorValues
    
    eMDLERR_NONCLOSEDPATELM: MdlErrorValues
    
    eMDLERR_NONCOPLANARSHAPES: MdlErrorValues
    
    eMDLERR_NONPLANARELEMENT: MdlErrorValues
    
    eMDLERR_NONSOLIDPATELM: MdlErrorValues
    
    eMDLERR_NONUMBOUNDS: MdlErrorValues
    
    eMDLERR_NOOFFSETINTERSECTION: MdlErrorValues
    
    eMDLERR_NOPARENTMODEL: MdlErrorValues
    
    eMDLERR_NOPOLES: MdlErrorValues
    
    eMDLERR_NOQUEUEENTRIES: MdlErrorValues
    
    eMDLERR_NOREFSLOTS: MdlErrorValues
    
    eMDLERR_NOSELECTIONSET: MdlErrorValues
    
    eMDLERR_NOSUCHAPPLICATION: MdlErrorValues
    
    eMDLERR_NOSUCHMODEL: MdlErrorValues
    
    eMDLERR_NOSYMBOL: MdlErrorValues
    
    eMDLERR_NOTATOMICDATATYPE: MdlErrorValues
    
    eMDLERR_NOTAVAILABLE: MdlErrorValues
    
    eMDLERR_NOTAVALIDSHAPEFILE: MdlErrorValues
    
    eMDLERR_NOTCMPLXHDR: MdlErrorValues
    
    eMDLERR_NOTCOMPLEXHEADER: MdlErrorValues
    
    eMDLERR_NOTCONVRULES: MdlErrorValues
    
    eMDLERR_NOTDESIGNFILE: MdlErrorValues
    
    eMDLERR_NOTDIRECTATTACHMENT: MdlErrorValues
    
    eMDLERR_NOTFUNCTION: MdlErrorValues
    
    eMDLERR_NOTLOADED: MdlErrorValues
    
    eMDLERR_NOTLOCKED: MdlErrorValues
    
    eMDLERR_NOTMEMBER: MdlErrorValues
    
    eMDLERR_NOTOPEN: MdlErrorValues
    
    eMDLERR_NOTRANSFORM: MdlErrorValues
    
    eMDLERR_NOTSAMEUNITBASE: MdlErrorValues
    
    eMDLERR_NOTSINGLEVIEW: MdlErrorValues
    
    eMDLERR_NOTSTRUCT: MdlErrorValues
    
    eMDLERR_NOTSUPPORTED: MdlErrorValues
    
    eMDLERR_NOTSUPPORTEDACTIVATEDREF: MdlErrorValues
    
    eMDLERR_NOTVALIDEXPRESS: MdlErrorValues
    
    eMDLERR_NOWEIGHTS: MdlErrorValues
    
    eMDLERR_NO_GEOCODINGELM: MdlErrorValues
    
    eMDLERR_NO_TRANSPARENCY: MdlErrorValues
    
    eMDLERR_NULLOUTPUTBUFFER: MdlErrorValues
    
    eMDLERR_NULLSOLUTION: MdlErrorValues
    
    eMDLERR_OLDMATERIALTABLE: MdlErrorValues
    
    eMDLERR_OPERATIONCANCELED: MdlErrorValues
    
    eMDLERR_OPERVIOLATESCONSTRAINTS: MdlErrorValues
    
    eMDLERR_OUTPUTBUFFERWRONGALIGNMENT: MdlErrorValues
    
    eMDLERR_OVERSIZE_ELEMENT: MdlErrorValues
    
    eMDLERR_PALETTEWRONGSIZE: MdlErrorValues
    
    eMDLERR_PARASOLID_ERROR: MdlErrorValues
    
    eMDLERR_PROGRAMTERMINATED: MdlErrorValues
    
    eMDLERR_QUEUEERROR: MdlErrorValues
    
    eMDLERR_QUEUEFULL: MdlErrorValues
    
    eMDLERR_READFAILED: MdlErrorValues
    
    eMDLERR_RECURSELIMIT: MdlErrorValues
    
    eMDLERR_REDUNDANTREF: MdlErrorValues
    
    eMDLERR_REJECTED: MdlErrorValues
    
    eMDLERR_REJECTEDBYINIT: MdlErrorValues
    
    eMDLERR_RELATIVECELLLEVELNOTFOUND: MdlErrorValues
    
    eMDLERR_RELOADNOTNEEDED: MdlErrorValues
    
    eMDLERR_RENAMEERROR: MdlErrorValues
    
    eMDLERR_REPLACING_DELETED: MdlErrorValues
    
    eMDLERR_RESOURCENOTFOUND: MdlErrorValues
    
    eMDLERR_RIGHT_NOT_GRANTED: MdlErrorValues
    
    eMDLERR_RIGHT_NOT_GRANTED_FOR_OPERATION: MdlErrorValues
    
    eMDLERR_RSCADDRINVALID: MdlErrorValues
    
    eMDLERR_RSCALIASREQUIRED: MdlErrorValues
    
    eMDLERR_RSCALREADYEXISTS: MdlErrorValues
    
    eMDLERR_RSCBADRANGETREE: MdlErrorValues
    
    eMDLERR_RSCBADRSCSIZE: MdlErrorValues
    
    eMDLERR_RSCBADVERSION: MdlErrorValues
    
    eMDLERR_RSCCONDITIONFALSE: MdlErrorValues
    
    eMDLERR_RSCDIRECTADDPEND: MdlErrorValues
    
    eMDLERR_RSCERROR: MdlErrorValues
    
    eMDLERR_RSCFILECORRUPT: MdlErrorValues
    
    eMDLERR_RSCFILEERROR: MdlErrorValues
    
    eMDLERR_RSCFILEHANDLETABLEFULL: MdlErrorValues
    
    eMDLERR_RSCFILENOTFOUND: MdlErrorValues
    
    eMDLERR_RSCFILENOTOPEN: MdlErrorValues
    
    eMDLERR_RSCFOPENFAILURE: MdlErrorValues
    
    eMDLERR_RSCHANDLEINVALID: MdlErrorValues
    
    eMDLERR_RSCINSFMEM: MdlErrorValues
    
    eMDLERR_RSCINUSE: MdlErrorValues
    
    eMDLERR_RSCINVALIDFILEHANDLE: MdlErrorValues
    
    eMDLERR_RSCNOTFOUND: MdlErrorValues
    
    eMDLERR_RSCQRYIDINVALID: MdlErrorValues
    
    eMDLERR_RSCSTRINGNOTFOUND: MdlErrorValues
    
    eMDLERR_RSCTYPEINVALID: MdlErrorValues
    
    eMDLERR_RSCWRITEERROR: MdlErrorValues
    
    eMDLERR_RSCWRITEVIOLATION: MdlErrorValues
    
    eMDLERR_SERVER_MAX_USER_REACHED: MdlErrorValues
    
    eMDLERR_SHAPEALREADYEXISTS: MdlErrorValues
    
    eMDLERR_SHAPEFILEFULL: MdlErrorValues
    
    eMDLERR_SHARINGVIOLATION: MdlErrorValues
    
    eMDLERR_SHMEMNOTFOUND: MdlErrorValues
    
    eMDLERR_SIGNATURE_NOT_FOUND: MdlErrorValues
    
    eMDLERR_SIGNATURE_NOT_RECOGNIZED: MdlErrorValues
    
    eMDLERR_SIGNATURE_NOT_VERIFIED: MdlErrorValues
    
    eMDLERR_SIGNATURE_SILENT: MdlErrorValues
    
    eMDLERR_STRUCTNEEDED: MdlErrorValues
    
    eMDLERR_STYLEISUSED: MdlErrorValues
    
    eMDLERR_STYLENOTFOUND: MdlErrorValues
    
    eMDLERR_SYMBOLNOTRESOLVED: MdlErrorValues
    
    eMDLERR_SYMBOLTOOLONG: MdlErrorValues
    
    eMDLERR_SYNTAXERROR: MdlErrorValues
    
    eMDLERR_SYSTEMERROR: MdlErrorValues
    
    eMDLERR_THREADUNKNOWN: MdlErrorValues
    
    eMDLERR_TIMEOUT: MdlErrorValues
    
    eMDLERR_TOOCOMPLEX: MdlErrorValues
    
    eMDLERR_TOOFEWARGUMENTS: MdlErrorValues
    
    eMDLERR_TOOFEWPOLES: MdlErrorValues
    
    eMDLERR_TOOLARGE: MdlErrorValues
    
    eMDLERR_TOOMANYARGUMENTS: MdlErrorValues
    
    eMDLERR_TOOMANYITERATIONS: MdlErrorValues
    
    eMDLERR_TOOMANYKNOTS: MdlErrorValues
    
    eMDLERR_TOOMANYOPENFILES: MdlErrorValues
    
    eMDLERR_TOOMANYPOLES: MdlErrorValues
    
    eMDLERR_TOOMANYSURFACEELMS: MdlErrorValues
    
    eMDLERR_TYPESINCOMPATIBLE: MdlErrorValues
    
    eMDLERR_UNBOUNDEDSOLUTION: MdlErrorValues
    
    eMDLERR_UNDERSIZE_ELEMENT: MdlErrorValues
    
    eMDLERR_UNKNOWNERROR: MdlErrorValues
    
    eMDLERR_UNKNOWNFORMAT: MdlErrorValues
    
    eMDLERR_UNSUPPORTED: MdlErrorValues
    
    eMDLERR_USERABORT: MdlErrorValues
    
    eMDLERR_V7CELLLIBRARY: MdlErrorValues
    
    eMDLERR_V8B2CELLLIBRARY: MdlErrorValues
    
    eMDLERR_VARWRONGSIZE: MdlErrorValues
    
    eMDLERR_VIEWGROUPNOTFOUND: MdlErrorValues
    
    eMDLERR_VIEWNOTDISPLAYED: MdlErrorValues
    
    eMDLERR_VIEWNOTFOUND: MdlErrorValues
    
    eMDLERR_VOIDDATATYPE: MdlErrorValues
    
    eMDLERR_WRITEFAILED: MdlErrorValues
    
    eMDLERR_WRITEINHIBIT: MdlErrorValues
    
    eMDLERR_WRONGELEMID: MdlErrorValues
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MdlErrorValues) -> int:
        ...
    
class MentryContents:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def data_interpcmd(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
    @property
    def data_intype(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
    @property
    def data_offset(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
    @property
    def data_prim(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
    @property
    def data_symbol(arg0: MSPyMstnPlatform.MentryContents) -> str:
        ...
    
    @property
    def data_ucmd(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
    @property
    def type(arg0: MSPyMstnPlatform.MentryContents) -> int:
        ...
    
class MenuMarkType:
    """
    Members:
    
    eMARK_NONE
    
    eMARK_TOGGLE_OUT
    
    eMARK_TOGGLE_IN
    
    eMARK_RADIO_OUT
    
    eMARK_RADIO_IN
    
    eMARK_RIGHT_ARROW
    """

    def __init__(self: MSPyMstnPlatform.MenuMarkType, value: int) -> None:
        ...
    
    eMARK_NONE: MenuMarkType
    
    eMARK_RADIO_IN: MenuMarkType
    
    eMARK_RADIO_OUT: MenuMarkType
    
    eMARK_RIGHT_ARROW: MenuMarkType
    
    eMARK_TOGGLE_IN: MenuMarkType
    
    eMARK_TOGGLE_OUT: MenuMarkType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MenuMarkType) -> int:
        ...
    
class Mesh:
    """
    None
    """

    @staticmethod
    def BooleanDifference(mesh1: MSPyBentleyGeom.PolyfaceHeader, mesh2: MSPyBentleyGeom.PolyfaceHeader, model: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def BooleanIntersection(mesh1: MSPyBentleyGeom.PolyfaceHeader, mesh2: MSPyBentleyGeom.PolyfaceHeader, model: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def BooleanUnion(mesh1: MSPyBentleyGeom.PolyfaceHeader, mesh2: MSPyBentleyGeom.PolyfaceHeader, model: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def ExtrudeToTarget(results: MSPyBentleyGeom.PolyfaceHeaderPtrArray, roofAgenda: MSPyDgnPlatform.ElementAgenda, targetAgenda: MSPyDgnPlatform.ElementAgenda) -> bool:
        ...
    
    @staticmethod
    def ExtrudeVolume(results: MSPyBentleyGeom.PolyfaceHeaderPtrArray, agenda: MSPyDgnPlatform.ElementAgenda, extrusionVec: MSPyBentleyGeom.DVec3d) -> bool:
        ...
    
    @staticmethod
    def ExtrudeVolumeAlongGlobalZ(results: MSPyBentleyGeom.PolyfaceHeaderPtrArray, agenda: MSPyDgnPlatform.ElementAgenda, length: float) -> bool:
        ...
    
    @staticmethod
    def Healholes(mesh: MSPyBentleyGeom.PolyfaceHeader) -> tuple:
        ...
    
    @staticmethod
    def SubdivideKeepSharp(mesh: MSPyBentleyGeom.PolyfaceHeader, subdivisionLevel: int, model: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def SubdivideSmoothly(mesh: MSPyBentleyGeom.PolyfaceHeader, subdivisionLevel: int, model: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MessageCenter:
    """
    None
    """

    @staticmethod
    def ShowDebugMessage(briefMessage: str, detailedMessage: str, openAlertBox: bool) -> None:
        ...
    
    @staticmethod
    def ShowErrorMessage(briefMessage: str, detailedMessage: str, openAlertBox: bool) -> None:
        ...
    
    @staticmethod
    def ShowInfoMessage(briefMessage: str, detailedMessage: str, openAlertBox: bool) -> None:
        ...
    
    @StatusCommand.setter
    def StatusCommand(arg0: object, arg1: str) -> None:
        ...
    
    @StatusMessage.setter
    def StatusMessage(arg0: object, arg1: str) -> None:
        ...
    
    @StatusPrompt.setter
    def StatusPrompt(arg0: object, arg1: str) -> None:
        ...
    
    @StatusWarning.setter
    def StatusWarning(arg0: object, arg1: str) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MessageDestination:
    """
    Members:
    
    eMESSAGE_DEST_None
    
    eMESSAGE_DEST_MessageCenter
    
    eMESSAGE_DEST_WarningDialog
    """

    def __init__(self: MSPyMstnPlatform.MessageDestination, value: int) -> None:
        ...
    
    eMESSAGE_DEST_MessageCenter: MessageDestination
    
    eMESSAGE_DEST_None: MessageDestination
    
    eMESSAGE_DEST_WarningDialog: MessageDestination
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MessageDestination) -> int:
        ...
    
class MlineStyleMsgType:
    """
    Members:
    
    eMLINESTYLE_PreActivate
    
    eMLINESTYLE_PostActivate
    
    eMLINESTYLE_PostAdd
    
    eMLINESTYLE_PostDelete
    
    eMLINESTYLE_PostChange
    
    eMLINESTYLE_UndoDelete
    
    eMLINESTYLE_UndoAdd
    
    eMLINESTYLE_UndoModify
    
    eMLINESTYLE_RedoDelete
    
    eMLINESTYLE_RedoAdd
    
    eMLINESTYLE_RedoModify
    
    eMLINESTYLE_PreActivateByName
    """

    def __init__(self: MSPyMstnPlatform.MlineStyleMsgType, value: int) -> None:
        ...
    
    eMLINESTYLE_PostActivate: MlineStyleMsgType
    
    eMLINESTYLE_PostAdd: MlineStyleMsgType
    
    eMLINESTYLE_PostChange: MlineStyleMsgType
    
    eMLINESTYLE_PostDelete: MlineStyleMsgType
    
    eMLINESTYLE_PreActivate: MlineStyleMsgType
    
    eMLINESTYLE_PreActivateByName: MlineStyleMsgType
    
    eMLINESTYLE_RedoAdd: MlineStyleMsgType
    
    eMLINESTYLE_RedoDelete: MlineStyleMsgType
    
    eMLINESTYLE_RedoModify: MlineStyleMsgType
    
    eMLINESTYLE_UndoAdd: MlineStyleMsgType
    
    eMLINESTYLE_UndoDelete: MlineStyleMsgType
    
    eMLINESTYLE_UndoModify: MlineStyleMsgType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MlineStyleMsgType) -> int:
        ...
    
class ModelChangeType:
    """
    Members:
    
    eMODEL_CHANGE_Create
    
    eMODEL_CHANGE_Delete
    
    eMODEL_CHANGE_Properties
    
    eMODEL_CHANGE_Settings
    
    eMODEL_CHANGE_Active
    
    eMODEL_CHANGE_BeforeDelete
    
    eMODEL_CHANGE_UnCreate
    
    eMODEL_CHANGE_UnDelete
    
    eMODEL_CHANGE_BeforeUnCreate
    
    eMODEL_CHANGE_Name
    
    eMODEL_CHANGE_BeforeActive
    
    eMODEL_CHANGE_BeforeName
    
    eMODEL_CHANGE_BeforeSettings
    
    eMODEL_CHANGE_BeforeProperties
    
    eMODEL_CHANGE_BeforeCreate
    
    eMODEL_CHANGE_BeforeUnDelete
    
    eMODEL_CHANGE_PropagateAnnotationScale
    
    eMODEL_CHANGE_BeforeCopy
    
    eMODEL_CHANGE_Copied
    
    eMODEL_CHANGE_BeforeUndoProperties
    
    eMODEL_CHANGE_UndoProperties
    """

    def __init__(self: MSPyMstnPlatform.ModelChangeType, value: int) -> None:
        ...
    
    eMODEL_CHANGE_Active: ModelChangeType
    
    eMODEL_CHANGE_BeforeActive: ModelChangeType
    
    eMODEL_CHANGE_BeforeCopy: ModelChangeType
    
    eMODEL_CHANGE_BeforeCreate: ModelChangeType
    
    eMODEL_CHANGE_BeforeDelete: ModelChangeType
    
    eMODEL_CHANGE_BeforeName: ModelChangeType
    
    eMODEL_CHANGE_BeforeProperties: ModelChangeType
    
    eMODEL_CHANGE_BeforeSettings: ModelChangeType
    
    eMODEL_CHANGE_BeforeUnCreate: ModelChangeType
    
    eMODEL_CHANGE_BeforeUnDelete: ModelChangeType
    
    eMODEL_CHANGE_BeforeUndoProperties: ModelChangeType
    
    eMODEL_CHANGE_Copied: ModelChangeType
    
    eMODEL_CHANGE_Create: ModelChangeType
    
    eMODEL_CHANGE_Delete: ModelChangeType
    
    eMODEL_CHANGE_Name: ModelChangeType
    
    eMODEL_CHANGE_PropagateAnnotationScale: ModelChangeType
    
    eMODEL_CHANGE_Properties: ModelChangeType
    
    eMODEL_CHANGE_Settings: ModelChangeType
    
    eMODEL_CHANGE_UnCreate: ModelChangeType
    
    eMODEL_CHANGE_UnDelete: ModelChangeType
    
    eMODEL_CHANGE_UndoProperties: ModelChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ModelChangeType) -> int:
        ...
    
class ModelRef:
    """
    None
    """

    @staticmethod
    def ActivateAndDisplay(newModelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Activates and displays the specified modelRef. The
        function checks if the model is displayed in the current views and, if
        not, new views are opened with the modelRef as their root. @Param(input)
        newModelRef the model to activate. The modelRef must be from the
        current master file. @Return SUCCESS if the model is found and
        activated successfully; otherwise, ERROR.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def AreSame(modelRef1: MSPyDgnPlatform.DgnModelRef, modelRef2: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether two specified modelRefs are actually
        the same. @Param(input) modelRef1 the first modelRef. @Param(input)
        modelRef2 the second modelRef. @Return true if the two modelRefs the
        same.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CheckAllRights(modelRef: MSPyDgnPlatform.DgnModelRef, rights: int, diaplayError: MessageDestination) -> int:
        """
        @Description Check if the specified rights are granted to the current
        user for the given model and all references @Param(input) modelRef The
        modelRef to check. @Param(input) rights the rights to query. See
        DgnFileObj.CheckRights for a description of the rights values.
        @Param(input) displayError Determines whether an error should be
        displayed in the message center, a pop-up dialog, or the function
        should return silently. @Return SUCCESS if all of the rights are
        granted for all files.
        
        See also:
        digitalRights_checkRights
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CheckAllRightsIfDisplayed(modelRef: MSPyDgnPlatform.DgnModelRef, rights: int, view: int, diaplayError: MessageDestination) -> int:
        """
        @Description Check if the specified rights are granted to the current
        user for the given model and all references that are displayed in the
        selected view(s). @Param(input) modelRef The modelRef to check.
        @Param(input) rights the rights to query. See DgnFileObj.CheckRights
        for a description of the rights values. @Param(input) view the view to
        query or ANY_VIEW. @Param(input) displayError Determines whether an error
        should be displayed in the message center, a pop-up dialog, or the
        function should return silently. @Return SUCCESS if all of the rights
        are granted for all files in the specified view.
        
        See also:
        ModelRef.CheckAllRights
        
        See also:
        digitalRights_checkRights
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CheckAllRightsIncludingProtectedRefs(modelRef: MSPyDgnPlatform.DgnModelRef, rights: int, diaplayError: MessageDestination) -> int:
        """
        @Description Check if the specified rights are granted to the current
        user for the given model and all references, including the references
        that could not be opened because the user lacked viewing access.
        @Param(input) modelRef The modelRef to check. @Param(input) rights the
        rights to query. See DgnFileObj.CheckRights for a description of
        the rights values. @Param(input) displayError Determines whether an error
        should be displayed in the message center, a pop-up dialog, or the
        function should return silently. @Return SUCCESS if all of the rights
        are granted for all files. MDLERR_RIGHT_NOT_GRANTED if any of the
        opened references do not have the specified rights, or if there were
        references that could not be opened because the user did not have any
        access rights to the file.
        
        See also:
        digitalRights_checkRights
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CopyModel(sourceModelRef: MSPyDgnPlatform.DgnModelRef, destFile: MSPyDgnPlatform.DgnFile, destModelName: str, destModelDescr: str) -> tuple:
        """
        @Description Copy a model from one location to another. This function
        handles copying levels, styles, etc. necessary for elements in the
        model. @Remarks Export rights for the source modelRef and edit rights
        for the destination file are checked. @Param(output) returnDestModelRef
        Working model ref for resulting model. If NULL is not passed for this
        parameter, the resulting modelRef must be freed using
        ModelRef.FreeWorking. @Param(input) sourceModelRef Model to copy.
        @Param(input) destFile File in which the model should be written.
        @Param(input) pDestModelName Name for the copied model. @Param(input)
        pDestModelDescr Description for the copied model; may be NULL. @Return
        SUCCESS if the model was copied successfully; error returns are
        defined in mdlerrs.r.h. @See DgnFileObj.CreateModel
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateCacheSpecificWorking(dgnFile: MSPyDgnPlatform.DgnFile, modelId: int, fillCache: bool, loadRefs: bool, includeUndisplayedRefs: bool, sectionsToFill: MSPyDgnPlatform.DgnModelSections) -> tuple:
        """
        @Description Creates a " working " DgnModelRefP containing the specified
        cache sections that can be passed to functions that take DgnModelRefP
        arguments. The ModelRef created must be freed using
        ~mModelRef.FreeWorking. If the file specified as dgnFileP is read-
        only, then the modelRef will be read-only also. @Param dgnModelRefP
        (output) modelRef referring to the model created @Param dgnFileP (input) the
        file object to search for the model @Param modelID (input) the ID of the
        model to load @Param fillCache (input) true if the cache for the model
        should be filled. Operations like changing name, description, etc.,
        can be performed even if the cache is not filled. @Param loadRefs (input)
        true if the caches for the model's attached references should also be
        loaded. The fillCache argument must be true for this to work. @Param
        includeUndisplayedRefs (input) If true, load the caches for references that
        are not displayed. The fillCache and loadRefs arguments must be true
        for this to work. @Param sectionsToFill (input) Specific cache sections to
        fill. @Return SUCCESS if the modelRef is returned and filled as
        requested.
        """
        ...
    
    @staticmethod
    def CreateWorking(dgnFile: MSPyDgnPlatform.DgnFile, modelId: int, fillCache: bool, loadRefs: bool) -> tuple:
        """
        @Description Creates a " working " DgnModelRefP that can be passed to
        functions that take DgnModelRefP arguments. The ModelRef created must
        be freed using ModelRef.FreeWorking. If the file specified as
        dgnFileP is read-only, then the modelRef will be read-only also.
        @Param(output) dgnModelRefP modelRef referring to the model created
        @Param(input) dgnFileP the file object to search for the model @Param(input)
        modelID the ID of the model to load @Param(input) fillCache true if the
        cache for the model should be filled. Operations like changing name,
        description, etc., can be performed even if the cache is not filled.
        @Param(input) loadRefs true if the caches for the model's attached
        references should also be loaded. The fillCache argument must be true
        for this to work. @Return SUCCESS if the modelRef is returned and
        filled as requested.
        
        See also:
        ModelRef.CreateWorkingByName
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def CreateWorkingByName(dgnFile: MSPyDgnPlatform.DgnFile, modelName: str, fillCache: bool, loadRefs: bool) -> tuple:
        """
        @Description Creates a " working " DgnModelRefP that can be passed to
        functions that take DgnModelRefP arguments. The ModelRef created must
        be freed using ModelRef.FreeWorking. If the file specified as
        dgnFileP is read-only, then the modelRef will be read-only also.
        @Param(output) dgnModelRefP modelRef referring to the model created
        @Param(input) dgnFileP the file object to search for the model @Param(input)
        modelNameP the name of the model to find in the design file.
        @Param(input) fillCache true if the cache for the model should be filled.
        Operations like changing name, description, etc., can be performed
        even if the cache is not filled. @Param(input) loadRefs true if the
        caches for the model's attached references should also be loaded. The
        fillCache argument must be true for this to work. @Return SUCCESS if
        the modelRef is returned and filled as requested.
        
        See also:
        ModelRef.CreateWorking
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def DeleteModel(modelRef: MSPyDgnPlatform.DgnModelRef, deleteElements: bool) -> int:
        """
        @Description Deletes the specified model from the file that contains
        it. @Param(input) modelRef the model to delete. @Param(input) deleteElements
        If true, the model will not be deleted unless it is empty. If false,
        all elements assigned to the model are also deleted. @Return SUCCESS
        if the model is found and deleted successfully; otherwise, ERROR.
        @Remarks This action is undoable if the model is deleted from the
        master file
        
        See also:
        ModelRef.IsReadOnly
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def FreeWorking(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Frees modelRef's created using ModelRef.CreateWorking
        or ModelRef.CreateWorkingByName. @Param(input) modelRef the modelRef
        to free. @Return SUCCESS if the model ref is freed, MDLERR_BADMODELREF
        if the modelRef specified is not a working modelRef. @Remarks Only
        modelRefs created with ModelRef.CreateWorking or
        ModelRef.CreateWorkingByName can be freed using this function. An
        attempt to free other modelRefs causes a returns value of
        MDLERR_BADMODELREF.
        
        See also:
        ModelRef.CreateWorking ModelRef.CreateWorkingByName
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetAttachmentID(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetChildCount(modelRef: MSPyDgnPlatform.DgnModelRef, childTypeMask: int) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetDgnFile(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.DgnFile:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetDgnModel(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.DgnModel:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetDisplayName(modelRef: MSPyDgnPlatform.DgnModelRef, displayName: MSPyBentley.WString, separator: str) -> int:
        """
        @Description Gets the string that MicroStation uses to display the
        name of the modelRef in its user interface. If the modelRef is a
        reference, the string consists of the logical name (if there is any),
        followed by the file name, followed by the model name (if there is
        more than one model in the file). @Param(input) modelRef the model for
        which to retrieve the name @Param(output) displayName the display name.
        @Param(input) maxChars the size of displayName, in MSWChars. @Param(input)
        separator the separator to use. Maximum size allowed is 10 wide chars.
        If NULL is passed in, ", " will be used by default. @Return
        MDLERR_NAMETOOLONG if name does not fit, MDLERR_BADMODELREF if invalid
        modelRef. @Remarks To ensure that displayName is large enough, supply
        a buffer that holds MAX_MODEL_DISPLAY_LENGTH MSWChars.
        
        See also:
        RefFile.GetInfo Bentley Systems
        """
        ...
    
    @staticmethod
    def GetElementRef(modelRef: MSPyDgnPlatform.DgnModelRef, filePos: int) -> MSPyDgnPlatform.ElementRefBase:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetEof(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetFileName(modelRef: MSPyDgnPlatform.DgnModelRef, fileName: MSPyBentley.WString) -> int:
        """
        @Description Gets the name of the file that contains the data for the
        specified model. @Param(input) modelRef the model to query. @Param(output)
        fileName buffer to hold the file name. @Param(input) fileNameBufSize size
        of the buffer (in characters) pointed to by fileName. @Return SUCCESS
        if the name is obtained without error; MDLERR_BADARG if modelRef was
        invalid; MDLERR_BADMODELREF if the file could not be obtained.
        @Remarks This function requires that the element cache exists for the
        specified modelRef. For example, this function can fail if the
        specified modelRef is a reference model that is not displayed, or is
        not found. In this case, RefFile.GetRefParameter can be used to get
        the file name stored in the reference attachment. @Remarks A more
        modern version that returns a WString is
        modelRef->GetDgnFileP()->GetFileName().
        
        See also:
        ModelRef.GetDgnFile
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetModelType(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.DgnModelType:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetParent(modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.DgnModelRef:
        """
        @Description Gets the DgnModelRefP for the model that is the parent of
        the specified modelRef. @Param(input) modelRef The model to get the
        parent of. @Return The modelRef for the parent model of the specified
        modelRef if a parent exists; otherwise, NULL. @Remarks Reference
        attachments have a parent, but the active model does not. The parent
        of a directly attached reference is the active model. The parent of a
        nested reference is the model to which it is attached.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetRange(modelRef: MSPyDgnPlatform.DgnModelRef, outRange: MSPyBentleyGeom.DRange3d, viewIndex: int, transform: MSPyBentleyGeom.Transform, includeChildren: bool) -> int:
        """
        @Description Gets the range for the specified modelRef. This
        calculates the range for all geometry in a model - it does not ignore
        elements that are not displayed in the input view. This function is
        relatively fast. It does not iterate through the model but uses a
        range that is stored internally. @Param(input) modelRef the model to get
        the range for. @Param(output) pRange the model range
        
        :param viewIndex:
        index of view, used to get the clip volume of the view.
        
        :param transformP:
        NULL or transform to apply before calculating range.
        
        :param includeChildren:
        true to include the range of child references. @Return SUCCESS if
        the requested params were acceptable, otherwise ERROR
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def GetTransient() -> MSPyDgnPlatform.DgnModelRef:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetUorPerMaster(modelRef: MSPyDgnPlatform.DgnModelRef) -> float:
        ...
    
    @staticmethod
    def GetUorScaleBetweenModels(srcModelRef: MSPyDgnPlatform.DgnModelRef, dstModelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetViewMask(modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Gets a bitmask representing the views that display the
        specified modelRef. @Param(input) modelRef the model to get the view
        bitmask for. @Return An integer value that is has one bit for each of
        views 1 through 8 whether the modelRef is displayed in the
        corresponding view. Bit 0 corresponds to " View 1 ".
        
        See also:
        ModelRef.IsDisplayedInView Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def InMasterFile(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether the specified modelRef is contained in
        the master file. @Param(input) modelRef the model to test. @Return true,
        if the modelRef is valid and its data is stored in the current master
        file.
        
        See also:
        ModelRef.IsReference ModelRef.GetDgnFile
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Is3D(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def IsActiveModel(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether the specified modelRef is the active
        model. @Param(input) modelRef the model to test. @Return true, if the
        modelRef is the currently active model.
        
        See also:
        ModelRef.IsReference ustmthModelRef.IsNestedReferenceC
        """
        ...
    
    @staticmethod
    def IsDefault(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def IsDisplayedInView(modelRef: MSPyDgnPlatform.DgnModelRef, viewIndex: int) -> bool:
        """
        @Description Determines whether the specified MSPyDgnPlatform.DgnModelRef
        is displayed in the specified view. @Param(input) modelRef the the model
        to query. @Param(input) viewIndex the view index to test. This value
        should be in the range of 0 - (MSPyDgnPlatform.MAX_VIEWS-1), or the value
        ANY_VIEW if the test is to see whether it is displayed in any view.
        @Return true if the specified modelRef is currently displayed in the
        given view. @Remarks A model is not displayed in a view if it is not
        the root model for that view or one of its descendants. @Remarks If
        the modelRef is a reference modelRef, it is not displayed in any view
        if its display flag is turned off, or if the file or model referenced
        could not be found. It is also not displayed in a particular view if
        the level of its reference attachment element is turned off in that
        view.
        
        See also:
        ModelRef.GetViewMask
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsEmpty(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def IsNestedReference(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether the specified reference model is
        attached to another reference model. @Param(input) modelRef the model to
        test. @Return true if the specified modelRef is referenced from
        another referenced model.
        
        See also:
        ModelRef.IsReference ModelRef.IsActiveModel
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsReadOnly(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether a modelRef is read-only. @Param(input)
        modelRef the modelRef to test. @Return true if the specified model is
        read-only.
        
        See also:
        ModelRef.IsReference
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsReference(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether the specified modelRef is a reference
        model. @Param(input) modelRef The model to test. @Return true if the
        specified modelRef represents a reference model.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsSheet(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def IsTransient(modelRef: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def LoadReferenceModels(modelRef: MSPyDgnPlatform.DgnModelRef, loadCache: bool, loadRasterRefs: bool, loadUndisplayedRefs: bool) -> int:
        """
        Loads the reference models attached to the specified modelRef. By
        default, reference models are loaded only for the active modelRef (and
        its descendants), and child DgnModelRefP's for other modelRefs are not
        created. When this function is called, the child DgnModelRefPs will be
        created so they can be iterated using ModelRefIterator.Create.
        
        :param modelRef:
        The modelRef for which the reference DgnModelRefPs are to be
        created.
        
        :param loadCache:
        true if caches should be loaded for reference models, false if
        only modelRefs should be created.
        
        :param loadRasterRefs:
        true if raster reference files should be loaded, false if not.
        
        :param loadUndisplayedRefs:
        true if even undisplayed reference files should be loaded.
        
        :returns:
        SUCCESS or a nonzero error code. @Group " Models "
        
        Remark:
        """
        ...
    
    @staticmethod
    def SetDefaultBackgroundColor(modelRef: MSPyDgnPlatform.DgnModelRef) -> None:
        """
        @Description Sets the model background color to the default value for
        that model type. This has an effect only on sheet models, because
        there is no default background color for normal models.. @Param(input)
        modelRefP the modelRef for which the default background color is set.
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ModelRefList:
    """
    None
    """

    @staticmethod
    def Add(modelRefList: MSPyDgnPlatform.DgnModelRefList, entry: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Clone(modelRefList: MSPyDgnPlatform.DgnModelRefList) -> MSPyDgnPlatform.DgnModelRefList:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def CopyContents(modelRefList: MSPyDgnPlatform.DgnModelRefList, srcModelRefList: MSPyDgnPlatform.DgnModelRefList) -> None:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Create() -> tuple:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Empty(modelRefList: MSPyDgnPlatform.DgnModelRefList) -> None:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Find(modelRefList: MSPyDgnPlatform.DgnModelRefList, entry: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @Description Gets the index of the specified modelRef in the list.
        @Param(input) modelRefList the list to search for the modelRef.
        @Param(input) entry the model to find in the list. @Return The index of
        the modelRef in the list if it is found; the value -1 if the entry
        isn't found.
        
        See also:
        ModelRefList.GetCount ModelRefList.Get
        ModelRefList.IsFound
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Free(modelRefList: MSPyDgnPlatform.DgnModelRefList) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Get(modelRefList: MSPyDgnPlatform.DgnModelRefList, index: int) -> MSPyDgnPlatform.DgnModelRef:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def GetCount(modelRefList: MSPyDgnPlatform.DgnModelRefList) -> int:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def Insert(modelRefList: MSPyDgnPlatform.DgnModelRefList, insertBefore: int, entry: MSPyDgnPlatform.DgnModelRef) -> None:
        """
        Remark:
        """
        ...
    
    @staticmethod
    def IsFound(modelRefList: MSPyDgnPlatform.DgnModelRefList, entry: MSPyDgnPlatform.DgnModelRef) -> bool:
        """
        @Description Determines whether the specified modelRef is a member of
        the list. @Param(input) modelRefList the list to search. @Param(input) entry
        the modelRef to find in the list. @Return true if the specified entry
        is found in the list.
        
        See also:
        ModelRefList.Find
        
        Bentley Systems
        
        Remark:
        """
        ...
    
    @staticmethod
    def Remove(modelRefList: MSPyDgnPlatform.DgnModelRefList, entry: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        Remark:
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MsPyBool:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.MsPyBool) -> None
        
        2. __init__(self: MSPyMstnPlatform.MsPyBool, arg0: bool) -> None
        """
        ...
    
    @property
    def value(self: MSPyMstnPlatform.MsPyBool) -> bool:
        ...
    @value.setter
    def value(self: MSPyMstnPlatform.MsPyBool, arg0: bool) -> None:
        ...
    
class MsPyDouble:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.MsPyDouble) -> None
        
        2. __init__(self: MSPyMstnPlatform.MsPyDouble, arg0: float) -> None
        """
        ...
    
    @property
    def value(self: MSPyMstnPlatform.MsPyDouble) -> float:
        ...
    @value.setter
    def value(self: MSPyMstnPlatform.MsPyDouble, arg0: float) -> None:
        ...
    
class MsPyInt:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.MsPyInt) -> None
        
        2. __init__(self: MSPyMstnPlatform.MsPyInt, arg0: int) -> None
        """
        ...
    
    @property
    def value(self: MSPyMstnPlatform.MsPyInt) -> int:
        ...
    @value.setter
    def value(self: MSPyMstnPlatform.MsPyInt, arg0: int) -> None:
        ...
    
class MstnCapabilityValues:
    """
    Members:
    
    eCAPABILITY_ELEMENT_ASSOCIATION
    
    eCAPABILITY_ELEMENT_LOCK
    
    eCAPABILITY_ELEMENT_CLASS
    
    eCAPABILITY_ELEMENT_TRANSPARENCY
    
    eCAPABILITY_ELEMENT_PRIORITY
    
    eCAPABILITY_BYCELL
    
    eCAPABILITY_BYLEVEL
    
    eCAPABILITY_ELEMENT_VIEWINDEPENDENT
    
    eCAPABILITY_TYPE2_CELL
    
    eCAPABILITY_SHAREDCELLS_FROM_ATTACHED_LIB
    
    eCAPABILITY_SHAREDCELLS_FROM_REFERENCES
    
    eCAPABILITY_DGN_BLOCKS
    
    eCAPABILITY_CELLLIB_ALLOWUPGRADEV7
    
    eCAPABILITY_CELLS_ATTRIBUTE_CHANGES
    
    eCAPABILITY_MASK_CLIP
    
    eCAPABILITY_SELF_REFERENCE
    
    eCAPABILITY_REF_SCALELINESTYLE
    
    eCAPABILITY_REF_AUX_INFO
    
    eCAPABILITY_REF_FROM_URL
    
    eCAPABILITY_REF_DISP_PER_VIEW
    
    eCAPABILITY_REF_SAVE_PATH_REL
    
    eCAPABILITY_REF_RASTERDISPLAY_OFF
    
    eCAPABILITY_REF_ADJUSTCOLORS
    
    eCAPABILITY_REF_NONDEFAULT_MODEL
    
    eCAPABILITY_REF_NESTING_OPTIONS
    
    eCAPABILITY_REFERENCE_ATTACHLEVEL
    
    eCAPABILITY_REFERENCE_VIEWLEVELDISPLAY
    
    eCAPABILITY_REFERENCE_SHEET_LOGICALNAME
    
    eCAPABILITY_REFERENCE_GEOREPROJECT
    
    eCAPABILITY_REFERENCE_HIDDENLINE
    
    eCAPABILITY_REFERENCE_3DTO2D
    
    eCAPABILITY_REFERENCE_V8
    
    eCAPABILITY_REFERENCE_DWG
    
    eCAPABILITY_REFERENCE_ALLOW_DXF
    
    eCAPABILITY_REFERENCE_LINESTYLESCALE
    
    eCAPABILITY_REFERENCE_TRANSPARENCY
    
    eCAPABILITY_REFERENCE_PRIORITY
    
    eCAPABILITY_REFERENCE_DISPLAYOVERRIDES
    
    eCAPABILITY_REFERENCE_NEWLEVELDISPLAY
    
    eCAPABILITY_ACTIVATE_REFERENCE_INTERNAL
    
    eCAPABILITY_ACTIVATE_REFERENCE_EXTERNAL
    
    eCAPABILITY_REFERENCE_ANNOTATIONSCALE
    
    eCAPABILITY_TYPE90_ALL
    
    eCAPABILITY_TYPE87_RASTER
    
    eCAPABILITY_RASTER_TINT
    
    eCAPABILITY_RASTER_TRANSP_FULL_CONTROL
    
    eCAPABILITY_RASTER_BACKGROUND
    
    eCAPABILITY_RASTER_PROJECT
    
    eCAPABILITY_RASTER_DISP_GAMMA
    
    eCAPABILITY_RASTER_PRINT_GAMMA
    
    eCAPABILITY_RASTER_PRINT
    
    eCAPABILITY_RASTER_ALL_TYPES
    
    eCAPABILITY_RASTER_INVERT
    
    eCAPABILITY_RASTER_APPLYROTATIONANDAFFINITY
    
    eCAPABILITY_RASTER_GEOREFERENCEPRIORITY
    
    eCAPABILITY_RASTER_PHOTOMATCH
    
    eCAPABILITY_DEFAULT_FONTS
    
    eCAPABILITY_TEXT_FONTS
    
    eCAPABILITY_TEXT_FONTS_RSC
    
    eCAPABILITY_TEXT_FONTS_SHX
    
    eCAPABILITY_TEXT_FONTS_TRUETYPE
    
    eCAPABILITY_TEXT_SHXBIGFONTS
    
    eCAPABILITY_TEXT_HEIGHT
    
    eCAPABILITY_TEXT_WIDTH
    
    eCAPABILITY_TEXT_COLOR
    
    eCAPABILITY_TEXT_JUSTIFICATION
    
    eCAPABILITY_TEXT_JUSTIFICATION_LT
    
    eCAPABILITY_TEXT_JUSTIFICATION_LC
    
    eCAPABILITY_TEXT_JUSTIFICATION_LB
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMT
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMC
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMB
    
    eCAPABILITY_TEXT_JUSTIFICATION_CT
    
    eCAPABILITY_TEXT_JUSTIFICATION_CC
    
    eCAPABILITY_TEXT_JUSTIFICATION_CB
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMT
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMC
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMB
    
    eCAPABILITY_TEXT_JUSTIFICATION_RT
    
    eCAPABILITY_TEXT_JUSTIFICATION_RC
    
    eCAPABILITY_TEXT_JUSTIFICATION_RB
    
    eCAPABILITY_TEXT_NODEJUSTIFICATION
    
    eCAPABILITY_TEXT_BOLD
    
    eCAPABILITY_TEXT_UNDERLINE
    
    eCAPABILITY_TEXT_UNDERLINE_STYLE
    
    eCAPABILITY_TEXT_UNDERLINE_COLOR
    
    eCAPABILITY_TEXT_UNDERLINE_WEIGHT
    
    eCAPABILITY_TEXT_UNDERLINE_OFFSET
    
    eCAPABILITY_TEXT_OVERLINE
    
    eCAPABILITY_TEXT_OVERLINE_STYLE
    
    eCAPABILITY_TEXT_OVERLINE_COLOR
    
    eCAPABILITY_TEXT_OVERLINE_WEIGHT
    
    eCAPABILITY_TEXT_OVERLINE_OFFSET
    
    eCAPABILITY_TEXT_VERTICAL
    
    eCAPABILITY_TEXT_ITALICS
    
    eCAPABILITY_TEXT_SLANTANGLE
    
    eCAPABILITY_TEXT_BACKGROUND
    
    eCAPABILITY_TEXT_BACKGROUND_BORDER_X
    
    eCAPABILITY_TEXT_BACKGROUND_BORDER_Y
    
    eCAPABILITY_TEXT_BACKGROUND_COLOR
    
    eCAPABILITY_TEXT_BACKGROUND_FILL_COLOR
    
    eCAPABILITY_TEXT_BACKGROUND_STYLE
    
    eCAPABILITY_TEXT_BACKGROUND_WEIGHT
    
    eCAPABILITY_TEXT_SUPERSCRIPT
    
    eCAPABILITY_TEXT_SUBSCRIPT
    
    eCAPABILITY_TEXT_LINELENGTH
    
    eCAPABILITY_TEXT_LINESPACING
    
    eCAPABILITY_TEXT_LINESPACINGTYPE
    
    eCAPABILITY_TEXT_INTERCHARACTERSPACING
    
    eCAPABILITY_TEXT_FIXEDSPACING
    
    eCAPABILITY_TEXT_FRACTIONS
    
    eCAPABILITY_TEXT_LINEOFFSET_X
    
    eCAPABILITY_TEXT_LINEOFFSET_Y
    
    eCAPABILITY_TEXT_FULLJUSTIFICATION
    
    eCAPABILITY_TEXT_BACKWARDS
    
    eCAPABILITY_TEXT_UPSIDEDOWN
    
    eCAPABILITY_TEXT_AUTOSTACKFRACTIONS
    
    eCAPABILITY_TEXT_TTF_VERTICAL
    
    eCAPABILITY_PLACETEXT_DISPLAY_TOGGLES
    
    eCAPABILITY_TEXTSTYLE_ACTIVE_DGNSETTINGS
    
    eCAPABILITY_TEXTSTYLE_ACTIVE_DWGSETTINGS
    
    eCAPABILITY_TEXTSTYLE_STYLE_DGNSETTINGS
    
    eCAPABILITY_TEXTSTYLE_STYLE_DWGSETTINGS
    
    eCAPABILITY_TEXTSTYLE_ALLOW_CREATE
    
    eCAPABILITY_TEXTSTYLE_ALLOW_DELETE
    
    eCAPABILITY_TEXTSTYLE_ALLOW_MODIFY
    
    eCAPABILITY_TEXTSTYLE_NOSTYLE
    
    eCAPABILITY_WORDPROCESSOR_USE_RSCFRACTIONS
    
    eCAPABILITY_WORDPROC_FIELD_MODELPROPERTIES
    
    eCAPABILITY_WORDPROC_FIELD_SIGNATUREPLACEHOLDER
    
    eCAPABILITY_WORDPROC_FIELD_LINKPLACEHOLDER
    
    eCAPABILITY_WORDPROC_FIELD_CELLPLACEHOLDER
    
    eCAPABILITY_WORDPROC_FIELD_PRINTPROPERTIES
    
    eCAPABILITY_TAGS_COPY_WITH_BASE
    
    eCAPABILITY_TAG_NOCELL_ELEMS
    
    eCAPABILITY_IGDS_LINESTYLE
    
    eCAPABILITY_CREATE_POINT_STYLE
    
    eCAPABILITY_CREATE_COMPOUND_STYLE
    
    eCAPABILITY_DWGINCOMPATIBLE_LINESTYLES
    
    eCAPABILITY_ALLOW_NON_SHX_STYLES
    
    eCAPABILITY_LINESTYLE_SCALEDWIDTH
    
    eCAPABILITY_LINESTYLE_CREATE_STDTXT
    
    eCAPABILITY_LINESTYLE_CREATE_TEXTSTYLE
    
    eCAPABILITY_LINESTYLE_SCALE_PER_MODEL
    
    eCAPABILITY_DIMENSION_NOSTYLE
    
    eCAPABILITY_DIMENSION_CUSTOM_PREFIX
    
    eCAPABILITY_DIMENSION_DIMLINE_LEVEL
    
    eCAPABILITY_DIMENSION_ARBITARY
    
    eCAPABILITY_DIMENSION_TERM_ATTRIBS
    
    eCAPABILITY_DIMENSION_TERM_SYMBOL
    
    eCAPABILITY_DIMENSION_TERM_FIRST
    
    eCAPABILITY_DIMENSION_TERM_JOINT
    
    eCAPABILITY_DIMENSION_WORKING_UNITS
    
    eCAPABILITY_DIMENSION_METRIC_FORMAT
    
    eCAPABILITY_DIMENSION_SECONDARY_ZEROS
    
    eCAPABILITY_DIMENSION_ALT_LABEL
    
    eCAPABILITY_DIMENSION_ARC_ABOVE
    
    eCAPABILITY_DIMENSION_ARC_LENGTH
    
    eCAPABILITY_DIMENSION_CELLTERM_HEIGHT
    
    eCAPABILITY_DIMENSION_UNDERLINE_TEXT
    
    eCAPABILITY_DIMENSION_BALLNCHAIN
    
    eCAPABILITY_DIMENSION_UNIT_LABEL
    
    eCAPABILITY_DIMENSION_UNIT_FORMAT
    
    eCAPABILITY_DIMENSION_TEXT_WEIGHT
    
    eCAPABILITY_DIMENSION_LSTYLE_OVERRIDE
    
    eCAPABILITY_DIMENSION_CAPSULE_FRAME
    
    eCAPABILITY_DIMENSION_CUSTOM_SYMBOLS
    
    eCAPABILITY_DIMENSION_TEXT_MARGIN
    
    eCAPABILITY_DIMENSION_MINIMUM_LEADER
    
    eCAPABILITY_DIMENSION_FONT
    
    eCAPABILITY_DIMENSION_TEXT_WIDTH
    
    eCAPABILITY_DIMENSION_NEG_EXTOFFSET
    
    eCAPABILITY_DIMENSION_TEXT_HEIGHT_SCALE
    
    eCAPABILITY_DIMENSION_TERM_SIDES
    
    eCAPABILITY_DIMENSION_USE_MINLEADER
    
    eCAPABILITY_DIMENSION_TEXT_JUSTIFICATION
    
    eCAPABILITY_DIMENSION_WIDEFIT_TEXTABOVE
    
    eCAPABILITY_DIMENSION_INCLINED_FIT
    
    eCAPABILITY_DIMENSION_FRACTION_SCALE
    
    eCAPABILITY_DIMENSION_DIN
    
    eCAPABILITY_DIMENSION_TOL_MARGINS
    
    eCAPABILITY_NOTE_ELBOWLENGTH
    
    eCAPABILITY_NOTE_LEFTMARGIN
    
    eCAPABILITY_NOTE_LOWERMARGIN
    
    eCAPABILITY_NOTE_ALL_FRAME_TYPES
    
    eCAPABILITY_NOTE_MANUALATTACHMENT
    
    eCAPABILITY_NOTE_MANUALJUSTIFICATION
    
    eCAPABILITY_NOTE_FRAME_SCALE
    
    eCAPABILITY_DIMSTYLE_REQUIRESTANDARD
    
    eCAPABILITY_DIMENSION_ORDDIM_DATUM
    
    eCAPABILITY_MODEL_CREATE_DESIGN
    
    eCAPABILITY_MODEL_CREATE_SHEET
    
    eCAPABILITY_MODEL_WITHOUT_VIEWGROUP
    
    eCAPABILITY_MODEL_CREATE_2D
    
    eCAPABILITY_MODEL_CREATE_3D
    
    eCAPABILITY_MODEL_CHANGE_TYPE
    
    eCAPABILITY_MODEL_DELETE_DESIGN
    
    eCAPABILITY_MODEL_DELETE_SHEET
    
    eCAPABILITY_MODEL_DELETE_LAST_DESIGN
    
    eCAPABILITY_MODEL_DELETE_LAST_SHEET
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_DESIGN
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_SHEET
    
    eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE
    
    eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE_LOCK
    
    eCAPABILITY_MODEL_DISPLAY_SHEETLAYOUT
    
    eCAPABILITY_MODEL_PLACE_AS_CELL
    
    eCAPABILITY_MODEL_UNITS_IN_SHEET
    
    eCAPABILITY_MODEL_CREATE_DRAWING
    
    eCAPABILITY_MODEL_DELETE_DRAWING
    
    eCAPABILITY_MODEL_DELETE_LAST_DRAWING
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_DRAWING
    
    eCAPABILITY_MODEL_LINESTYLE_SCALE_OPTIONS
    
    eCAPABILITY_MODEL_SHEET_INDEXING
    
    eCAPABILITY_VIEWGROUP_CREATION
    
    eCAPABILITY_VIEWGROUP_DELETION
    
    eCAPABILITY_VIEWGROUP_UPDATE
    
    eCAPABILITY_VIEW_ROTATE_SHEET_MODEL_VIEW
    
    eCAPABILITY_VIEW_CLIP
    
    eCAPABILITY_SAVEDVIEWS_CREATE_FOR_SHEETS
    
    eCAPABILITY_SAVEDVIEWS_APPLY_TO_SHEETS
    
    eCAPABILITY_SAVEDVIEWS_DELETE_FOR_SHEETS
    
    eCAPABILITY_SAVEDVIEWS_PROPS_FOR_SHEETS
    
    eCAPABILITY_SAVEDVIEWS_UPDATE_FOR_SHEETS
    
    eCAPABILITY_VIEWATTRIBUTES
    
    eCAPABILITY_MULTILINE_NOSTYLE
    
    eCAPABILITY_MULTILINE_REQUIRESTANDARDSTYLE
    
    eCAPABILITY_MULTILINE_ALLOW_ACTIVE
    
    eCAPABILITY_MULTILINE_LINESTYLEMODS
    
    eCAPABILITY_MULTILINE_CAPSYMBOLOGY
    
    eCAPABILITY_MULTILINE_WEIGHTS
    
    eCAPABILITY_MULTILINE_CLASS
    
    eCAPABILITY_LEVELS_GLOBALDISPLAY
    
    eCAPABILITY_LEVELS_GLOBALFREEZE
    
    eCAPABILITY_LEVELS_NUMBERS
    
    eCAPABILITY_LEVELS_DESCRIPTION
    
    eCAPABILITY_LEVELS_VPFREEZE
    
    eCAPABILITY_LEVELS_OVERRIDES_PER_LEVEL
    
    eCAPABILITY_LEVELS_OVERRIDE_SYMBOLOGY
    
    eCAPABILITY_LEVEL_LIBRARY_ATTACH
    
    eCAPABILITY_LEVEL_LIBRARY_DETACH
    
    eCAPABILITY_LEVELS_CREATE
    
    eCAPABILITY_LEVELS_ALLOW_DELETE
    
    eCAPABILITY_LEVELS_ALLOW_CREATE
    
    eCAPABILITY_LEVELS_VIEWDISPLAY
    
    eCAPABILITY_LEVELS_PRIORITY
    
    eCAPABILITY_LEVELS_TRANSPARENCY
    
    eCAPABILITY_LEVELS_ELEMENT_ACCESS
    
    eCAPABILITY_LEVELS_MATERIAL
    
    eCAPABILITY_LEVELS_USE_AUTO_GENERATED_NUMBERS
    
    eCAPABILITY_LEVELS_OVERRIDE_LSTYLE_PROPERTIES
    
    eCAPABILITY_LEVEL_ALLOW_LEVELMANAGER
    
    eCAPABILITY_CUSTOM_KEYPOINTS
    
    eCAPABILITY_UNITS_DGNFORMAT
    
    eCAPABILITY_UNITS_DGNCOORDREADOUT
    
    eCAPABILITY_UNITS_SUB
    
    eCAPABILITY_UNITS_LABEL
    
    eCAPABILITY_UNITS_SCIENTIFIC_ACCURACY
    
    eCAPABILITY_DGNLINK_MULTILINKS_PER_ELEM
    
    eCAPABILITY_DGNLINK_NONDGN_REGIONLINKS
    
    eCAPABILITY_DGNLINK_FOLLOW_TOLINKSET
    
    eCAPABILITY_DGNLINK_FOLLOW_TOCONFIGVAR
    
    eCAPABILITY_COLORTABLE
    
    eCAPABILITY_COLOR_SHOW_INDEXEDTAB
    
    eCAPABILITY_COLOR_SHOW_TRUECOLORTAB
    
    eCAPABILITY_COLOR_SHOW_BOOKTAB
    
    eCAPABILITY_COLOR_SHOW_GRADIENTTAB
    
    eCAPABILITY_COLOR_MULTI_GRADIENT
    
    eCAPABILITY_COLOR_SHOW_BACKGROUND
    
    eCAPABILITY_UI_LOADFROMACTIVEFILE
    
    eCAPABILITY_UI_IGNOREMENUSFROMRSCMODFILE
    
    eCAPABILITY_UI_IGNOREMENUSFROMDGNLIBS
    
    eCAPABILITY_ELEMENTTEMPLATE_HONORLEVELLOCK
    
    eCAPABILITY_ELEMENTTEMPLATE_HONORELEMENTLOCK
    
    eCAPABILITY_UI_ALWAYSSHOWADMINWORKFLOW
    
    eCAPABILITY_DESIGN_HISTORY
    
    eCAPABILITY_DDDESIGN
    
    eCAPABILITY_STANDARDSCHECKER
    
    eCAPABILITY_FILE_PROTECT
    
    eCAPABILITY_DIGITAL_SIGNATURES
    
    eCAPABILITY_MATERIAL_ASSIGNBYLEVELCOLOR
    
    eCAPABILITY_LIGHTING_ALLOWLONGLIGHTNAMES
    
    eCAPABILITY_PARASOLID
    
    eCAPABILITY_CURVE_IN_CMPLXCH
    
    eCAPABILITY_BSPLINE_DISPLAY_CONTROL
    
    eCAPABILITY_GRAPHIC_GROUP
    
    eCAPABILITY_NAMED_GROUPS
    
    eCAPABILITY_CELLPATTERN
    
    eCAPABILITY_DISPLAY_STYLE_EDITING
    
    eCAPABILITY_ITEMTYPE_ALLOW_MODIFY
    
    eCAPABILITY_ITEMTYPE_ALLOW_IMPORT
    
    eCAPABILITY_ITEMTYPE_ALLOW_NONDWG_LIBRARIES
    
    eCAPABILITY_ITEMTYPE_ALLOW_UNITS
    
    eCAPABILITY_ITEMTYPE_ALLOW_CHANGE_PROPERTY_TYPE
    
    eCAPABILITY_ITEMTYPE_ALLOW_ARRAYS
    
    eCAPABILITY_ITEMTYPE_ALLOW_RENAME_USED_ITEMTYPES
    
    eCAPABILITY_ITEMTYPE_ALLOW_ATTACH_TO_NONCELL
    
    eCAPABILITY_ITEMTYPE_ALLOW_CREATE_PROPERTY_TYPES
    
    eCAPABILITY_ITEMTYPE_ALLOW_ITEM_NAME
    
    eCAPABILITY_REPORTS_ALLOW_MODIFY
    
    eCAPABILITY_REPORTS_ALLOW_IMPORT
    
    eCAPABILITY_REPORTS_ASSOCIATION
    
    eCAPABILITY_CONSTRAINTS
    
    eCAPABILITY_DETAILINGSYMBOLS
    
    eCAPABILITY_POINTCLOUD
    
    eCAPABILITY_TERRAINMODEL
    
    eCAPABILITY_SAVEDVIEW
    
    eCAPABILITY_REALITYMESH
    
    eCAPABILITY_PRINT3D
    
    eCAPABILITY_MODELINGMESH
    
    eCAPABILITY_IMPORTRFA
    
    eCAPABILITY_PICKLIST
    
    eCAPABILITY_ITEMTYPEIMPORTEXPORT
    
    eCAPABILITY_COMPONENTMODEL
    
    eCAPABILITY_SCALE_AXIS_INDEP
    
    eCAPABILITY_LEVEL_PLOT
    
    eCAPABILITY_TABLE_DESCRIPTION
    
    eCAPABILITY_GRID_ORIENTATION
    
    eCAPABILITY_INVISGEOM_BYELEMENT
    
    eCAPABILITY_MODIFY_SELECTSERVER
    
    eCAPABILITY_FENCE_NAME
    
    eCAPABILITY_LARGE_DESIGN_PLANE
    
    eCAPABILITY_TEXT_INSERTSTACKFRACTIONS
    
    eMAX_CAPABILITIES
    """

    def __init__(self: MSPyMstnPlatform.MstnCapabilityValues, value: int) -> None:
        ...
    
    eCAPABILITY_ACTIVATE_REFERENCE_EXTERNAL: MstnCapabilityValues
    
    eCAPABILITY_ACTIVATE_REFERENCE_INTERNAL: MstnCapabilityValues
    
    eCAPABILITY_ALLOW_NON_SHX_STYLES: MstnCapabilityValues
    
    eCAPABILITY_BSPLINE_DISPLAY_CONTROL: MstnCapabilityValues
    
    eCAPABILITY_BYCELL: MstnCapabilityValues
    
    eCAPABILITY_BYLEVEL: MstnCapabilityValues
    
    eCAPABILITY_CELLLIB_ALLOWUPGRADEV7: MstnCapabilityValues
    
    eCAPABILITY_CELLPATTERN: MstnCapabilityValues
    
    eCAPABILITY_CELLS_ATTRIBUTE_CHANGES: MstnCapabilityValues
    
    eCAPABILITY_COLORTABLE: MstnCapabilityValues
    
    eCAPABILITY_COLOR_MULTI_GRADIENT: MstnCapabilityValues
    
    eCAPABILITY_COLOR_SHOW_BACKGROUND: MstnCapabilityValues
    
    eCAPABILITY_COLOR_SHOW_BOOKTAB: MstnCapabilityValues
    
    eCAPABILITY_COLOR_SHOW_GRADIENTTAB: MstnCapabilityValues
    
    eCAPABILITY_COLOR_SHOW_INDEXEDTAB: MstnCapabilityValues
    
    eCAPABILITY_COLOR_SHOW_TRUECOLORTAB: MstnCapabilityValues
    
    eCAPABILITY_COMPONENTMODEL: MstnCapabilityValues
    
    eCAPABILITY_CONSTRAINTS: MstnCapabilityValues
    
    eCAPABILITY_CREATE_COMPOUND_STYLE: MstnCapabilityValues
    
    eCAPABILITY_CREATE_POINT_STYLE: MstnCapabilityValues
    
    eCAPABILITY_CURVE_IN_CMPLXCH: MstnCapabilityValues
    
    eCAPABILITY_CUSTOM_KEYPOINTS: MstnCapabilityValues
    
    eCAPABILITY_DDDESIGN: MstnCapabilityValues
    
    eCAPABILITY_DEFAULT_FONTS: MstnCapabilityValues
    
    eCAPABILITY_DESIGN_HISTORY: MstnCapabilityValues
    
    eCAPABILITY_DETAILINGSYMBOLS: MstnCapabilityValues
    
    eCAPABILITY_DGNLINK_FOLLOW_TOCONFIGVAR: MstnCapabilityValues
    
    eCAPABILITY_DGNLINK_FOLLOW_TOLINKSET: MstnCapabilityValues
    
    eCAPABILITY_DGNLINK_MULTILINKS_PER_ELEM: MstnCapabilityValues
    
    eCAPABILITY_DGNLINK_NONDGN_REGIONLINKS: MstnCapabilityValues
    
    eCAPABILITY_DGN_BLOCKS: MstnCapabilityValues
    
    eCAPABILITY_DIGITAL_SIGNATURES: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_ALT_LABEL: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_ARBITARY: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_ARC_ABOVE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_ARC_LENGTH: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_BALLNCHAIN: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_CAPSULE_FRAME: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_CELLTERM_HEIGHT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_CUSTOM_PREFIX: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_CUSTOM_SYMBOLS: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_DIMLINE_LEVEL: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_DIN: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_FONT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_FRACTION_SCALE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_INCLINED_FIT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_LSTYLE_OVERRIDE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_METRIC_FORMAT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_MINIMUM_LEADER: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_NEG_EXTOFFSET: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_NOSTYLE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_ORDDIM_DATUM: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_SECONDARY_ZEROS: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TERM_ATTRIBS: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TERM_FIRST: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TERM_JOINT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TERM_SIDES: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TERM_SYMBOL: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TEXT_HEIGHT_SCALE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TEXT_JUSTIFICATION: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TEXT_MARGIN: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TEXT_WEIGHT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TEXT_WIDTH: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_TOL_MARGINS: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_UNDERLINE_TEXT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_UNIT_FORMAT: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_UNIT_LABEL: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_USE_MINLEADER: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_WIDEFIT_TEXTABOVE: MstnCapabilityValues
    
    eCAPABILITY_DIMENSION_WORKING_UNITS: MstnCapabilityValues
    
    eCAPABILITY_DIMSTYLE_REQUIRESTANDARD: MstnCapabilityValues
    
    eCAPABILITY_DISPLAY_STYLE_EDITING: MstnCapabilityValues
    
    eCAPABILITY_DWGINCOMPATIBLE_LINESTYLES: MstnCapabilityValues
    
    eCAPABILITY_ELEMENTTEMPLATE_HONORELEMENTLOCK: MstnCapabilityValues
    
    eCAPABILITY_ELEMENTTEMPLATE_HONORLEVELLOCK: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_ASSOCIATION: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_CLASS: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_LOCK: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_PRIORITY: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_TRANSPARENCY: MstnCapabilityValues
    
    eCAPABILITY_ELEMENT_VIEWINDEPENDENT: MstnCapabilityValues
    
    eCAPABILITY_FENCE_NAME: MstnCapabilityValues
    
    eCAPABILITY_FILE_PROTECT: MstnCapabilityValues
    
    eCAPABILITY_GRAPHIC_GROUP: MstnCapabilityValues
    
    eCAPABILITY_GRID_ORIENTATION: MstnCapabilityValues
    
    eCAPABILITY_IGDS_LINESTYLE: MstnCapabilityValues
    
    eCAPABILITY_IMPORTRFA: MstnCapabilityValues
    
    eCAPABILITY_INVISGEOM_BYELEMENT: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPEIMPORTEXPORT: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_ARRAYS: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_ATTACH_TO_NONCELL: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_CHANGE_PROPERTY_TYPE: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_CREATE_PROPERTY_TYPES: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_IMPORT: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_ITEM_NAME: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_MODIFY: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_NONDWG_LIBRARIES: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_RENAME_USED_ITEMTYPES: MstnCapabilityValues
    
    eCAPABILITY_ITEMTYPE_ALLOW_UNITS: MstnCapabilityValues
    
    eCAPABILITY_LARGE_DESIGN_PLANE: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_ALLOW_CREATE: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_ALLOW_DELETE: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_CREATE: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_DESCRIPTION: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_ELEMENT_ACCESS: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_GLOBALDISPLAY: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_GLOBALFREEZE: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_MATERIAL: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_NUMBERS: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_OVERRIDES_PER_LEVEL: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_OVERRIDE_LSTYLE_PROPERTIES: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_OVERRIDE_SYMBOLOGY: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_PRIORITY: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_TRANSPARENCY: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_USE_AUTO_GENERATED_NUMBERS: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_VIEWDISPLAY: MstnCapabilityValues
    
    eCAPABILITY_LEVELS_VPFREEZE: MstnCapabilityValues
    
    eCAPABILITY_LEVEL_ALLOW_LEVELMANAGER: MstnCapabilityValues
    
    eCAPABILITY_LEVEL_LIBRARY_ATTACH: MstnCapabilityValues
    
    eCAPABILITY_LEVEL_LIBRARY_DETACH: MstnCapabilityValues
    
    eCAPABILITY_LEVEL_PLOT: MstnCapabilityValues
    
    eCAPABILITY_LIGHTING_ALLOWLONGLIGHTNAMES: MstnCapabilityValues
    
    eCAPABILITY_LINESTYLE_CREATE_STDTXT: MstnCapabilityValues
    
    eCAPABILITY_LINESTYLE_CREATE_TEXTSTYLE: MstnCapabilityValues
    
    eCAPABILITY_LINESTYLE_SCALEDWIDTH: MstnCapabilityValues
    
    eCAPABILITY_LINESTYLE_SCALE_PER_MODEL: MstnCapabilityValues
    
    eCAPABILITY_MASK_CLIP: MstnCapabilityValues
    
    eCAPABILITY_MATERIAL_ASSIGNBYLEVELCOLOR: MstnCapabilityValues
    
    eCAPABILITY_MODELINGMESH: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CHANGE_TYPE: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CREATE_2D: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CREATE_3D: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CREATE_DESIGN: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CREATE_DRAWING: MstnCapabilityValues
    
    eCAPABILITY_MODEL_CREATE_SHEET: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_DESIGN: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_DRAWING: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_LAST_DESIGN: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_LAST_DRAWING: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_LAST_SHEET: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DELETE_SHEET: MstnCapabilityValues
    
    eCAPABILITY_MODEL_DISPLAY_SHEETLAYOUT: MstnCapabilityValues
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_DESIGN: MstnCapabilityValues
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_DRAWING: MstnCapabilityValues
    
    eCAPABILITY_MODEL_EDIT_PROPERTIES_SHEET: MstnCapabilityValues
    
    eCAPABILITY_MODEL_LINESTYLE_SCALE_OPTIONS: MstnCapabilityValues
    
    eCAPABILITY_MODEL_PLACE_AS_CELL: MstnCapabilityValues
    
    eCAPABILITY_MODEL_SHEET_INDEXING: MstnCapabilityValues
    
    eCAPABILITY_MODEL_UNITS_IN_SHEET: MstnCapabilityValues
    
    eCAPABILITY_MODEL_WITHOUT_VIEWGROUP: MstnCapabilityValues
    
    eCAPABILITY_MODIFY_SELECTSERVER: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_ALLOW_ACTIVE: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_CAPSYMBOLOGY: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_CLASS: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_LINESTYLEMODS: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_NOSTYLE: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_REQUIRESTANDARDSTYLE: MstnCapabilityValues
    
    eCAPABILITY_MULTILINE_WEIGHTS: MstnCapabilityValues
    
    eCAPABILITY_NAMED_GROUPS: MstnCapabilityValues
    
    eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE: MstnCapabilityValues
    
    eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE_LOCK: MstnCapabilityValues
    
    eCAPABILITY_NOTE_ALL_FRAME_TYPES: MstnCapabilityValues
    
    eCAPABILITY_NOTE_ELBOWLENGTH: MstnCapabilityValues
    
    eCAPABILITY_NOTE_FRAME_SCALE: MstnCapabilityValues
    
    eCAPABILITY_NOTE_LEFTMARGIN: MstnCapabilityValues
    
    eCAPABILITY_NOTE_LOWERMARGIN: MstnCapabilityValues
    
    eCAPABILITY_NOTE_MANUALATTACHMENT: MstnCapabilityValues
    
    eCAPABILITY_NOTE_MANUALJUSTIFICATION: MstnCapabilityValues
    
    eCAPABILITY_PARASOLID: MstnCapabilityValues
    
    eCAPABILITY_PICKLIST: MstnCapabilityValues
    
    eCAPABILITY_PLACETEXT_DISPLAY_TOGGLES: MstnCapabilityValues
    
    eCAPABILITY_POINTCLOUD: MstnCapabilityValues
    
    eCAPABILITY_PRINT3D: MstnCapabilityValues
    
    eCAPABILITY_RASTER_ALL_TYPES: MstnCapabilityValues
    
    eCAPABILITY_RASTER_APPLYROTATIONANDAFFINITY: MstnCapabilityValues
    
    eCAPABILITY_RASTER_BACKGROUND: MstnCapabilityValues
    
    eCAPABILITY_RASTER_DISP_GAMMA: MstnCapabilityValues
    
    eCAPABILITY_RASTER_GEOREFERENCEPRIORITY: MstnCapabilityValues
    
    eCAPABILITY_RASTER_INVERT: MstnCapabilityValues
    
    eCAPABILITY_RASTER_PHOTOMATCH: MstnCapabilityValues
    
    eCAPABILITY_RASTER_PRINT: MstnCapabilityValues
    
    eCAPABILITY_RASTER_PRINT_GAMMA: MstnCapabilityValues
    
    eCAPABILITY_RASTER_PROJECT: MstnCapabilityValues
    
    eCAPABILITY_RASTER_TINT: MstnCapabilityValues
    
    eCAPABILITY_RASTER_TRANSP_FULL_CONTROL: MstnCapabilityValues
    
    eCAPABILITY_REALITYMESH: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_3DTO2D: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_ALLOW_DXF: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_ANNOTATIONSCALE: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_ATTACHLEVEL: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_DISPLAYOVERRIDES: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_DWG: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_GEOREPROJECT: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_HIDDENLINE: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_LINESTYLESCALE: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_NEWLEVELDISPLAY: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_PRIORITY: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_SHEET_LOGICALNAME: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_TRANSPARENCY: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_V8: MstnCapabilityValues
    
    eCAPABILITY_REFERENCE_VIEWLEVELDISPLAY: MstnCapabilityValues
    
    eCAPABILITY_REF_ADJUSTCOLORS: MstnCapabilityValues
    
    eCAPABILITY_REF_AUX_INFO: MstnCapabilityValues
    
    eCAPABILITY_REF_DISP_PER_VIEW: MstnCapabilityValues
    
    eCAPABILITY_REF_FROM_URL: MstnCapabilityValues
    
    eCAPABILITY_REF_NESTING_OPTIONS: MstnCapabilityValues
    
    eCAPABILITY_REF_NONDEFAULT_MODEL: MstnCapabilityValues
    
    eCAPABILITY_REF_RASTERDISPLAY_OFF: MstnCapabilityValues
    
    eCAPABILITY_REF_SAVE_PATH_REL: MstnCapabilityValues
    
    eCAPABILITY_REF_SCALELINESTYLE: MstnCapabilityValues
    
    eCAPABILITY_REPORTS_ALLOW_IMPORT: MstnCapabilityValues
    
    eCAPABILITY_REPORTS_ALLOW_MODIFY: MstnCapabilityValues
    
    eCAPABILITY_REPORTS_ASSOCIATION: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEW: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEWS_APPLY_TO_SHEETS: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEWS_CREATE_FOR_SHEETS: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEWS_DELETE_FOR_SHEETS: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEWS_PROPS_FOR_SHEETS: MstnCapabilityValues
    
    eCAPABILITY_SAVEDVIEWS_UPDATE_FOR_SHEETS: MstnCapabilityValues
    
    eCAPABILITY_SCALE_AXIS_INDEP: MstnCapabilityValues
    
    eCAPABILITY_SELF_REFERENCE: MstnCapabilityValues
    
    eCAPABILITY_SHAREDCELLS_FROM_ATTACHED_LIB: MstnCapabilityValues
    
    eCAPABILITY_SHAREDCELLS_FROM_REFERENCES: MstnCapabilityValues
    
    eCAPABILITY_STANDARDSCHECKER: MstnCapabilityValues
    
    eCAPABILITY_TABLE_DESCRIPTION: MstnCapabilityValues
    
    eCAPABILITY_TAGS_COPY_WITH_BASE: MstnCapabilityValues
    
    eCAPABILITY_TAG_NOCELL_ELEMS: MstnCapabilityValues
    
    eCAPABILITY_TERRAINMODEL: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_ACTIVE_DGNSETTINGS: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_ACTIVE_DWGSETTINGS: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_ALLOW_CREATE: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_ALLOW_DELETE: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_ALLOW_MODIFY: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_NOSTYLE: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_STYLE_DGNSETTINGS: MstnCapabilityValues
    
    eCAPABILITY_TEXTSTYLE_STYLE_DWGSETTINGS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_AUTOSTACKFRACTIONS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_BORDER_X: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_BORDER_Y: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_COLOR: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_FILL_COLOR: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_STYLE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKGROUND_WEIGHT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BACKWARDS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_BOLD: MstnCapabilityValues
    
    eCAPABILITY_TEXT_COLOR: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FIXEDSPACING: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FONTS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FONTS_RSC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FONTS_SHX: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FONTS_TRUETYPE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FRACTIONS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_FULLJUSTIFICATION: MstnCapabilityValues
    
    eCAPABILITY_TEXT_HEIGHT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_INSERTSTACKFRACTIONS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_INTERCHARACTERSPACING: MstnCapabilityValues
    
    eCAPABILITY_TEXT_ITALICS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_CB: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_CC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_CT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LB: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMB: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LMT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_LT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RB: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMB: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMC: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RMT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_JUSTIFICATION_RT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_LINELENGTH: MstnCapabilityValues
    
    eCAPABILITY_TEXT_LINEOFFSET_X: MstnCapabilityValues
    
    eCAPABILITY_TEXT_LINEOFFSET_Y: MstnCapabilityValues
    
    eCAPABILITY_TEXT_LINESPACING: MstnCapabilityValues
    
    eCAPABILITY_TEXT_LINESPACINGTYPE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_NODEJUSTIFICATION: MstnCapabilityValues
    
    eCAPABILITY_TEXT_OVERLINE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_OVERLINE_COLOR: MstnCapabilityValues
    
    eCAPABILITY_TEXT_OVERLINE_OFFSET: MstnCapabilityValues
    
    eCAPABILITY_TEXT_OVERLINE_STYLE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_OVERLINE_WEIGHT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_SHXBIGFONTS: MstnCapabilityValues
    
    eCAPABILITY_TEXT_SLANTANGLE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_SUBSCRIPT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_SUPERSCRIPT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_TTF_VERTICAL: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UNDERLINE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UNDERLINE_COLOR: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UNDERLINE_OFFSET: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UNDERLINE_STYLE: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UNDERLINE_WEIGHT: MstnCapabilityValues
    
    eCAPABILITY_TEXT_UPSIDEDOWN: MstnCapabilityValues
    
    eCAPABILITY_TEXT_VERTICAL: MstnCapabilityValues
    
    eCAPABILITY_TEXT_WIDTH: MstnCapabilityValues
    
    eCAPABILITY_TYPE2_CELL: MstnCapabilityValues
    
    eCAPABILITY_TYPE87_RASTER: MstnCapabilityValues
    
    eCAPABILITY_TYPE90_ALL: MstnCapabilityValues
    
    eCAPABILITY_UI_ALWAYSSHOWADMINWORKFLOW: MstnCapabilityValues
    
    eCAPABILITY_UI_IGNOREMENUSFROMDGNLIBS: MstnCapabilityValues
    
    eCAPABILITY_UI_IGNOREMENUSFROMRSCMODFILE: MstnCapabilityValues
    
    eCAPABILITY_UI_LOADFROMACTIVEFILE: MstnCapabilityValues
    
    eCAPABILITY_UNITS_DGNCOORDREADOUT: MstnCapabilityValues
    
    eCAPABILITY_UNITS_DGNFORMAT: MstnCapabilityValues
    
    eCAPABILITY_UNITS_LABEL: MstnCapabilityValues
    
    eCAPABILITY_UNITS_SCIENTIFIC_ACCURACY: MstnCapabilityValues
    
    eCAPABILITY_UNITS_SUB: MstnCapabilityValues
    
    eCAPABILITY_VIEWATTRIBUTES: MstnCapabilityValues
    
    eCAPABILITY_VIEWGROUP_CREATION: MstnCapabilityValues
    
    eCAPABILITY_VIEWGROUP_DELETION: MstnCapabilityValues
    
    eCAPABILITY_VIEWGROUP_UPDATE: MstnCapabilityValues
    
    eCAPABILITY_VIEW_CLIP: MstnCapabilityValues
    
    eCAPABILITY_VIEW_ROTATE_SHEET_MODEL_VIEW: MstnCapabilityValues
    
    eCAPABILITY_WORDPROCESSOR_USE_RSCFRACTIONS: MstnCapabilityValues
    
    eCAPABILITY_WORDPROC_FIELD_CELLPLACEHOLDER: MstnCapabilityValues
    
    eCAPABILITY_WORDPROC_FIELD_LINKPLACEHOLDER: MstnCapabilityValues
    
    eCAPABILITY_WORDPROC_FIELD_MODELPROPERTIES: MstnCapabilityValues
    
    eCAPABILITY_WORDPROC_FIELD_PRINTPROPERTIES: MstnCapabilityValues
    
    eCAPABILITY_WORDPROC_FIELD_SIGNATUREPLACEHOLDER: MstnCapabilityValues
    
    eMAX_CAPABILITIES: MstnCapabilityValues
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.MstnCapabilityValues) -> int:
        ...
    
class MstnEventManager:
    """
    None
    """

    def AddEditActionSource(self: MSPyMstnPlatform.MstnEventManager, source: MSPyDgnPlatform.IEditActionSource) -> None:
        """
        Add a new MSPyDgnPlatform.IEditActionSource to MicroStation's list of
        installed EditActionSources. After this call, handler will be notified
        of all future EditActionSource events.
        
        :param (input):
        source New MSPyDgnPlatform.IEditActionSource to add
        """
        ...
    
    def AddMouseWheelHandler(self: MSPyMstnPlatform.MstnEventManager, handler: MSPyMstnPlatform.IMouseWheelHandler) -> None:
        """
        Add a new IMouseWheelHandler to MicroStation's list of installed
        MouseWheelHandlers.
        
        :param (input):
        mwHandler New IMouseWheelHandler to add
        """
        ...
    
    def AddPrintEventHandler(self: MSPyMstnPlatform.MstnEventManager, handler: MSPyMstnPlatform.IPrintEventHandler) -> None:
        """
        Add a new IPrintEventHandler to MicroStation's list of installed
        PrintEventHandlers.
        
        :param (input):
        handler New handler to add
        """
        ...
    
    def DropEditActionSource(self: MSPyMstnPlatform.MstnEventManager, source: MSPyDgnPlatform.IEditActionSource) -> None:
        """
        Drop an MSPyDgnPlatform.IEditActionSource from list of installed
        EditActionSources. After this call, handler will not be notified of
        future EditActionSource events.
        
        :param (input):
        source the MSPyDgnPlatform.IEditActionSource to drop.
        """
        ...
    
    def DropMouseWheelHandler(self: MSPyMstnPlatform.MstnEventManager, handler: MSPyMstnPlatform.IMouseWheelHandler) -> None:
        """
        Drop an IMouseWheelHandler from list of installed MouseWheelHandlers.
        After this call, handler will not be notified of future MouseWheel
        events.
        
        :param (input):
        mwHandler the IMouseWheelHandler to drop.
        """
        ...
    
    def DropPrintEventHandler(self: MSPyMstnPlatform.MstnEventManager, handler: MSPyMstnPlatform.IPrintEventHandler) -> None:
        """
        Drop an IPrintEventHandler from list of installed PrintEventHandlers.
        After this call, handler will not be notified of future print events.
        
        :param (input):
        handler to drop.
        """
        ...
    
    @staticmethod
    def GetManager() -> MSPyMstnPlatform.MstnEventManager:
        """
        Get the MstnEventManager instance.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MstnImage:
    """
    None
    """

    @staticmethod
    def RGBSeparateToBGR(rgbSeparate: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, colorMode: MSPyDgnPlatform.ImageColorMode) -> tuple:
        """
        @description Converts the specified image from RBG separate to BGR
        interlaced format.
        
        Parameter ``rgbSeparate``:
        IN the RRRGGGBBB format image data.
        
        Parameter ``imageSizeR``:
        IN the size of the image.
        
        Parameter ``colorMode``:
        IN either ImageColorMode.RGB or ImageColorMode.RGBA.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation.
        
        tuple[1] bytearray:
        bytearray object to receive the image in BGRBGRBGR or BGRABGRABGRA format
        """
        ...
    
    @staticmethod
    def RGBSeparateToRGBInPlace(rgb: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, colorMode: MSPyDgnPlatform.ImageColorMode) -> int:
        """
        @description Converts the specified image from RBG separate to RGB
        interlaced format.
        
        Parameter ``rgb``:
        IN OUT the buffer to receive the image in RGBRGBRGB or RGBARGBARGBA format.
        
        Parameter ``imageSizeR``:
        IN the RRRGGGBBB format image data.
        
        Parameter ``colorMode``:
        IN either ImageColorMode.RGB or ImageColorMode.RGBA.
        
        Returns:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation.
        """
        ...
    
    @staticmethod
    def RGBToRGBSeparate(rgbInterlacedR: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, colorMode: MSPyDgnPlatform.ImageColorMode) -> tuple:
        """
        @description Converts the specified image from RBG interlaced to RGB
        separated format.
        
        Parameter ``rgbInterlacedR``:
        IN image in RGBRGBRGB or RGBARGBARGBA format
        
        Parameter ``imageSizeR``:
        IN size of the image.
        
        Parameter ``colorMode``:
        IN either ImageColorMode.RGB or ImageColorMode.RGBA.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation. @Remarks If the input image is RGBA, the
        alph channel is discarded.
        
        tuple[1] bytearray:
        bytearray object to receive the RRRGGGBBB format image data
        """
        ...
    
    @staticmethod
    def RGBToRGBSeparateInPlace(rgb: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, colorMode: MSPyDgnPlatform.ImageColorMode) -> int:
        """
        @description Converts the specified image from RBG interlaced to RGB
        separated format.
        
        Parameter ``rgb``:
        IN OUT image in RGBRGBRGB or RGBARGBARGBA format
        
        Parameter ``imageSizeR``:
        IN size of the image.
        
        Parameter ``colorMode``:
        IN either ImageColorMode.RGB or ImageColorMode.RGBA.
        
        Returns:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation. @Remarks If the input image is RGBA, the
        alph channel is discarded..
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @staticmethod
    def applyGamma(rgb: bytearray, sizeR: MSPyBentleyGeom.Point2d, gamma: float) -> None:
        """
        @description Applies gamma correction to the input RGB buffer and
        places the result in the output RGB buffer.
        
        Parameter ``rgb``:
        IN Out image buffer (may be the same as rgbInP).
        
        Parameter ``sizeR``:
        IN image size in X and Y pixels.
        
        Parameter ``gamma``:
        IN gamma value to be applied to image (1.0 means no correction).
        """
        ...
    
    @staticmethod
    def extCreateFileFromRGB(name: str, type: MSPyDgnPlatform.ImageFileFormat, colorMode: MSPyDgnPlatform.ImageColorMode, sizeR: MSPyBentleyGeom.Point2d, imageBufferR: bytearray, compressType: MSPyDgnPlatform.CompressionType, compressRatio: MSPyDgnPlatform.CompressionRatio, transparency: Optional[bytearray]) -> int:
        """
        @description Creates the image file specified by fileName, fileType
        and colorMode from an RGB image, allowing compression type and
        transparency to be set.
        
        Parameter ``name``:
        IN name of file.
        
        Parameter ``type``:
        IN type of file .
        
        Parameter ``colorMode``:
        IN color mode .
        
        Parameter ``sizeR``:
        IN pointer to size of image in X and Y pixels.
        
        Parameter ``imageBufferR``:
        IN address of the image buffer with red, green and blue rows
        stored separately for each scan line. The size of imageBuffer
        should be (3 * sizeR.x * sizeR.y).
        
        Parameter ``compressType``:
        IN the type of compression to use in creating the file
        
        Parameter ``compressRatio``:
        IN the ratio of compression to use in creating the file
        
        Parameter ``transparencyR``:
        IN the index of the transparency value, or the RGB tripple to use
        for the transparency value.
        
        Returns:
        SUCCESS if the file is created successfully.
        <br>eMDLERR_BADFILETYPE: if filetype is not supported.
        <br>eMDLERR_CANNOTOPENFILE: if the file cannot be created.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation.
        """
        ...
    
    @staticmethod
    def extractSubImage(outSizeR: MSPyBentleyGeom.Point2d, inR: bytearray, inSizeR: MSPyBentleyGeom.Point2d, rectR: MSPyDgnPlatform.BSIRect, imageFormat: int) -> tuple:
        """
        @description Extracts a subimage from a larger image and stretches or
        decimates it to fit a user-defined output image size.
        
        Parameter ``outSizeR``:
        IN output image size in X and Y pixels.
        
        Parameter ``inR``:
        IN source image buffer.
        
        Parameter ``inSizeR``:
        IN size of the source image in X and Y pixels.
        
        Parameter ``rectR``:
        IN rectangular subimage in X and Y pixels. The rectangle defined
        by rectR should be a subset of the rectangle with origin at (0,0)
        and corner at (inSizeR.x - 1, inSizeR.y - 1). If rectR is None,
        the subimage rectangle is the entire image.
        
        Parameter ``imageFormat``:
        IN IMAGEFORMAT type .
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the operation is completed successfully.
        
        tuple[1] bytearray:
        bytearray object to receive the subimage
        """
        ...
    
    @staticmethod
    def fileType(fileType: MSPyDgnPlatform.ImageFileFormat, fileNameP: str) -> MSPyDgnPlatform.ImageFileFormat:
        """
        @description Determines the format of the specified image file. @Param
        fileType IN set to eIMAGEFILE_UNKNOWN to find the type of the file, or
        set to a specific file type to verify that the file is of that type.
        
        Parameter ``fileNameP``:
        IN the name of the file to verify or determine type
        
        Returns:
        eIMAGEFILE_UNKNOWN if the file is not found or is invalid,
        otherwise file type of file
        """
        ...
    
    @staticmethod
    def getExportFormatString(formatId: MSPyDgnPlatform.ImageFileFormat) -> tuple:
        """
        @description Get the corresponding string for a given ImageFileFormat
        
        Parameter ``formatId``:
        IN ImageFileFormat to acquire the name.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the string is found. .
        
        tuple[1] str:
        Name of Export format.
        """
        ...
    
    @staticmethod
    def getExportSupport(type: MSPyDgnPlatform.ImageFileFormat) -> tuple:
        """
        @description For a specified image format, returns the default color
        mode, and whether each of the various color modes is supported for
        export.
        
        Parameter ``imageType``:
        IN image type .
        
        Returns:
        A tuple object containing 7 elements:
        
        tuple[0] int:
        eSUCCESS if the file type is
        supported; eMDLERR_BADARG if it is not.
        
        tuple[1] ImageColorMode.
        default color mode.
        
        tuple[2] bool:
        support for 24 bit RGB.
        
        tuple[3] bool:
        support for 256 color palette.
        
        tuple[4] bool:
        support for 16 color palette.
        
        tuple[5] bool:
        support for grey scale.
        
        tuple[6] bool:
        support for monochrome.
        """
        ...
    
    @staticmethod
    def getExtension(type: MSPyDgnPlatform.ImageFileFormat) -> tuple:
        """
        @description Returns the default three character file extension for
        the specified image format.
        
        Parameter ``type``:
        IN image type .
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the file type is
        found; eMDLERR_BADARG if it is not.
        
        tuple[1] str:
        default file extension (MAXEXTENSIONLENGTH characters).
        """
        ...
    
    @staticmethod
    def getImportFormatString(formatId: MSPyDgnPlatform.ImageFileFormat) -> tuple:
        """
        @description Get the corresponding string for a given ImageFileFormat
        
        Parameter ``formatId``:
        IN ImageFileFormat to acquire the name. @Return BSISUCCESS if the
        string is found.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the string is found. .
        
        tuple[1] str:
        Name of Import format.
        """
        ...
    
    @staticmethod
    def memorySize(sizeP: MSPyBentleyGeom.Point2d, imageFormat: int) -> int:
        """
        @description Returns the amount of memory initially required to hold
        the image in the specified image format. If the image is uncompressed,
        this is the total size. If it is compressed, this is the amount
        necessary to hold an array of pointers to each image row. Memory for
        each row will be allocated in subsequent operations once the size of
        the compressed row is determined.
        
        Parameter ``sizeP``:
        IN the size of the image in X and Y pixels.
        
        Parameter ``imageFormat``:
        IN any of the IMAGEFORMAT types.
        
        Returns:
        if successful, the positive number of bytes required to hold the
        input image. <br>eMDLERR_BADARG if an invalid image format is
        detected.
        """
        ...
    
    @staticmethod
    def mirror(rgb: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, imageFormat: int, vertical: bool) -> int:
        """
        @description Mirrors an image by reversing the pixels, either
        horizontally or vertically.
        
        Parameter ``rgb``:
        IN OUT the image buffer. The original buffer is
        overwritten during the mirror operation.
        
        Parameter ``imageSizeR``:
        IN size of the image buffer in X and Y pixels.
        
        Parameter ``imageFormat``:
        IN one of the IMAGEFORMAT types.
        
        Parameter ``vertical``:
        IN if true, the image is mirrored vertically; if false, the image
        is mirrored horizontally.
        
        Returns:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation.
        """
        ...
    
    @staticmethod
    def negate(rgb: bytearray, sizeR: MSPyBentleyGeom.Point2d) -> None:
        """
        @description Returns an RGB image that is the negated version of the
        input RGB image.
        
        Parameter ``rgb``:
        IN Out image buffer.
        
        Parameter ``sizeR``:
        IN image size in X and Y pixels.
        """
        ...
    
    @staticmethod
    def readFileInfo(fileName: str, fileType: MSPyDgnPlatform.ImageFileFormat) -> tuple:
        """
        @description Returns information about the image file specified by
        fileName and fileType.
        
        Parameter ``fileName``:
        IN file name to examine.
        
        Parameter ``fileType``:
        IN type of the file, or -1 to use the file name
        extension to determine the disk format.
        
        Returns:
        A tuple object containing 4 elements:
        
        tuple[0] int:
        SUCCESS if the information is successfully extracted from the
        image file. <br>MDLERR_BADFILETYPE if filetype is not supported
        for import. <br>MDLERR_CANNOTOPENFILE if the file cannot be
        opened.
        
        tuple[1] Point2d:
        size of the image in X and Y pixels. If the pointer is NULL,
        this value is not returned.
        
        tuple[2] ImageColorMode:
        color mode of the image. If the pointer is
        NULL, this value is not returned.
        
        tuple[3] int:
        orientation of the image. If the pointer is
        NULL, this value is not returned.
        """
        ...
    
    @staticmethod
    def readFileToRGB(fileName: str, fileType: MSPyDgnPlatform.ImageFileFormat, requestedSize: Optional[MSPyBentleyGeom.Point2d]) -> tuple:
        """
        @description Reads the image file specified by filename and fileType
        and returns an RGB image. The image file can be either mapped or
        unmapped. If NULL is specified for requestedSize, outputSize in returned tuple
        is set to the size of the file image,otherwise outputSize is set to requestedSize.
        
        Parameter ``fileName``:
        IN image file name.
        
        Parameter ``fileType``:
        IN type of file , or -1 to use the file name
        extension to determine the disk format.
        
        Parameter ``requestedSize``:
        IN target size for the image, or NULL for unmodified size.
        
        Remark:
        s The process of resizing the image uses pixel averaging and can
        substantially increase the time required to read the image. The
        resizing algorithm produces excellent results, producing expanded
        or compressed images of significantly higher quality than those
        produced using simple pixel replication or decimation.
        
        Returns:
        A tuple object containing 3 elements:
        
        tuple[0] int:
        SUCCESS if the file is read successfully. <br>MDLERR_BADFILETYPE:
        if filetype is not supported. <br>MDLERR_CANNOTOPENFILE: if the
        file cannot be created. <br>MDLERR_INSFMEMORY if there is not
        enough memory available to perform the operation.
        
        tuple[1] bytearray:
        bytearray object to receive the RGB pixels.
        
        tuple[2] Point2d:
        size of the image in X and Y pixels.
        """
        ...
    
    @staticmethod
    def resize(outputsize: MSPyBentleyGeom.Point2d, inputImageR: bytearray, inputsize: MSPyBentleyGeom.Point2d) -> tuple:
        """
        @description Compresses or expands the RGB buffer specified by
        inputImageR and inputsize to the size specified by outputsize. The
        process of resizing the image uses pixel averaging and can require
        substantial processing time. The resizing algorithm produces expanded
        or compressed images of significantly higher quality than those
        produced using simple pixel replication or decimation techniques.
        
        Parameter ``outputsize``:
        IN output size
        
        Parameter ``inputImageR``:
        IN input image (RGB)
        
        Parameter ``inputsize``:
        IN input size
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS if the image is resized successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation.
        
        tuple[1] bytearray:
        resized output image (RGB)
        """
        ...
    
    @staticmethod
    def rotate(inpBufferR: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, imageFormat: int, rotation: int) -> tuple:
        """
        @description Rotates the image about the origin in a counter clockwise
        direction by a specified number of degrees.
        
        Parameter ``inpBufferR``:
        IN input image buffer.
        
        Parameter ``imageSizeR``:
        IN size of the input image buffer in X and Y pixels.
        
        Parameter ``imageFormat``:
        IN one the IMAGEFORMAT types.
        
        Parameter ``rotation``:
        IN 90, 180 or 270 degrees.
        
        Remark:
        s Currently, only 90, 180 and 270 degree rotations are supported.
        
        Returns:
        A tuple object containing 3 elements:
        
        tuple[0] int:
        eSUCCESS if the operation is completed successfully.
        <br>eMDLERR_INSFMEMORY if there is not enough memory available to
        perform the operation. <br>eMDLERR_BADARG if an invalid image
        format is detected.
        
        tuple[1] bytearray:
        bytearray object to receive the image.
        
        tuple[2] Point2d:
        Size of the output image in X and Y pixels.
        """
        ...
    
    @staticmethod
    def saveView(fileNameP: str, imageSizeR: MSPyBentleyGeom.Point2d, renderMode: int, imageFormat: MSPyDgnPlatform.ImageFileFormat, stereo: bool, antialias: bool, view: int) -> int:
        """
        @Description Renders an RGB image of a view to disk.
        
        Parameter ``fileNameP``:
        IN name of image file to create.
        
        Parameter ``imageSizeR``:
        IN size of image to render (in X and Y pixels).
        
        Parameter ``renderMode``:
        IN the rendering mode (SMOOTH, MSRenderMode.Phong, CONSTANT, etc.).
        
        Parameter ``imageFormat``:
        IN image format of output file.
        
        Parameter ``stereo``:
        IN if non-zero, the view is rendered in stereo mode.
        
        Parameter ``antiAlias``:
        IN if non-zero, the view is antialiased.
        
        Parameter ``view``:
        IN number of view to save.
        
        Returns:
        eSUCCESS: if the view is rendered successfully. <br>eMDLERR_BADVIEWNUMBER:
        if the view number is invalid. <br>eMDLERR_INSFMEMORY: if a memory error occurs.
        <br>eMDLERR_CANNOTOPENFILE: if the file cannot be created
        """
        ...
    
    @staticmethod
    def saveViewToRGB(imageSizeR: MSPyBentleyGeom.Point2d, renderMode: int, stereo: bool, antialias: bool, view: int) -> tuple:
        """
        @Description Renders the specified view and stores the image in the
        RGB buffer.
        
        Parameter ``imageSizeR``:
        IN size of image to render (in X and Y pixels).
        
        Parameter ``renderMode``:
        IN the rendering mode (SMOOTH, MSRenderMode.Phong, CONSTANT, etc.).
        
        Parameter ``stereo``:
        IN if non-zero, the view is rendered in stereo mode.
        
        Parameter ``antiAlias``:
        IN if non-zero, the view is antialiased.
        
        Parameter ``view``:
        IN number of view to save.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS: if the view is rendered successfully. <br>eMDLERR_BADVIEWNUMBER:
        if the view number is invalid. <br>eMDLERR_INSFMEMORY: if a memory error occurs.
        <br>eMDLERR_CANNOTOPENFILE: if the file cannot be created.
        
        tuple[1] bytearray:
        bytearray object to receive the RGB image data
        """
        ...
    
    @staticmethod
    def saveViewToRGBA(imageSizeR: MSPyBentleyGeom.Point2d, renderMode: int, stereo: bool, antialias: bool, view: int) -> tuple:
        """
        @Description Renders the specified view and stores the image in the
        RGB buffer.
        
        Parameter ``imageSizeR``:
        IN size of image to render (in X and Y pixels).
        
        Parameter ``renderMode``:
        IN the rendering mode (SMOOTH, MSRenderMode.Phong, CONSTANT, etc.).
        
        Parameter ``stereo``:
        IN if non-zero, the view is rendered in stereo mode.
        
        Parameter ``antiAlias``:
        IN if non-zero, the view is antialiased.
        
        Parameter ``view``:
        IN number of view to save.
        
        Returns:
        A tuple object containing 2 elements:
        
        tuple[0] int:
        eSUCCESS: if the view is rendered successfully. <br>eMDLERR_BADVIEWNUMBER:
        if the view number is invalid. <br>eMDLERR_INSFMEMORY: if a memory error occurs.
        <br>eMDLERR_CANNOTOPENFILE: if the file cannot be created.
        
        tuple[1] bytearray:
        bytearray object to receive the RGBA image data.
        """
        ...
    
    @staticmethod
    def tintImage(imageR: bytearray, imageSizeR: MSPyBentleyGeom.Point2d, tintRGBP: MSPyDgnPlatform.RgbColorDef) -> None:
        """
        @description Tints an RGB image in format eIMAGEFORMAT_RGBSeparate by
        adjusting values as defined below.
        
        Parameter ``imageR``:
        OUT an image buffer in format IMAGEFORMAT_RGBSeparate.
        
        Parameter ``imageSizeR``:
        IN size of the image in X and Y pixels.
        
        Parameter ``tintRGBP``:
        IN RGB value that will be used to tint the image.
        
        Remark:
        s The image pixels are adjusted as follows:
        
        ```
        imageP = (tintRGBP->red * (UInt)*imageP) / 255u;
        imageP += imageSizeP->x;
        imageP = (tintRGBP->green * (UInt)*imageP) / 255u;
        imageP += imageSizeP->x;
        imageP = (tintRGBP->blue * (UInt)*imageP) / 255u;
        ```
        """
        ...
    
    @staticmethod
    def typeFromExtension(fileName: str) -> MSPyDgnPlatform.ImageFileFormat:
        """
        @description Returns the file type of the specified image file.
        
        Parameter ``fileName``:
        IN image file name
        
        Returns:
        the image file type from the filename extension . If the extension does not have a match,
        eIMAGEFILE_UNKNOWN is returned.
        """
        ...
    
    @staticmethod
    def typeFromFile(fileNameP: str) -> MSPyDgnPlatform.ImageFileFormat:
        """
        @description Attempts to determine the type of file from header
        information within the file itself. If it can successfully validate
        the file type, it returns one of the supported IMAGEFILE formats.
        
        Remark:
        s Currently, this function recognizes the following types of
        files: FLI, GIF, PNG, JPEG, IMG, IMG (24-bit), all Intergraph
        files and TIFF files. These files have magic number and special
        check bytes that easily identify the type of image file.
        
        Remark:
        s The MstnImage.typeFromFile function is the preferred way to
        determine the format of a source (import) image file. It should be
        checked before calling MstnImage.typeFromExtension, since image
        types returned by this function are more likely to be correct.
        
        Parameter ``fileNameP``:
        IN full path name of the image file.
        
        Returns:
        an IMAGEFILE type. <br>IMAGEFILE_UNKNOWN if no
        valid image format can be determined.
        """
        ...
    
class MstnPlot:
    """
    None
    """

    @staticmethod
    def GetDefaultPdfPltcfg(pltcfgFspec: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Returns the name of the default PDF printer driver configuration file.
        The print dialog user preferences are used in conjunction with
        configuration variables to determine the default file.
        
        Parameter ``pltcfgFspec``:
        Default PDF printer driver configuration file.
        
        Returns:
        True if success.
        """
        ...
    
    @staticmethod
    def GetDefaultPltcfg(pltcfgFspec: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Returns the name of the default printer driver configuration file. The
        print dialog user preferences are used in conjunction with
        configuration variables to determine the default file.
        
        Parameter ``pltcfgFspec``:
        Default printer driver configuration file.
        
        Returns:
        True if success.
        """
        ...
    
    @staticmethod
    def GetDefaultSysPltcfg(pltcfgFspec: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Returns the name of the default system printer driver configuration
        file. The print dialog user preferences are used in conjunction with
        configuration variables to determine the default file.
        
        Parameter ``pltcfgFspec``:
        Default system printer driver configuration file.
        
        Returns:
        True if success.
        """
        ...
    
    @staticmethod
    def GetErrno() -> MSPyMstnPlatform.PlotError:
        """
        Gets the current global plot error number.
        """
        ...
    
    @staticmethod
    def GetPaperSizeListFromPrinter(paperSizeList: MSPyMstnPlatform.PlotPaperSizeInfoArray, printerName: str, orientation: MSPyMstnPlatform.PlotOrientation, units: MSPyMstnPlatform.PlotUnits) -> int:
        """
        Returns a list of paper sizes defined for the specified printer.
        
        Parameter ``paperSizeList``:
        Paper size list.
        
        Parameter ``printerName``:
        Either a .pltcfg file name or a Windows printer name.
        
        Parameter ``orientation``:
        Desired orientation for paper sizes.
        
        Parameter ``units``:
        Desired paper size units.
        
        Returns:
        SUCCESS or ERROR
        """
        ...
    
    @staticmethod
    def GetPrintStyleNames(printStyleNames: MSPyMstnPlatform.PrintStyleNameArray, fromActiveDgnFile: bool, fromDgnLibraries: bool) -> None:
        """
        Returns a list of print style names available in the current session.
        
        Parameter ``printStyleNames``:
        List of print style names.
        
        Parameter ``fromActiveDgnFile``:
        True to include print styles from the active DGN.
        
        Parameter ``fromDgnLibraries``:
        True to include print styles from dgnlibs.
        """
        ...
    
    @staticmethod
    def SetErrno(value: MSPyMstnPlatform.PlotError) -> None:
        """
        Sets the current global plot error number.
        
        Parameter ``value``:
        New error code.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class MstnView:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @staticmethod
    def attachNamed(inName: str, inNameSpace: str, viewNumber: int) -> int:
        """
        @Description Search for a named view by its name and, if found, attach
        the view to the indicated view. @Param[in] inName the name of the
        named view element to be searched for. @Param[in] inNameSpace the name
        space of the named view element to be searched for, using NULL will
        cause the search to go against the user managed named views. Using a
        value other than NULL allows applications to attach named views not
        available to the user via the saved views application. @Param[in]
        viewNumber the view number to which the found view will be attached.
        @Return SUCCESS if the named view is found and attached,
        MDLERR_OPERVIOLATESCONSTRAINTS if the view is found but incompletely
        attached, otherwise ERROR.
        
        See also:
        MstnView.setUpApplyOpts MstnView.attachNamedWithOptions
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def attachNamedWithOptions(inName: str, inNameSpace: str, viewNumber: int, applyOpts: MSPyDgnPlatform.ApplyViewOptions) -> int:
        """
        @Description Search for a named view by its name and, if found, attach
        the view to the indicated view using the given options. @Param[in]
        inName the name of the named view element to be searched for.
        @Param[in] inNameSpace the name space of the named view element to be
        searched for, using NULL will cause the search to go against the user
        managed named views. Using a value other than NULL allows applications
        to attach named views not available to the user via the saved views
        application. @Param[in] viewNumber the view number to which the found
        view will be attached. @Param[in] applyOptsP NULL for default or the
        options to use for the attach process. @Return SUCCESS if the named
        view is found and attached, MDLERR_OPERVIOLATESCONSTRAINTS if the view
        is found but incompletely attached, otherwise ERROR.
        
        See also:
        MstnView.setUpApplyOpts MstnView.attachNamed
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def cameraLensAngleFromLength(focalLength: float) -> float:
        """
        @Description Get the angle of the field of vision in degrees for a
        camera lens of the specified focal length in millimeters. @Param[in]
        focalLength length (mm) @Return the field of vision angle in degrees
        
        See also:
        MstnView.setCameraParameters
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def cameraLensLengthFromAngle(angle: float) -> float:
        """
        @Description Get the length in millimeters of a camera lens that
        corresponds to the specified field of vision angle in degrees. This
        length is useful to users who relate to lens lengths rather than
        angles. @Param[in] angle angle (degrees) @Return the camera lens focal
        length in millimeters that yields the specified field of vision in
        degrees
        
        See also:
        MstnView.setCameraParameters
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def changeLevelDisplayMask(modelRef: MSPyDgnPlatform.DgnModelRef, iViewNum: int, levelMask: MSPyDgnPlatform.BitMask, operation: MSPyMstnPlatform.LevelMaskOperation, doUpdate: bool) -> int:
        """
        @Description Change the level display for specified model and view.
        The levels that are to be turned On, Off, or Toggled are specified in
        the form of a bit-mask. @Param[in] modelRef model @Param[in] iViewNum
        view number. @Param[in] levelMask bit-mask of levels whose display
        mode is to be changed as per operation. @Param[in] operation indicates
        whether levels specifed in levelMask are to be turned on, off, or
        toggled. @Param[in] doUpdate If ON, then redraw the view. @Return
        SUCCESS
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplayMask
        MstnView.getLevelDisplay MstnView.setLevelDisplay
        MstnView.setLevelDisplayMaskMulti
        MstnView.changeLevelDisplayMaskMulti
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def changeLevelDisplayMaskMulti(modelRef: MSPyDgnPlatform.DgnModelRef, viewList: MSPyBentleyGeom.BoolArray, levelMask: MSPyDgnPlatform.BitMask, operation: MSPyMstnPlatform.LevelMaskOperation, doUpdate: bool) -> int:
        """
        @Description Change the display flag. This functions similar to
        mdlView_changeLevelDisplayMask, except that it applies the operation
        to the levels of the list of specified views.
        
        @Param[in] modelRef model @Param[in] viewList is an array of
        MSPyDgnPlatform.MAX_VIEWS bool each representing a view. A non-zero value
        indicates that view is to be updated from the BitMask given by
        "pLevelMask". @Param[in] levelMask bit-mask of levels whose display
        mode is to be changed as per operation @Param[in] operation indicates
        whether levels specifed in levelMask are to be turned on, off, or
        toggled. @Param[in] doUpdate if ON, then redraw the view. @Return
        SUCCESS
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplayMask
        MstnView.getLevelDisplay MstnView.setLevelDisplay
        MstnView.changeLevelDisplay MstnView.setLevelDisplayMaskMulti
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def computeCameraRotMatrix(viewZ: MSPyBentleyGeom.DPoint3d, upVector: MSPyBentleyGeom.DPoint3d) -> tuple:
        """
        @Description Compute the rotation matrix of the camera for the view.
        @Param[out] rotMatrix the computed rotation matrix @Param[in] viewZ
        the Z axis of the view @Param[in] upVector the up vector for the
        camera @Return SUCCESS if the rotation matrix was calculated
        successfully.
        
        See also:
        MstnView.setCameraParameters Bentley Systems +---------------+-----
        ----------+---------------+---------------+---------------+------
        """
        ...
    
    @staticmethod
    def copyCamera(index: int) -> tuple:
        """
        @Description Retrieve a copy of the current camera information from
        the specified view. @Param[out] cameraInfo the copied camera
        information. @Param[in] index the view number from which the camera
        information is copied. @Return SUCCESS if the camera information is
        copied successfully, or MDLERR_BADVIEWNUMBER if the index number is
        not a valid view number.
        
        See also:
        MstnView.copyViewInfo
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def defaultCursor() -> None:
        """
        @Description Cancel any special cursor behavior for MicroStation views
        and return to the default crosshair cursor.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def deleteNamed(inName: str, inNameSpace: str) -> int:
        """
        @Description Find a named view element with the specified name and, if
        found, delete it. @Param[in] inName the name of the view element to be
        deleted. @Param[in] inNameSpace the name space of the named view
        element to be searched for, using NULL will cause the search to go
        against the user managed named views. Using a value other than NULL
        allows applications to delete named views not available to the user
        via the saved views application. @Return SUCCESS if the element is
        found and deleted, otherwise ERROR.
        
        See also:
        MstnView.findNamed
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def findNamed(viewName: str, viewNameSpace: str) -> tuple:
        """
        @Description Search for a named view of the specified name and, if
        found, retrieve the view and viewport information from the view
        element. @Param[out] viewInfoP the view information returned in a
        MSPyDgnPlatform.ViewInfo structure. If this information is not needed,
        pass NULL to the function in this argument. @Param[out] viewPortInfoP
        the view port information returned in a MSPyDgnPlatform.ViewPortInfo
        structure. @Param[in] viewName the name of the view to search for in
        the master design file. @Param[in] viewNameSpace saved view name
        space, NULL means public, user managed save views. @Return SUCCESS if
        the element is found and the information is retrieved successfully,
        otherwise ERROR.
        
        See also:
        MstnView.locate MstnView.load
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def fit(viewNumber: int, modelRefList: MSPyDgnPlatform.DgnModelRefList) -> int:
        """
        @Description Scan the list of models indicated by modelRefList to set
        the display extents of view viewNumber to fit all found elements.
        @Param[in] viewNumber designates which view to fit (starting with 0
        for the view labeled View 1). @Param[in] modelRefList contains the
        list of models to include in the view. @Remarks After calling
        mdlView_fit, you must update the view to see the changed view extents
        using MstnView.updateSingle. @Return SUCCESS if the view extents were
        modified, MDLERR_BADVIEWNUMBER if viewNumber is invalid, and ERROR if
        no elements were found and the view extents were not modified.
        
        See also:
        MstnView.updateSingle
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def fitEx(viewNumber: int, modelRefList: MSPyDgnPlatform.DgnModelRefList, doRasterRefFit: bool, options: MSPyMstnPlatform.fitViewOptions) -> int:
        """
        @Description Extended version of MstnView.fit. @Param[in] viewNumber
        designates which view to fit (starting with 0 for the view labeled
        View 1). @Param[in] modelRefList contains the list of models to
        include in the view. @Param[in] doRasterRefFit if true, include raster
        references in fit calculations. @Param[in] options the FitViewOptions
        to apply to the view @Remarks After calling MstnView.fitEx, you must
        update the view to see the changed view extents using
        mdlView_updateSingle. @Return SUCCESS if the view extents were
        modified, MDLERR_BADVIEWNUMBER if viewNumber is invalid, and ERROR if
        no elements were found and the view extents were not modified.
        
        See also:
        MstnView.updateSingle
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def fitToFence(fencePts: MSPyBentleyGeom.DPoint2d, viewIndex: int, numPoints: int) -> int:
        """
        @Description Fit the contents of the current fence in the specified
        view. @Param[in] fencePtsP the array of points that are vertices of
        the fence @Param[in] viewIndex the view in which the fence contents
        are fit @Param[in] numPoints the number of points in the fence @Return
        SUCCESS if the operation is completed successfully
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def fitViewToRange(min: MSPyBentleyGeom.DPoint3d, max: MSPyBentleyGeom.DPoint3d, options: MSPyMstnPlatform.fitViewOptions, viewIndex: int) -> int:
        """
        @Description Fit the contents of the specified range in the given
        view. @Param[in] minP the minimum X Y and Z values of the range
        @Param[in] maxP the maximum X Y and Z values of the range @Param[in]
        optionsP the FitViewOptions to apply to the view when it is redrawn
        @Param[in] viewIndex the index of the view to fit the specified range
        block in
        
        Range points need to be in the view coordinate system, see
        mdlRMatrix_multiplyRange.
        
        
        Unlike many other view functions, this function expects points
        in design file coordinates, so apply the currtrans via
        mdlCurrTrans_transformPointArray. @Return SUCCESS if the view is
        redrawn without error.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getCamera(view: int) -> tuple:
        """
        @Description Get the camera settings for a view. <p>All settings other
        than viewNumber are returned in the current coordinate system. If any
        settings are NULL, MicroStation does not fill them in. @Param[out]
        position a Dpoint3d to receive the camera position. @Param[out] target
        a Dpoint3d to receive the camera target. @Param[out] angle a double to
        contain the camera field of vision angle in degrees. @Param[out]
        focalLength alternative way to express the camera angle in parameters
        that correspond to the standard 35 millimeter camera. focalLength
        points to a double to contain the focal length in millimeters.
        @Param[out] lensNumber an integer specifying standard 35 mm lense
        @Param[in] view index of view @Remarks MicroStation allows 3D design
        files to be viewed using either a parallel (orthographic) or
        perspective projection. The perspective projection mimics a physical
        camera in which light rays pass through a lens, converge at a focal
        point and focus on an image plane. The distance from the camera to the
        image plane is referred to as the focal length. @Remarks In
        orthographic (non-camera) views, the view is specified by a
        transformation matrix to the view coordinate system and a rectangular
        clipping volume. In camera views, the view volume is a pyramid with
        the apex at the camera and the cross section increasing with distance
        from the camera. In specifying a camera view, it is more convenient to
        think in terms of the camera location, orientation, focal length and
        fore and aft clipping planes. Camera views are derived from the view
        settings, the camera position, and the camera focal length in the
        following manner: The view transformation matrix specifies the camera
        orientation; the virtual camera points along the negative view Z-axis;
        the camera X and Y axis coincide with view axes. The front and back
        clipping planes are identical to the clipping planes for an
        orthographic view, and the camera image plane is parallel to the view
        and is offset from the camera position by the focal length. The
        portion of the image displayed is determined by the intersection of
        the orthographic view volume with the camera image plane. @Remarks
        Several important aspects of MicroStation's camera views should be
        noted: <p> Obviously, it is not possible to display items that are
        behind the camera,and items that are very close to the camera also
        cause problems as they end up being magnified excessively.
        MicroStation therefore truncates views at a fixed fraction of the
        focal length (approximately 1/50), effectively ignoring the tip of the
        viewing pyramid. @Remarks Unlike most conventional cameras, the camera
        location is not necessarily centered in the view. This makes it
        possible to set the camera position and then "pan" within the image.
        MicroStation's window, pan and zoom commands do not alter the camera
        settings, instead altering only the view settings to control the
        portion of the image plane being displayed. This is analogous to
        taking a picture and then panning, zooming or windowing within the
        photograph. This makes it possible to simulate the output of a bellows
        camera by selecting a camera position that produces the desired
        perspective and then windowing to the desired portion of the image
        plane. @Remarks If the camera position has never been set, the camera
        information is invalidated by initializing the focal length to -1. If
        a negative focal length is encountered when a camera view is updated,
        a camera position centered in the view with the image plane centered
        between the front and back clipping planes is calculated
        automatically. When the FIT command is executed, the current camera
        position is invalidated by negating the focal length and the update
        automatically re-centers the camera. @Remarks The camera viewing
        volume does not coincide with orthographic viewing volume. The viewing
        area coincides at the image plane only, with the camera viewing area
        smaller than the orthographic view area at depths in front of the
        image plane and larger at depths beyond the image plane. @Remarks The
        camera lens angle is stored for each view, but is not necessary for
        the camera specification and is never used during an update. The angle
        is used for automatically calculating the focal length from the view
        extents when a camera view is first updated or the SET CAMERA command
        is executed. @Return SUCCESS if the requested information is valid,
        MDLERR_BADVIEWNUMBER if viewNumber is invalid, and
        MDLERR_VIEWNOTDISPLAYED if the view is not displayed.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getCameraParameters(view: int) -> tuple:
        """
        @Description Get the camera parameters for a view. If any of the
        parameters are not required, NULL may be specified for the parameter
        pointer. @Param[out] positionP the camera position. @Param[out]
        targetP the target position. @Param[out] upVectorP is always
        perpendicular to the camera axis. @Param[out] angleP camera field of
        view angle (in radians). @Param[out] screenWindowP portion of the
        image plane that is displayed. @Param[out] frontClipDist distance from
        the camera to the front of the clipping plane @Param[out] backClipDist
        distance from the camera to the back of the clipping plane @Param[in]
        view view number @Return SUCCESS if the view is successfully defined.
        
        
        s The camera direction is always from positionP towards targetP,
        which coincides with the negative Z-Axis for the view.
        MicroStation's image plane is always coincident with the camera
        target. Therefore, the target appears the same size in a camera
        (perspective) or non-camera (orthographic) view.
        
        
        s The view rotation about the camera axis is determined by
        upVectorP. This is a normalized direction vector that defines the
        y-axis for the view.
        
        
        s The camera angle can be derived from the maximum of the view
        width and height and the distance from the camera to the target in
        the following manner: cameraAngle = 2 *
        arctan(maxDimension/(2*targetDistance));
        
        
        s The screen window coordinates are defined in an image plane
        coordinate system with an origin at the camera target. For a
        centered view, the screen window coordinates will be (-width/2,
        -height/2) (width/2, height/2). This corresponds the design of
        most modern cameras as the viewing direction is perpendicular to
        the camera plane. In an uncentered window, the image plane is
        tilted in relation to the viewing direction. This corresponds to a
        view, or bellows camera.
        
        See also:
        MstnView.setCameraParameters
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getClipBoundaryElement(viewIndex: int) -> tuple:
        """
        @Description Get the view's clip volume. @Param[out] pElementId the
        element ID of the clip volume @Param[in] viewIndex the index of the
        view @Return SUCCESS if the view had a clip volume set
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getClipMaskElement(viewIndex: int) -> tuple:
        """
        @Description Get the view's clip volume. @Param[out] pElementId the
        element ID of the clip mask @Param[in] viewIndex the index of the view
        @Return SUCCESS if the view had a clip volume set
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getDefaultFlags(viewFlags: MSPyDgnPlatform.ViewFlags) -> None:
        """
        @Description Set the flags in the given MSPyDgnPlatform.ViewFlags
        structure to their default setting. @Param[out] viewFlagsP a
        MSPyDgnPlatform.ViewFlags structure in which the flags will be set to
        their default setting.
        
        See also:
        MstnView.getFlags MstnView.setFlags
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getDisplayControl(paramNum: int, viewNum: int) -> int:
        """
        @Description Get view display control attributes. @Param[in] paramNum
        specifies the view attribute is get. Any of the VIEWCONTROL_ values in
        mdl.h @Param[in] viewNum specifies the view. @Return The value of the
        parameter specified by paramNum or false if paramNum or viewNum are
        invalid. Use MstnView.isValidIndex to test the view index. Valid
        paramNum values are in the range [0..MAX_VIEWCONTROL].
        
        See also:
        MstnView.setDisplayControl
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getFlags(viewIndex: int) -> tuple:
        """
        @Description Get the view settings flags for a view. @Param[out]
        viewFlags a copy of the MSPyDgnPlatform.ViewFlags structure for the
        indicated view. @Param[in] viewIndex the view number for which the
        flags information is retrieved. @Return SUCCESS if the information is
        retireved successfully, otherwise ERROR.
        
        See also:
        MstnView.setFlags
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getHomogeneousMaps(viewNumber: int) -> tuple:
        """
        @Description Retrieve various homogeneous maps for a MicroStation view
        transform. Any combination of the return parameters may be NULL.
        @Param[out] worldEye the eyepoint as a homogeneous point in world
        coordinates, i.e. 0 weight if flat view. @Param[out] viewEye the
        eyepoint as a homogeneous point in the view frame. @Param[out]
        worldToViewMap an invertible map from world coordinates to the local
        frame on the view plane. @Param[out] worldToNPCMap an invertible map
        from world coordinates to the 01 cube of the view. @Param[out]
        worldToFocalPlane a (singular) matrix which collapses geometry from
        world coordinates to the focal plane. @Param[out] viewToFocalPlane a
        (singular) matrix which collapses geometry in the viewplane coordinate
        frame onto the view plane. @Param[out] focalLength the focal length.
        Its value is 0 if the view is flat. @Param[out] nPCFocalPlaneDepth the
        depth of the focal plane within the NPC box. @Param[in] viewNumber
        view the information is retrieved from. @Return SUCCESS if the
        operation is completed successfully, otherwise ERROR.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getLevelDisplay(modelRef: MSPyDgnPlatform.DgnModelRef, iViewNum: int, iLevelId: int, levelDisplayType: MSPyDgnPlatform.ViewLevelDisplayType) -> tuple:
        """
        @Description Determine whether a level is displayed in a view.
        @Param[out] viewLevelDisplay true if the level display is on for the
        given level in the given view, otherwise false. @Param[in] modelRef
        the model containing the level. @Param[in] iViewNum the view number.
        @Param[in] iLevelId the id of the level in question. @Param[in]
        levelDisplayType one of VIEW_LEVEL_DISPLAY_TYPE_... (defined in
        msdefs.h) @Return SUCCESS if the operation completed successfully,
        otherwise ERROR.
        
        @Remarks Refer to MstnView.getLevelDisplayMask to get more details on
        "levelDisplayType".
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplayMask
        MstnView.setLevelDisplay MstnView.changeLevelDisplay
        MstnView.setLevelDisplayMaskMulti
        MstnView.changeLevelDisplayMaskMulti
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getLevelDisplayMask(modelRef: MSPyDgnPlatform.DgnModelRef, iViewNum: int, levelDisplayType: MSPyDgnPlatform.ViewLevelDisplayType) -> MSPyDgnPlatform.BitMask:
        """
        @Description Get the level-mask for a model and view number. The
        level-mask is returned in the form of a bit-mask. It represents if a
        level is ON/OFF in the specified view. @Param[in] modelRef model
        @Param[in] iViewNum view number @Param[in] levelDisplayType one of
        VIEW_LEVEL_DISPLAY_TYPE_... (defined in msdefs.h)
        
        Returns:
        The display mask as a BitMask. Returns NULL if pModelRef or view
        number is invalid. @Remarks The value of "levelDisplayType" can be
        one of ViewLevelDisplayType.Normal or
        ViewLevelDisplayType.Effective. ViewLevelDisplayType.Normal
        refers to the level-display associated with an individual view.
        This value can be either ON or OFF. If this value is OFF, then
        elements on the level will not be visible in the view. If this
        value is ON, then elements on the level may be visible in the
        view, depending on the state of the global-display and global-
        freeze flags for the level. Each level has a "global-display" and
        "global-freeze" flag. Refer to the documentation of level-
        attributes for more information on this. In summary, a level is
        visible in a view, if it is turned ON in the view, if its global-
        display flag is ON and its global-freeze flag is OFF. This
        effective state of a level is returned if "levelDisplayType" is
        set to ViewLevelDisplayType.Effective. @Remarks The bit-mask is 1
        based. For example to get the display flag for a level with the
        function mdlBitMask_testBit, your call should look like:
        mdlBitMask_testBit(pLevelDisplayBitMask, levelid -1) @Remarks Note
        the "const"ness of the returned bit-mask. It is important not to
        cast into a non-const bit-mask. This bit-mask should not be
        changed.
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplay
        MstnView.setLevelDisplay MstnView.changeLevelDisplay
        MstnView.setLevelDisplayMaskMulti
        MstnView.changeLevelDisplayMaskMulti
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getLevels(iViewNumIn: int) -> tuple:
        """
        @Description Get information about the levels that are on for the
        master design file for a view. @Param[out] v7LevelMask An array of
        short integers with one bit for each level and dimensioned to 4. The
        lowest bit of v7LevelMask[0] is set to 1 if level 1 is on in the given
        view and to 0 if level 1 is off. Similarly, bit 1 of v7LevelMask[0] is
        set to the state of level 2. The highest bit (15) of v7LevelMask[3]
        represents the state of the special level reserved for cell headers.
        This bit is always on. @Param[in] iViewNumIn view to get information
        from @Return SUCCESS if the level information for the specified view
        is successfully retrieved, MDLERR_BADVIEWNUMBER if viewNumber is
        invalid, and MDLERR_VIEWNOTDISPLAYED if the view is not currently
        displayed.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getMaxCount() -> int:
        """
        @Description Get the maximum number of views that can be opened by
        MicroStation. @Return Maximum number of allowable views.
        
        See also:
        MstnView.isValidIndex
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getParameters(view: int) -> tuple:
        """
        @Description Get the view settings for a view. <p>All settings other
        than viewNumber are returned in the current coordinate system. If any
        settings are NULL, MicroStation does not fill them in. @Param[out]
        origin a Dpoint3d to receive the view's origin. The view origin is the
        point on the back clipping plane's lower left corner. @Param[out]
        center a Dpoint3d to receive the view's center, which is the center of
        the volume contained by the front and back clipping planes.
        @Param[out] delta a Dpoint3d to receive the size of the view in the
        view's X, Y and Z directions. @Param[out] rMatrix a RotMatrix to
        receive the view's rotation matrix. @Param[out] activeZ a double to
        receive the active depth. Active depth is defined as the positive
        distance from the back clipping plane to the active depth plane.
        @Param[in] view view number of interest. @Return SUCCESS if the
        information requested is valid. MDLERR_BADVIEWNUMBER is returned if
        viewNumber is invalid (not in the range 0-7). MDLERR_VIEWNOTDISPLAYED
        if viewNumber is valid, but the view is not currently displayed.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getParametersWithExpandedDepth(view: int, expandDepth: bool) -> tuple:
        """
        @Description Identical to MstnView.getParameters, excep that it has an
        additional argument that will optionally expand the depth for a 3D
        view with front or back clipping turned off to encompass all of the
        geometry in the view. <p>All settings other than viewNumber are
        returned in the current coordinate system. If any settings are NULL,
        MicroStation does not fill them in. @Param[out] origin a Dpoint3d to
        receive the view's origin. The view origin is the point on the back
        clipping plane's lower left corner. @Param[out] center a Dpoint3d to
        receive the view's center, which is the center of the volume contained
        by the front and back clipping planes. @Param[out] delta a Dpoint3d to
        receive the size of the view in the view's X, Y and Z directions.
        @Param[out] rMatrix a RotMatrix to receive the view's rotation matrix.
        @Param[out] activeZ a double to receive the active depth. Active depth
        is defined as the positive distance from the back clipping plane to
        the active depth plane. @Param[in] view view number of interest.
        @Param[in] expandDepth if true and the the front and back clipping is
        disabled, then the origin and delta are expanded to include the
        geometry. @Return SUCCESS if the information requested is valid.
        MDLERR_BADVIEWNUMBER is returned if viewNumber is invalid (not in the
        range 0-7). MDLERR_VIEWNOTDISPLAYED if viewNumber is valid, but the
        view is not currently displayed.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getRootModel(viewIndex: int) -> MSPyDgnPlatform.DgnModelRef:
        """
        @Description Get the DgnModelRefP of the root model that is currently
        displayed in a specific view. @Param[in] viewIndex the view number for
        which the model number is returned. @Return the DgnModelRefP of the
        root model for this view. NULL if the view is invalid or not
        displayed.
        
        See also:
        MstnView.setModel
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getStandard(rMatrix: MSPyBentleyGeom.RotMatrix, stdViewNum: MSPyDgnPlatform.StandardView) -> None:
        """
        @Description Get one of the standard rotation matrices. @Param[out]
        rMatrixP rotation matrix for given view @Param[in] stdViewNum standard
        view number. Possible values are defined in msdefs.h. For example,
        StandardView.Top, StandardView.Bottom, etc.
        
        See also:
        MstnView.getStandard2 MstnView.isStandard MstnView.isStandard2
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getStandard2(stdViewNum: MSPyDgnPlatform.StandardView, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        """
        @Description Get one of the standard rotation matrices, relative to
        the active coordinate system of the specified model. @Param[out]
        rMatrixP rotation matrix for given view @Param[in] stdViewNum standard
        view number. Possible values are defined in msdefs.h. For example,
        StandardView.Top, StandardView.Bottom, etc. @Param modelRef in model
        from which to get the ACS @Return SUCCESS if the matrix is acquired
        and ERROR otherwise.
        
        See also:
        MstnView.getStandard MstnView.isStandard MstnView.isStandard2
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getStandardCameraLens(lensNumber: int) -> tuple:
        """
        @Description Return the camera angle and focal length for the standard
        camera lenses supported by MicroStation. The standard lens is
        specified by lensNumber in the following manner:
        
        ```
        0 20 FishEye
        1 28 ExtraWide
        2 35 Wide
        3 50 Normal
        4 85 Portrait
        5 200 Telephoto
        6 1000 Telescopic
        ```
        
        @Param[out] angle lens angle in radians. @Param[out] focalLength focal
        length of lens (mm). @Param[in] lensNumber standard lens number.
        @Return SUCCESS if a valid lensNumber is specified and ERROR
        otherwise.
        
        See also:
        MstnView.setCameraLens MstnView.getCamera
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getToolBoxId(viewIndex: int, toolBoxIndex: int, b3D: bool) -> int:
        """
        @Description Get a id to the view toolbox by view index and toolbox
        index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to
        retrieve info about the 2D or 3D toolbox @Return id of the view
        toolbox.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getToolBoxName(viewIndex: int, toolBoxIndex: int, b3D: bool) -> str:
        """
        @Description Get a name to the view toolbox by view index and toolbox
        index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to
        retrieve info about the 2D or 3D toolbox @Return name of the view
        toolbox.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getToolBoxPath(viewIndex: int, toolBoxIndex: int, b3D: bool) -> str:
        """
        @Description Get a path to the view toolbox by view index and toolbox
        index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to
        retrieve info about the 2D or 3D toolbox @Return path of the view
        toolbox.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getViewRectangle(viewRect: MSPyDgnPlatform.BSIRect, window: MSWindow, coordSystem: MSPyDgnPlatform.DgnCoordSystem) -> None:
        """
        @Description Get the screen area taken up by a view. This does not
        include the area used for scrollbars and view control icons. Use
        mdlWindow_contentRectGetLocal to get the size of the entire view
        window. @Param[out] viewRectP view rectangle. @Param[in] windowP view
        window. To get an MSWindow from a view number, use
        mdlWindow_viewWindowGet. @Param[in] coordSystem Currently, the only
        valid argument is VIEW_GLOBALCOORDS.
        
        See also:
        mdlWindow_contentRectGetLocal mdlWindow_viewWindowGet
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getViewToolsDisplay(viewIndex: int) -> bool:
        """
        @Description Get whether the view toolboxes are displayed for a given
        view index @Param[in] viewIndex the index of the view @Return true if
        the the view toolboxes are displayed.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def getViewport(viewIndex: int) -> MSPyDgnPlatform.Viewport:
        """
        @Description Get an MSPyDgnPlatform.Viewport by view index @Param[in]
        viewIndex the index of the view @Return IMSViewportP, or NULL if
        viewIndex not valid.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def indexFromWindow(window: MSWindow) -> int:
        """
        @Description Get the view number from a pointer to the MSWindow of the
        view. @Param[in] window pointer to a view of type MSWindow. @Return
        view Number from 0 and MSPyDgnPlatform.MAX_VIEWS if window is an MSWindow
        pointer that points to a view window, and -1 otherwise.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def is3d(viewNum: int) -> bool:
        """
        Parameter ``viewNum``:
        view to test. @Return true if the view is active and its root
        model is 3d.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def isActive(viewNumber: int) -> bool:
        """
        @Description Determine whether a view is "active" (turned on).
        @Param[in] viewNumber view to check @Return true if the view is on. If
        viewNumber is invalid, this routime will return false.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def isModelActive(viewIndex: int) -> bool:
        """
        @Description Determine whether the model displayed in the specified
        view window is the currently active model. @Param[in] viewIndex the
        view number for which the displayed model is found and tested against
        the currently active model. @Return true if the model is active model.
        
        See also:
        MstnView.setModel
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def isStandard(trans: MSPyBentleyGeom.RotMatrix) -> MSPyDgnPlatform.StandardView:
        """
        @Description Determine whether a rotation matrix matches a standard
        view rotation matrix. This function helps identify whether a view is
        currently displaying a standard view. @Param[in] trans rotation matrix
        to test @Return The standard view number defined in msdefs.h or -1 if
        trans does not match a standard view.
        
        See also:
        MstnView.getStandard
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def isValidIndex(index: int) -> bool:
        """
        @Description Test whether a value is a valid view index value.
        @Param[in] index the index value to test for validity as a view index.
        @Return true if the value is a valid view index, false otherwise.
        
        See also:
        MstnView.getMaxCount
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def isVisible(viewNumber: int) -> int:
        """
        @Description Determine whether a view is visible. Views will always be
        "visible" if they are turned on, so this function and MstnView.isActive
        will always return the same value. The distinction is historical, and
        they are both maintained for compatibility. @Param[in] viewNumber view
        to check @Return true if the view is on. If viewNumber is invalid,
        this routime will return false.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def newWindowCenter(viewNumber: int, newCenter: MSPyBentleyGeom.DPoint3d) -> int:
        """
        @Description Set a new window center without changing the orientation
        or scale of the view. @Param[in] viewNumber view for which the new
        view center is to be applied. @Param[in] newCenterP new view center
        (in current coordinate system). @Return SUCCESS if the input
        parameters are valid, MDLERR_BADVIEWNUMBER if viewIndex is not between
        0 and MSPyDgnPlatform.MAX_VIEWS, or MDLERR_VIEWNOTDISPLAYED if the view
        is not currently displayed.
        
        See also:
        MstnView.setArea MstnView.zoom MstnView.rotateToRMatrix
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def pan(distance: MSPyBentleyGeom.Point2d, viewNumber: int, doUpdate: bool) -> None:
        """
        @Description Move a view by a specified number of pixels, relative to
        it's current location. @Param[in] distance distance to pan, in pixels.
        @Param[in] viewNumber view to pan @Param[in] doUpdate if true, update
        the view after pan.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def pointToScreen(uorPoint: MSPyBentleyGeom.DPoint3d, viewNumber: int, coordinateSystem: MSPyDgnPlatform.DgnCoordSystem) -> tuple:
        """
        @Description Calculate a screen position for an input point.
        @Param[out] screenPointP a Point2d structure that will hold the output
        point on return from the function. (Note: The point returned may be
        outside the range that can be displayed in the indicated view,
        depending on the input point and the area visible in the view.)
        @Param[in] uorPointP the point (in the current coordinate system) for
        which screen coordinates are desired. @Param[in] viewNumber view for
        screenPointP @Param[in] coordinateSystem must be set to either
        DgnCoordSystem.Screen (local) or DgnCoordSystem.View (global). If
        DgnCoordSystem.View, screenPointP is relative to the upper left
        corner of the window, and if DgnCoordSystem.Screen, screenPointP is
        relative to the upper left corner of the screen. In both cases x
        increases to the right and y increases down the window. @Return
        SUCCESS if the input parameters are valid, MDLERR_BADVIEWNUMBER if
        viewIndex is not between 0 and MSPyDgnPlatform.MAX_VIEWS, or
        MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.screenToPoint
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def queuePartialUpdate(viewNumber: int, rects: MSPyDgnPlatform.BSIRect, numRects: int) -> int:
        """
        @Description Update one or more subparts of a MicroStation view.
        @Param[in] viewNumber view for which portions are to be updated.
        @Param[in] rectsP array of rectangles for which updates are to be
        performed. They must be in global coordinates (i.e., relative to the
        upper left of the screen). @Param[in] numRects the number of
        rectangles in the rectsP array. The maximum number of rectangles is
        15. @Remarks If the application wants the updates to happen
        immediately, the
        
        
        s mdlWindow_windowEventsProcessAll should be called following
        MstnView.queuePartialUpdate. @Return SUCCESS if the input
        parameters are valid, MDLERR_BADVIEWNUMBER if viewIndex is not
        between 0 and MSPyDgnPlatform.MAX_VIEWS, or MDLERR_VIEWNOTDISPLAYED
        if the view is not currently displayed.
        
        See also:
        MstnView.updateSingle MstnView.updateMulti
        MstnView.updateMultiExtended
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def reloadToolBoxes(viewIndex: int) -> None:
        """
        @Description Reload the toolboxes for a given view based on view index
        @Param[in] viewIndex the index of the view
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def reopen(viewNumber: int) -> int:
        """
        @Description Close and reopen the view specified by viewNumber. This
        function is equivalent to calling MstnView.turnOff followed by
        mdlView_turnOn, except that the stacking order of views maintained.
        @Param[in] viewNumber view to reopen @Return SUCCESS or
        MDLERR_BADVIEWNUMBER if viewNumber is invalid.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def rotateToRMatrix(rMatrix: MSPyBentleyGeom.RotMatrix, view: int) -> int:
        """
        @Description Rotate a view to the rotation matrix given by rMatrix.
        @Param[in] rMatrix rotation matrix @Param[in] view view to rotate
        @Remarks The view is rotated around its center point and the view
        extents are unchanged. @Remarks After MstnView.rotateToRMatrix is
        called, the view needs to be updated with MstnView.updateSingle so the
        changed view extents can be seen. @Return SUCCESS if the view is
        changed, MDLERR_BADVIEWNUMBER if viewNumber is invalid, and
        MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.updateSingle
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def saveNamed(viewName: str, description: str, viewNameSpace: str, view: int) -> int:
        """
        @Description Save the current settings for one of the view windows to
        a named view element using the given name and description. @Param[in]
        viewNameP the name to be given to the named view element when it is
        saved. @Param[in] descriptionP the description to be given to the
        named view element when it is saved. @Param[in] viewNameSpace the name
        space of the named view element. Using NULL will make this named view
        available to management by the end user via the save views
        application. Using a non-null value has the effect of making it a
        protected named view, which is only accessed by the API. @Param[in]
        view the view number to be saved as a named view element. @Return
        SUCCESS if the view element is saved successfully, otherwise
        MDLERR_BADARG if the view argument is not a valid view number.
        
        See also:
        MstnView.saveNamedViewElement
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def screenToPoint(screenPoint: MSPyBentleyGeom.Point2d, viewNumber: int, coordSystem: MSPyDgnPlatform.DgnCoordSystem) -> tuple:
        """
        @Description Calculates the world coordinates given a point on the
        screen. The output is in the current coordinate system. @Param[out]
        uorPointP output point (in the current coordinate system) @Param[in]
        screenPointP point for in screen coordinates @Param[in] viewNumber
        view for screenPointP @Param[in] coordSystem either
        DgnCoordSystem.View or DgnCoordSystem.Screen. If
        DgnCoordSystem.View, screenPointP is relative to the upper left
        corner of the window, with x increasing to the right and y increasing
        down the window. If VIEW_INGLOBALCOORDS, screenPointP is relative to
        the upper left corner of the screen. @Return SUCCESS if the input
        parameters are valid, MDLERR_BADVIEWNUMBER if viewIndex is not between
        0 and MSPyDgnPlatform.MAX_VIEWS, or MDLERR_VIEWNOTDISPLAYED if the view
        is not currently displayed.
        
        See also:
        MstnView.pointToScreen
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setActiveDepth(viewNumber: int, depth: float) -> int:
        """
        @Description Change the active depth for a view. The parameters are
        given in the current coordinate system. @Param[in] viewNumber view to
        set active depth @Param[in] depth active depth distance. This value is
        a distance from the back clipping plane. It must be greater than zero
        and less than the current display depth. @Return SUCCESS if the active
        depth plane is changed, MDLERR_BADVIEWNUMBER if viewNumber is invalid,
        and MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.setDisplayDepth MstnView.setActiveDepthPoint
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setActiveDepthPoint(viewNumber: int, points: MSPyBentleyGeom.DPoint3d) -> int:
        """
        @Description Change the active depth for a view using a point on the
        new active depth plane. @Param[in] viewNumber view to set active depth
        @Param[in] points point on active depth plane. @Return SUCCESS if the
        active depth plane is changed, MDLERR_BADVIEWNUMBER if viewNumber is
        invalid, and MDLERR_VIEWNOTDISPLAYED if the view is not currently
        displayed.
        
        See also:
        MstnView.setDisplayDepthmdl MstnView.setActiveDepth
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setArea(viewNumber: int, pt: MSPyBentleyGeom.DPoint3d, zOrg: MSPyBentleyGeom.DPoint3d, zDelta: float, actZdepth: float, rotMatrix: MSPyBentleyGeom.RotMatrix) -> int:
        """
        @Description Set the viewing area for a view. All parameters are in
        the current coordinate system. @Param[in] viewNumber the view number
        to change. @Param[in] pt an array of two points that, combined with
        the rotation matrix rMatrix, define the viewing rectangle.
        MicroStation adjusts the rectangle to match the view's actual aspect
        ratio. @Param[in] zOrg a point that lies on the view's back clipping
        plane. If zOrigin is NULL, MicroStation uses (0, 0, 0) in the current
        coordinate system. @Param[in] zDelta the distance from the back
        clipping plane to the front clipping plane. zDelta must be greater
        than zero. @Param[in] actZdepth the distance from the back clipping
        plane to the view's active depth. actZDepth must be greater than zero
        and less than zDelta. @Param[in] rotMatrix the view's rotation. If
        rMatrix is NULL, MicroStation uses the identity matrix (top view).
        @Remarks After calling this function, you need to update the view to
        see the changed view extents using MstnView.updateSingle. @Return
        SUCCESS if the viewing area is set, MDLERR_BADVIEWNUMBER if viewNumber
        is invalid, and MDLERR_VIEWNOTDISPLAYED if the view is not currently
        displayed.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setCameraLens(angle: float, view: int) -> int:
        """
        @Description Set the camera lens angle for a view. @Param[in] angle
        lens angle in radians. @Param[in] view view number. @Return SUCCESS if
        the lens angle is set successfully and an appropriate error status
        otherwise.
        
        See also:
        MstnView.getStandardCameraLens MstnView.getCamera
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setCameraParameters(position: MSPyBentleyGeom.DPoint3d, target: MSPyBentleyGeom.DPoint3d, upVector: MSPyBentleyGeom.DPoint3d, angle: float, aspectRatio: float, screenWindow: MSPyBentleyGeom.DRange2d, frontClipDist: float, backClipDist: float, view: int) -> int:
        """
        @Description Set the camera parameters for a view. Since the camera
        parameters are not independent, it is possible to omit many of the
        camera parameter arguments. If NULL is passed for an argument, it is
        defaulted to the existing value or calculated from the other
        parameters as described below. @Param[in] positionP the position of
        the camera. @Param[in] targetP the point at which the camera is aimed
        @Param[in] upVectorP a vector that sets the y-axis for the camera view
        @Param[in] angleP the camera field of view angle. The camera angle can
        be derived from the maximum of the view width and height and the
        distance from the camera to the image plane. If NULL is passed, the
        camera angle is unchanged. @Param[in] aspectRatioP the view aspect
        ratio. This represents the view height divided by the view width. If
        NULL is passed, the aspect ratio of the view window is used.
        @Param[in] screenWindowP defines the portion of the image plane that
        is displayed. The screen window coordinates are defined in an image
        plane coordinate system with an origin at the camera target. For a
        centered view, the screen window coordinates will be (-width/2,
        -height/2) (width/2, height/2). This corresponds the design of most
        modern cameras as the viewing direction is perpendicular to the camera
        plane. In an uncentered window, the image plane is tilted in relation
        to the viewing direction. This corresponds to a view, or bellows
        camera. If NULL is passed a centered window is calculated with the
        size derived from the view angle and distance to the image plane.
        @Param[in] frontClipDist the distance from the camera to the front
        clipping plane. If NULL is passed for frontClipDist, the front
        clipping distance is arbitrarily set to the target distance divided by
        300. @Param[in] backClipDist The distance from the camera to the back
        clipping plane. If NULL is passed for backClipDist, the back clipping
        distance is set to the ten times the target distance. @Param[in] view
        the index of the view for which the camera is being set. @Return
        mdlView_setCameraParameters returns SUCCESS if the view is
        successfully defined. @Remarks The camera position is specified by
        positionP, the camera target is specified by targetP. If NULL is
        passed for either of these parameters, the camera position or target
        is unchanged. The camera direction is always from positionP towards
        targetP, this coincides with the negative Z-Axis for the view.
        MicroStation's image plane is always coincident with the camera
        target, therefore, the target appears the same size in a camera
        (perspective) or non-camera (orthographic) view. @Remarks The view
        rotation about the camera axis is determined by upVectorP, this is a
        normalized direction vector that defines the y-axis for the view. It
        is always perpendicular to the camera axis. If NULL is passed for
        upVectorP, the camera will be oriented such that the camera horizontal
        is parallel to the view X-Y plane. @Remarks The camera field of view
        angle (in radians) is specified by angleP. If NULL is passed, the
        camera angle is unchanged. The camera angle can be derived from the
        maximum of the view width and height and the distance from the camera
        to the target in the following manner: cameraAngle = 2 *
        arctan(maxDimension/(2*targetDistance));
        
        See also:
        MstnView.setCameraParameters
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setClipBoundaryElement(viewIndex: int, elementID: int) -> int:
        """
        @Description Set the view's clip volume. @Param[in] viewIndex the
        index of the view @Param[in] elementID the element ID of the clip
        volume, use 0 to clear the clip volume @Remarks The referenced element
        must exist in the active model. @Remarks It must be possible to
        extract/generate a single, closed clip volume from the element,
        otherwise setting the clip volume will fail. @Remarks Valid elements
        include: closed curves, shapes, group holes, simple solids/surfaces,
        and cylinders. @Return SUCCESS if the clip volume was set
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setClipMaskElement(viewIndex: int, elementID: int) -> int:
        """
        @Description Set the view's clip mask. @Param[in] viewIndex the index
        of the view @Param[in] elementID the element ID of the clip volume,
        use 0 to clear the clip volume @Remarks The referenced element must
        exist in the active model. @Remarks It must be possible to
        extract/generate a single, closed clip mask from the element,
        otherwise setting the clip mask will fail. @Remarks Valid elements
        include: closed curves, shapes, group holes, simple solids/surfaces,
        and cylinders. @Return SUCCESS if the clip mask was set
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setDisplayControl(paramNum: int, viewNum: int, value: int) -> int:
        """
        @Description Set view display control attributes. @Param[in] paramNum
        number of attribute to set. Any of the VIEWCONTROL_ values in mdl.h
        @Param[in] viewNum view number @Param[in] value new value to set view
        attribute to. @Return MDLERR_BADVIEWNUMBER if viewNum is invalid,
        MDLERR_BADARG for invalid paramNum, ERROR for general failure, or
        SUCCESS if operation completes. Use MstnView.isValidIndex to test the
        view index. Valid paramNum values are in the range
        [0..MAX_VIEWCONTROL].
        
        See also:
        MstnView.getDisplayControl
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setDisplayDepth(viewNumber: int, frontDepth: float, backDepth: float) -> int:
        """
        @Description Change the front and back clipping planes for a view. All
        parameters are given in the current coordinate system. @Param[in]
        viewNumber view to set display depth. @Param[in] frontDepth front
        display depth @Param[in] backDepth back display depth @Remarks
        <code>frontDepth</code> and <code>backDepth</code> to define the
        positions of the front and back clipping planes. These values are
        signed distances from the <i>current</i> front clipping plane.
        @Remarks After this function is called, the view needs to be updated
        with MstnView.updateSingle, so the changed clipping planes can be seen.
        @Return SUCCESS if the view clipping planes are changed,
        MDLERR_BADVIEWNUMBER if viewNumber is invalid, and
        MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.updateSingle
        
        See also:
        MstnView.setDisplayDepthPoints
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setDisplayDepthPoints(viewNum: int, points: MSPyBentleyGeom.DPoint3d) -> int:
        """
        @Description Change the front and back clipping planes for a view
        using two points. @Param[in] viewNumber the index of the view being
        changed. @Param[in] points an array of two points that define the
        clipping planes. @Remarks After this function is called, the view
        needs to be updated with MstnView.updateSingle, so the changed clipping
        planes can be seen. @Return SUCCESS if the view clipping planes are
        changed, MDLERR_BADVIEWNUMBER if viewNumber is invalid, and
        MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.updateSingle
        
        See also:
        MstnView.setDisplayDepth
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setFlags(viewFlags: MSPyDgnPlatform.ViewFlags, viewIndex: int) -> int:
        """
        @Description Set the view settings flags for a view. @Param[in]
        viewFlags the MSPyDgnPlatform.ViewFlags structure holding the view flags
        information from which the indicated view's settings will be updated.
        @Param[in] viewIndex the view number indicating the view to set.
        @Return SUCCESS if the flags on the indicated view are set, otherwise
        ERROR.
        
        See also:
        MstnView.getFlags
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setLevelDisplay(modelRef: MSPyDgnPlatform.DgnModelRef, iViewNum: int, iLevelId: int, levelDisplay: bool) -> int:
        """
        @Description Set the display of a level in a view. @Param[in] modelRef
        the model containing the level. @Param[in] iViewNum the view number.
        @Param[in] iLevelId the id of the level. @Param[in] levelDisplay true
        if level display is to be turned on, otherwise false. @Return SUCCESS
        if the level flag was set successfully, otherwise ERROR.
        
        See also:
        MstnView.getLevelDisplay
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplayMask
        MstnView.getLevelDisplay MstnView.changeLevelDisplay
        MstnView.setLevelDisplayMaskMulti
        MstnView.changeLevelDisplayMaskMulti Bentley Systems +-------------
        --+---------------+---------------+---------------+---------------
        +------
        """
        ...
    
    @staticmethod
    def setLevelDisplayMask(modelRef: MSPyDgnPlatform.DgnModelRef, iViewNum: int, pViewLevelMask: MSPyDgnPlatform.BitMask, doUpdate: bool) -> int:
        """
        @Description Set the level display mask for the specified model and
        view. The level display mask is specified in the form of a bit-mask.
        An ON value indicates that the corresponding level is to be turned on
        in the view. An OFF value indicates that the corresponding level is to
        be turned off in the view. Even if the bit-value is ON, that is no
        guarentee that elements on the level will be displayed. Refer to
        discussion in function MstnView.getLevelDisplayMask for more details.
        
        @Param[in] modelRef model @Param[in] iViewNum view number @Param[in]
        pViewLevelMask the view level bit-mask to be set. @Param[in] doUpdate
        if ON, then redraw the view @Return SUCCESS if the operation is
        completed successfully, otherwise ERROR.
        
        @Remarks The bit-mask is 1 based. For example to set the display flag
        for a level with the function mdlBitMask_setBit, your call should look
        like: mdlBitMask_setBit(pLevelDisplayBitMask, levelid -1)
        
        See also:
        MstnView.getLevelDisplayMask MstnView.getLevelDisplay
        MstnView.setLevelDisplay MstnView.changeLevelDisplay
        MstnView.setLevelDisplayMaskMulti
        MstnView.changeLevelDisplayMaskMulti
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setLevelDisplayMaskMulti(modelRef: MSPyDgnPlatform.DgnModelRef, viewList: MSPyBentleyGeom.BoolArray, viewLevelMask: MSPyDgnPlatform.BitMask, doUpdate: bool) -> int:
        """
        @Description Set the level mask for multiple views from the given
        level mask. This function works similar to
        mdlView_setLevelDisplayMask, except that it applies the specified
        level-mask to the list of specified views. @Param[in] modelRef model
        @Param[in] viewList an array of MSPyDgnPlatform.MAX_VIEWS bool, each
        representing a view. A non-zero value indicates that view is to be
        updated from the BitMask given by pViewLevelMask. @Param[in]
        viewLevelMask view level bit-mask to set. @Param[in] doUpdate IF ON,
        then redraw the views. @Return SUCCESS if the operation is completed
        successfully, otherwise ERROR.
        
        See also:
        MstnView.setLevelDisplayMask MstnView.getLevelDisplayMask
        MstnView.getLevelDisplay MstnView.setLevelDisplay
        MstnView.changeLevelDisplay MstnView.changeLevelDisplayMaskMulti
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setModel(modelRef: MSPyDgnPlatform.DgnModelRef, viewIndex: int) -> int:
        """
        @Description Set the given view's model ID. @Param[in] modelRef model
        ref to apply @Param[in] viewIndex index of view @Return SUCCESS if the
        model is found, ERROR otherwise.
        
        
        Bentley Systems +-----------------------------------------------------
        -----------------
        """
        ...
    
    @staticmethod
    def setToolBoxId(viewIndex: int, toolBoxIndex: int, b3D: bool, toolBoxId: int) -> None:
        """
        @Description Set the view toolbox based on id by view index and
        toolbox index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to set
        info about the 2D or 3D toolbox @Param[in] toolBoxId the id of the
        toolbox
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setToolBoxName(viewIndex: int, toolBoxIndex: int, b3D: bool, ToolBoxName: str) -> None:
        """
        @Description Set the view toolbox based on name by view index and
        toolbox index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to set
        info about the 2D or 3D toolbox @Param[in] pToolBoxName the name of
        the toolbox
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setToolBoxPath(viewIndex: int, toolBoxIndex: int, b3D: bool, ToolBoxPath: str) -> None:
        """
        @Description Set the view toolbox based on path by view index and
        toolbox index @Param[in] viewIndex the index of the view @Param[in]
        toolBoxIndex the index of the toolbox @Param[in] b3D whether to set
        info about the 2D or 3D toolbox @Param[in] pToolBoxPath the path of
        the toolbox
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setUpApplyOpts(applyOpts: MSPyDgnPlatform.ApplyViewOptions, type: int) -> None:
        """
        @Description Set initial values for viewport info options. @Param[in]
        applyOptsP the ApplyViewOptions structure in which the value is set
        @Param[in] type the type of the value to set (see view.h for
        VIEW_APPLY_OPTS_* constants that can be used in this function)
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def setViewToolsDisplay(viewIndex: int, display: bool) -> None:
        """
        @Description Set whether the view toolboxes are displayed for a given
        view index. @Remarks This overrides userPrefsP->flags.viewToolsDisplay
        on a per view basis. @Param[in] viewIndex the index of the view
        @Param[in] display indicates whether the view toolboxes should display
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def synchWithTCB(viewNumber: int) -> None:
        """
        @Description Synchronizes the private view information that
        MicroStation maintains separately for each view with the "public" view
        information that is maintained in the TCB. The reason that the private
        information is separated from the TCB information is that the private
        information reflects what is currently drawn on the screen. Elements
        will be undrawn in the same mode in which they were originally drawn,
        regardless of the current drawing mode. <p>For example, suppose that
        the state of the Fast Text Display is on when an element is originally
        drawn, and the user subsequently turns Fast Text Display off for a
        particular view and does not immediately update. Those text elements
        will be undrawn in Fast display mode until the next update. An
        application can override this normal behavior using
        mdlView_synchWithTCB. This allows an application to specify a draw
        mode in the TCB, and force MicroStation to immediately adopt this draw
        mode for the given view. @Param[in] viewNumber view to synchronize
        with the TCB.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def treatAs3D(viewIndex: int) -> bool:
        """
        @Description Determine whether the specified view should be treated as
        3D. @Param[in] viewIndex the index of the view to query @Return true
        if the given view is 3D, false otherwise
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def turnOff(viewNumber: int) -> int:
        """
        @Description Turn off a MicroStation view. @Param[in] viewNumber view
        to turn off @Return The MstnView.turnOff function returns SUCCESS if
        the view is turned off, MDLERR_BADVIEWNUMBER if viewNumber is invalid,
        and MDLERR_VIEWNOTDISPLAYED if the view is not currently displayed.
        
        See also:
        MstnView.turnOn Bentley Systems +---------------+---------------+--
        -------------+---------------+---------------+------
        """
        ...
    
    @staticmethod
    def turnOn(viewNumber: int) -> int:
        """
        @Description Turn on a MicroStation View using the current view
        parameters. The function does not return until the view is initially
        painted. @Param[in] viewNumber view to turn on @Return SUCCESS if the
        view is turned on (or already on) and MDLERR_BADVIEWNUMBER if
        viewNumber is invalid.
        
        See also:
        MstnView.turnOff
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def updateMulti(viewDraw: MSPyBentleyGeom.BoolArray, incremental: bool, drawMode: MSPyDgnPlatform.DgnDrawMode, modelRefList: MSPyDgnPlatform.DgnModelRefList, startEndMsg: bool) -> None:
        """
        @Description Update one or more views. @Param[in] viewDraw views to
        update. Should be dimensioned to MSPyDgnPlatform.MAX_VIEWS, and
        viewDraw[i] controls whether view i is drawn. @Param[in] incremental
        incremental update (meaning, don't erase before drawing). @Param[in]
        drawMode possible values are DRAW_MODE_Normal, ERASE and HILITE. These
        values draw the elements normally, erase elements from the screen, and
        highlight elements, respectively. @Param[in] modelRefList a list of
        the models to include in the view(s). If modelRefList is NULL, the
        master and all references are included. @Param[in] startEndMsg if
        true, MicroStation displays the "Update in progress" and "Display
        complete" messages before and after the update.
        
        This function returns only after the entire view displays.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def updateMultiEx(viewDraw: MSPyBentleyGeom.BoolArray, incremental: bool, drawMode: MSPyDgnPlatform.DgnDrawMode, modelRefList: MSPyDgnPlatform.DgnModelRefList, startEndMsg: bool, updateViewTitle: bool) -> None:
        """
        @Description Update one or more views. @Param[in] viewDraw views to
        update. Should be dimensioned to MSPyDgnPlatform.MAX_VIEWS, and
        viewDraw[i] controls whether view i is drawn. @Param[in] incremental
        incremental update (meaning, don't erase before drawing). @Param[in]
        drawMode possible values are DRAW_MODE_Normal, ERASE and HILITE. These
        values draw the elements normally, erase elements from the screen, and
        highlight elements, respectively. @Param[in] modelRefList a list of
        the models to include in the view(s). If modelRefList is NULL, the
        master and all references are included. @Param[in] startEndMsg if
        true, MicroStation displays the "Update in progress" and "Display
        complete" messages before and after the update. @Param[in] updateTitle
        if true, will update window title
        
        This function returns only after the entire view displays.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def updateSingle(viewNumber: int) -> int:
        """
        @Description Update a single view. @Param[in] viewNumber the view
        number to update. @Remarks This function often needs to be called
        after a view's settings are changed. @Return MstnView.updateSingle
        returns SUCCESS if the view is updated, MDLERR_BADVIEWNUMBER if
        viewNumber is invalid, and MDLERR_VIEWNOTDISPLAYED if the view is not
        currently displayed.
        
        This function returns only after the entire view displays.
        
        See also:
        MstnView.updateMulti MstnView.renderSingle
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def updateViewInfo(viewInfo: MSPyDgnPlatform.ViewInfo) -> int:
        """
        @Description Update the global view information to match the data
        passed to this function. @Param[in] viewInfoP the view information
        with which the global view information will be updated. The view
        number is contained within the view info information. @Return SUCCESS
        if the operation is completed successfully, otherwise ERROR.
        
        See also:
        MstnView.copyViewInfo
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def zoom(outView: int, inView: int, centerPoint: MSPyBentleyGeom.DPoint3d, zoomFactor: float) -> int:
        """
        @Description Change a view's viewing extents. @Param[in] outView view
        to change parameters @Param[in] inView view to get parameters from
        (can be the same as outView). @Param[in] centerPoint point to zoom
        about @Param[in] zoomFactor zoom ratio; if it is greater than 1.0, the
        effect is to zoom out. If zoomFactor is less than 1.0, the effect is
        to zoom in. A zoomFactor of 1.0 can be used to center the window.
        @Remarks inView and outView can be the same. @Remarks After calling
        this function, you need to update the view to see the changed view
        extents using MstnView.updateSingle. @Return SUCCESS if the view
        extents are changed and MDLERR_BADVIEWNUMBER or
        MDLERR_VIEWNOTDISPLAYED if inViewNumber or outViewNumber is invalid or
        not displayed.
        
        See also:
        MstnView.updateSingle
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
class MstnViewPortInfo:
    """
    None
    """

    @staticmethod
    def From(target: MSPyDgnPlatform.ViewPortInfo, viewNumber: int) -> int:
        """
        Copies the contents of the numbered ViewPortInfo to the target ViewPortInfo
        
        Parameter ``target``:
        The target ViewPortInfo
        
        Parameter ``viewNumber``:
        The view number, between 0 and MAX_VIEWS-1, inclusive.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class NewDesignFileReason:
    """
    Members:
    
    eSYSTEM_NEWFILE_CLOSE
    
    eSYSTEM_NEWFILE_COMPLETE
    """

    def __init__(self: MSPyMstnPlatform.NewDesignFileReason, value: int) -> None:
        ...
    
    eSYSTEM_NEWFILE_CLOSE: NewDesignFileReason
    
    eSYSTEM_NEWFILE_COMPLETE: NewDesignFileReason
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.NewDesignFileReason) -> int:
        ...
    
class PlotAreaMode:
    """
    Members:
    
    eView
    
    eFence
    
    eSheet
    """

    def __init__(self: MSPyMstnPlatform.PlotAreaMode, value: int) -> None:
        ...
    
    eFence: PlotAreaMode
    
    eSheet: PlotAreaMode
    
    eView: PlotAreaMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotAreaMode) -> int:
        ...
    
class PlotAutoAlignMode:
    """
    Members:
    
    eNone
    
    eXAxis
    
    eYAxis
    """

    def __init__(self: MSPyMstnPlatform.PlotAutoAlignMode, value: int) -> None:
        ...
    
    eNone: PlotAutoAlignMode
    
    eXAxis: PlotAutoAlignMode
    
    eYAxis: PlotAutoAlignMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotAutoAlignMode) -> int:
        ...
    
class PlotColorMode:
    """
    Members:
    
    eUndefined
    
    eMonochrome
    
    eGrayscale
    
    eTrueColor
    """

    def __init__(self: MSPyMstnPlatform.PlotColorMode, value: int) -> None:
        ...
    
    eGrayscale: PlotColorMode
    
    eMonochrome: PlotColorMode
    
    eTrueColor: PlotColorMode
    
    eUndefined: PlotColorMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotColorMode) -> int:
        ...
    
class PlotDestination:
    """
    Members:
    
    eUndefined
    
    eToDevice
    
    eToPlotFile
    
    eToMetaFile
    
    eToIpserver
    """

    def __init__(self: MSPyMstnPlatform.PlotDestination, value: int) -> None:
        ...
    
    eToDevice: PlotDestination
    
    eToIpserver: PlotDestination
    
    eToMetaFile: PlotDestination
    
    eToPlotFile: PlotDestination
    
    eUndefined: PlotDestination
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotDestination) -> int:
        ...
    
class PlotDriver:
    """
    Members:
    
    eUnknown
    
    eCALS
    
    eDPR
    
    eHPGL2
    
    eHPGLRTL
    
    eLORIP
    
    ePDF
    
    ePSCRIPT
    
    eSYSPRINTER
    
    eTIFF
    """

    def __init__(self: MSPyMstnPlatform.PlotDriver, value: int) -> None:
        ...
    
    eCALS: PlotDriver
    
    eDPR: PlotDriver
    
    eHPGL2: PlotDriver
    
    eHPGLRTL: PlotDriver
    
    eLORIP: PlotDriver
    
    ePDF: PlotDriver
    
    ePSCRIPT: PlotDriver
    
    eSYSPRINTER: PlotDriver
    
    eTIFF: PlotDriver
    
    eUnknown: PlotDriver
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotDriver) -> int:
        ...
    
class PlotEdpFillDisplay:
    """
    Members:
    
    eNever
    
    eByView
    
    eAlways
    
    eBlanking
    """

    def __init__(self: MSPyMstnPlatform.PlotEdpFillDisplay, value: int) -> None:
        ...
    
    eAlways: PlotEdpFillDisplay
    
    eBlanking: PlotEdpFillDisplay
    
    eByView: PlotEdpFillDisplay
    
    eNever: PlotEdpFillDisplay
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotEdpFillDisplay) -> int:
        ...
    
class PlotEdpLineCap:
    """
    Members:
    
    eNone
    
    eFlat
    
    eSquare
    
    eRound
    
    eTriangle
    """

    def __init__(self: MSPyMstnPlatform.PlotEdpLineCap, value: int) -> None:
        ...
    
    eFlat: PlotEdpLineCap
    
    eNone: PlotEdpLineCap
    
    eRound: PlotEdpLineCap
    
    eSquare: PlotEdpLineCap
    
    eTriangle: PlotEdpLineCap
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotEdpLineCap) -> int:
        ...
    
class PlotEdpLineJoin:
    """
    Members:
    
    eNone
    
    eBevel
    
    eMiter
    
    eRound
    """

    def __init__(self: MSPyMstnPlatform.PlotEdpLineJoin, value: int) -> None:
        ...
    
    eBevel: PlotEdpLineJoin
    
    eMiter: PlotEdpLineJoin
    
    eNone: PlotEdpLineJoin
    
    eRound: PlotEdpLineJoin
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotEdpLineJoin) -> int:
        ...
    
class PlotError:
    """
    Members:
    
    eNoError
    
    eInternal
    
    eDiskFull
    
    eUserAbort
    
    eMalloc
    
    eOpenFile
    
    eWriteFile
    
    eCreateFile
    
    ePermissionDenied
    
    eInvalidScale
    
    eIllegalWrite
    
    eTimeout
    """

    def __init__(self: MSPyMstnPlatform.PlotError, value: int) -> None:
        ...
    
    eCreateFile: PlotError
    
    eDiskFull: PlotError
    
    eIllegalWrite: PlotError
    
    eInternal: PlotError
    
    eInvalidScale: PlotError
    
    eMalloc: PlotError
    
    eNoError: PlotError
    
    eOpenFile: PlotError
    
    ePermissionDenied: PlotError
    
    eTimeout: PlotError
    
    eUserAbort: PlotError
    
    eWriteFile: PlotError
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotError) -> int:
        ...
    
class PlotFileSpec:
    """
    None
    """

    def Clear(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Clears Ufs, Hfs, moniker, and handle.
        """
        ...
    
    def ClearEmbeddedSuffix(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Clears the embedded suffix string.
        """
        ...
    
    def ClearHandle(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Clears the document or folder handle, if defined.
        """
        ...
    
    def ClearHfs(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Clears the host file specification.
        """
        ...
    
    def ClearMoniker(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Clears the externalized DMS moniker string.
        """
        ...
    
    @staticmethod
    def ContainsEmbeddedSuffix(path: MSPyBentley.WString) -> bool:
        """
        True if the given path contains an embedded file specification.
        """
        ...
    
    def DisplayFullName(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.BeFileName:
        """
        Gets the Ufs if DMS managed, otherwise HfsOrUfs(). Does not include
        embedded suffix in HFS, if defined.
        """
        ...
    
    def Document(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyDgnPlatform.DgnDocument:
        """
        DgnDocument pointer. May be undefined.
        """
        ...
    
    def EmbeddedSuffix(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.WString:
        """
        Gets the embedded suffix string.
        """
        ...
    
    @staticmethod
    def Equals(comparand1: MSPyMstnPlatform.PlotFileSpec, comparand2: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Tests two PlotFileSpec instances for equality.
        """
        ...
    
    def Folder(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyDgnPlatform.DgnFolder:
        """
        DgnFolder pointer. May be undefined.
        """
        ...
    
    def GetDisplayFullName(self: MSPyMstnPlatform.PlotFileSpec, includeEmbeddedSuffix: bool = False) -> MSPyBentley.BeFileName:
        """
        Gets the Ufs if DMS managed, otherwise GetHfsOrUfs
        (includeEmbeddedSuffix). Optionally appends the embedded suffix if
        defined.
        """
        ...
    
    @staticmethod
    def GetEmbeddedSuffix(path: MSPyBentley.WString) -> MSPyBentley.WString:
        """
        Returns any embedded suffix from the given path.
        """
        ...
    
    def GetFileName(self: MSPyMstnPlatform.PlotFileSpec, includeEmbeddedSuffix: bool = False) -> MSPyBentley.WString:
        """
        Gets the file name and extension of the Hfs if defined, otherwise that
        of the Ufs. Optionally appends the embedded suffix if defined.
        """
        ...
    
    def GetHfs(self: MSPyMstnPlatform.PlotFileSpec, includeEmbeddedSuffix: bool = False) -> MSPyBentley.BeFileName:
        """
        Gets the host file specification. Optionally includes the embedded
        suffix, if defined.
        """
        ...
    
    def GetHfsOrUfs(self: MSPyMstnPlatform.PlotFileSpec, includeEmbeddedSuffix: bool = False) -> MSPyBentley.BeFileName:
        """
        Gets the host file specification if defined, otherwise the universal
        file specification. Optionally includes the embedded suffix in the
        HFS, if defined.
        """
        ...
    
    def GetUfs(self: MSPyMstnPlatform.PlotFileSpec, includeEmbeddedSuffix: bool = False) -> MSPyBentley.BeFileName:
        """
        Gets the universal file specification. Optionally includes the
        embedded suffix, if defined.
        """
        ...
    
    def Hfs(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.BeFileName:
        """
        Gets the host file specification, without any embedded suffix.
        """
        ...
    
    def HfsOrUfs(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.BeFileName:
        """
        Gets the host file specification if defined, otherwise the universal
        file specification. Does not include the embedded suffix in the HFS.
        """
        ...
    
    def IsDms(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if this file is DMS managed.
        """
        ...
    
    def IsEmbeddedSuffixDefined(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if the embedded suffix is defined.
        """
        ...
    
    def IsEmpty(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if the universal file specification is not defined.
        """
        ...
    
    def IsFolder(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Gets flag indicating if this specification is for a folder.
        """
        ...
    
    def IsHandleDefined(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if DgnDocument or DgnFolder is defined.
        """
        ...
    
    def IsHfsDefined(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if the host file specification is defined.
        """
        ...
    
    def IsMonikerDefined(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if the externalized moniker string is defined.
        """
        ...
    
    def IsNew(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Gets flag indicating if this specification represents a file or folder
        being created. DgnDocument.OnNewFileCreated must be called to finish
        creation of files marked as new.
        """
        ...
    
    def IsReadOnly(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        Gets flag indicating if this specification represents a read-only file
        or folder.
        """
        ...
    
    def IsValid(self: MSPyMstnPlatform.PlotFileSpec) -> bool:
        """
        True if the universal file specification is defined.
        """
        ...
    
    def Moniker(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.WString:
        """
        Gets the externalized DMS moniker string.
        """
        ...
    
    @staticmethod
    def RemoveEmbeddedSuffix(path: MSPyBentley.WString) -> MSPyBentley.WString:
        """
        Removes any embedded suffix from the given path.
        """
        ...
    
    def SetDocument(self: MSPyMstnPlatform.PlotFileSpec, value: MSPyDgnPlatform.DgnDocument) -> None:
        """
        Set the DgnDocument for this file specification. Adds reference to
        document.
        """
        ...
    
    def SetEmbeddedSuffix(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetEmbeddedSuffix(self: MSPyMstnPlatform.PlotFileSpec, value: str) -> None
        
        Sets the embedded suffix string.
        
        2. SetEmbeddedSuffix(self: MSPyMstnPlatform.PlotFileSpec, value: MSPyBentley.WString) -> None
        
        Sets the embedded suffix string.
        """
        ...
    
    def SetFolder(self: MSPyMstnPlatform.PlotFileSpec, value: MSPyDgnPlatform.DgnFolder) -> None:
        """
        Set the DgnFolder for this folder specification. Adds reference to
        folder.
        """
        ...
    
    def SetFromDgnDocument(self: MSPyMstnPlatform.PlotFileSpec, document: MSPyDgnPlatform.DgnDocument) -> None:
        """
        Populates FileSpec from a DgnDocument.
        
        Remark:
        s The FileSpec instance will take ownership of a copy of the input
        DgnDocument.
        """
        ...
    
    def SetFromDgnFolder(self: MSPyMstnPlatform.PlotFileSpec, folder: MSPyDgnPlatform.DgnFolder) -> None:
        """
        Populates FileSpec from a DgnFolder.
        
        Remark:
        s The FileSpec instance will take ownership of a copy of the input
        DgnFolder.
        """
        ...
    
    def SetHfs(self: MSPyMstnPlatform.PlotFileSpec, value: str) -> None:
        """
        Sets the host file specification. May also set the universal file
        specification and embedded suffix.
        """
        ...
    
    def SetIsFolder(self: MSPyMstnPlatform.PlotFileSpec, value: bool) -> None:
        """
        Sets flag indicating if this specification is for a folder.
        """
        ...
    
    def SetIsNew(self: MSPyMstnPlatform.PlotFileSpec, value: bool) -> None:
        """
        Sets flag indicating if this specification represents a file or folder
        being created. DgnDocument.OnNewFileCreated must be called to finish
        creation of files marked as new.
        """
        ...
    
    def SetIsReadOnly(self: MSPyMstnPlatform.PlotFileSpec, value: bool) -> None:
        """
        Sets flag indicating if this specification represents a read-only file
        or folder.
        """
        ...
    
    def SetMoniker(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetMoniker(self: MSPyMstnPlatform.PlotFileSpec, value: str) -> None
        
        Sets the externalized DMS moniker string.
        
        2. SetMoniker(self: MSPyMstnPlatform.PlotFileSpec, value: MSPyBentley.WString) -> None
        
        Sets the externalized DMS moniker string.
        """
        ...
    
    def SetUfs(self: MSPyMstnPlatform.PlotFileSpec, value: str) -> None:
        """
        Sets the universal file specification. Clears host file specification
        and moniker. May set or clear the embedded suffix.
        """
        ...
    
    def SetUfsAndHfs(self: MSPyMstnPlatform.PlotFileSpec, value: str) -> None:
        """
        Sets both the universal and host file specifications. Clears the
        moniker. Sets of clears the embedded suffix.
        """
        ...
    
    def SetUfsOnly(self: MSPyMstnPlatform.PlotFileSpec, value: MSPyBentley.WString) -> None:
        """
        Sets the universal file specification without clearing anything.
        Intended only for low-level code that manually populates all file
        specification fields.
        """
        ...
    
    def ToString(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.WString:
        """
        Gets the display full name, including embedded suffix.
        """
        ...
    
    def Ufs(self: MSPyMstnPlatform.PlotFileSpec) -> MSPyBentley.BeFileName:
        """
        Gets the universal file specification, without any embedded suffix.
        """
        ...
    
    def UpdateFromHandle(self: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Updates the FolderSpec from its contained handle, if defined.
        
        Remark:
        s Potentially changes the ufs, hfs, and moniker.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.PlotFileSpec) -> None
        
        Default constructor.
        
        2. __init__(self: MSPyMstnPlatform.PlotFileSpec, ufs: MSPyBentley.WString) -> None
        
        Constructs a PlotFileSpec from a universal file specification.
        
        3. __init__(self: MSPyMstnPlatform.PlotFileSpec, ufs: MSPyBentley.WString, isHfs: bool) -> None
        
        Constructs a PlotFileSpec from a universal file specification, while
        also optionally setting the host file specification to the same value.
        
        4. __init__(self: MSPyMstnPlatform.PlotFileSpec, ufs: str) -> None
        
        Constructs a PlotFileSpec from a universal file specification.
        
        5. __init__(self: MSPyMstnPlatform.PlotFileSpec, ufs: str, isHfs: bool) -> None
        
        Constructs a PlotFileSpec from a universal file specification, while
        also optionally setting the host file specification to the same value.
        
        6. __init__(self: MSPyMstnPlatform.PlotFileSpec, document: MSPyDgnPlatform.DgnDocument) -> None
        
        Constructs a PlotFileSpec from a DgnDocument.
        
        Remark:
        s The FileSpec instance will take ownership of a copy of the input
        DgnDocument.
        
        7. __init__(self: MSPyMstnPlatform.PlotFileSpec, folder: MSPyDgnPlatform.DgnFolder) -> None
        
        Constructs a PlotFileSpec from a DgnDocument.
        
        Remark:
        s The FileSpec instance will take ownership of a copy of the input
        DgnDocument.
        """
        ...
    
    @staticmethod
    def swap(a: MSPyMstnPlatform.PlotFileSpec, b: MSPyMstnPlatform.PlotFileSpec) -> None:
        """
        Swaps two PlotFileSpec instances.
        """
        ...
    
class PlotFilterLodMode:
    """
    Members:
    
    eOff
    
    eShowRange
    
    eShowNothing
    """

    def __init__(self: MSPyMstnPlatform.PlotFilterLodMode, value: int) -> None:
        ...
    
    eOff: PlotFilterLodMode
    
    eShowNothing: PlotFilterLodMode
    
    eShowRange: PlotFilterLodMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotFilterLodMode) -> int:
        ...
    
class PlotFlags:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def applyColorModeToRaster(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @applyColorModeToRaster.setter
    def applyColorModeToRaster(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def plotBorder(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @plotBorder.setter
    def plotBorder(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def plotBrokenAssocSymb(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @plotBrokenAssocSymb.setter
    def plotBrokenAssocSymb(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def plotFence(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @plotFence.setter
    def plotFence(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def printPoints(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @printPoints.setter
    def printPoints(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def reserved(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @reserved.setter
    def reserved(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
    @property
    def useViewBackgroundColorForRender(arg0: MSPyMstnPlatform.PlotFlags) -> int:
        ...
    @useViewBackgroundColorForRender.setter
    def useViewBackgroundColorForRender(arg0: MSPyMstnPlatform.PlotFlags, arg1: int) -> None:
        ...
    
class PlotHwTextMode:
    """
    Members:
    
    eNone
    
    eNormal
    
    eNormalAllFonts
    
    eAlways
    
    ePDFEditable
    """

    def __init__(self: MSPyMstnPlatform.PlotHwTextMode, value: int) -> None:
        ...
    
    eAlways: PlotHwTextMode
    
    eNone: PlotHwTextMode
    
    eNormal: PlotHwTextMode
    
    eNormalAllFonts: PlotHwTextMode
    
    ePDFEditable: PlotHwTextMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotHwTextMode) -> int:
        ...
    
class PlotLineCap:
    """
    Members:
    
    eUndefined
    
    eFlat
    
    eSquare
    
    eTriangle
    
    eRound
    """

    def __init__(self: MSPyMstnPlatform.PlotLineCap, value: int) -> None:
        ...
    
    eFlat: PlotLineCap
    
    eRound: PlotLineCap
    
    eSquare: PlotLineCap
    
    eTriangle: PlotLineCap
    
    eUndefined: PlotLineCap
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotLineCap) -> int:
        ...
    
class PlotLineJoin:
    """
    Members:
    
    eUndefined
    
    eMiter
    
    eMiterBevel
    
    eTriangle
    
    eRound
    
    eBevel
    
    eButt
    """

    def __init__(self: MSPyMstnPlatform.PlotLineJoin, value: int) -> None:
        ...
    
    eBevel: PlotLineJoin
    
    eButt: PlotLineJoin
    
    eMiter: PlotLineJoin
    
    eMiterBevel: PlotLineJoin
    
    eRound: PlotLineJoin
    
    eTriangle: PlotLineJoin
    
    eUndefined: PlotLineJoin
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotLineJoin) -> int:
        ...
    
class PlotLineStyleDef:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def noHardware(arg0: MSPyMstnPlatform.PlotLineStyleDef) -> int:
        ...
    @noHardware.setter
    def noHardware(arg0: MSPyMstnPlatform.PlotLineStyleDef, arg1: int) -> None:
        ...
    
    @property
    def numOnOff(self: MSPyMstnPlatform.PlotLineStyleDef) -> int:
        ...
    @numOnOff.setter
    def numOnOff(self: MSPyMstnPlatform.PlotLineStyleDef, arg0: int) -> None:
        ...
    
    @property
    def onOff(arg0: MSPyMstnPlatform.PlotLineStyleDef) -> list:
        ...
    @onOff.setter
    def onOff(arg0: MSPyMstnPlatform.PlotLineStyleDef, arg1: MSPyBentleyGeom.DoubleArray) -> None:
        ...
    
    @property
    def reserved(arg0: MSPyMstnPlatform.PlotLineStyleDef) -> int:
        ...
    @reserved.setter
    def reserved(arg0: MSPyMstnPlatform.PlotLineStyleDef, arg1: int) -> None:
        ...
    
    @property
    def units(self: MSPyMstnPlatform.PlotLineStyleDef) -> MSPyMstnPlatform.Print.PlotUnits:
        ...
    @units.setter
    def units(self: MSPyMstnPlatform.PlotLineStyleDef, arg0: MSPyMstnPlatform.Print.PlotUnits) -> None:
        ...
    
class PlotMoveMode:
    """
    Members:
    
    eAbsolute
    
    eRelative
    """

    def __init__(self: MSPyMstnPlatform.PlotMoveMode, value: int) -> None:
        ...
    
    eAbsolute: PlotMoveMode
    
    eRelative: PlotMoveMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotMoveMode) -> int:
        ...
    
class PlotOrientation:
    """
    Members:
    
    eUndefined
    
    ePortrait
    
    eLandscape
    """

    def __init__(self: MSPyMstnPlatform.PlotOrientation, value: int) -> None:
        ...
    
    eLandscape: PlotOrientation
    
    ePortrait: PlotOrientation
    
    eUndefined: PlotOrientation
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotOrientation) -> int:
        ...
    
class PlotPaperSizeInfo:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def name(self: MSPyMstnPlatform.PlotPaperSizeInfo) -> MSPyBentley.WString:
        ...
    @name.setter
    def name(self: MSPyMstnPlatform.PlotPaperSizeInfo, arg0: MSPyBentley.WString) -> None:
        ...
    
    @property
    def printableOffset(self: MSPyMstnPlatform.PlotPaperSizeInfo) -> MSPyBentleyGeom.DPoint2d:
        ...
    @printableOffset.setter
    def printableOffset(self: MSPyMstnPlatform.PlotPaperSizeInfo, arg0: MSPyBentleyGeom.DPoint2d) -> None:
        ...
    
    @property
    def printableSize(self: MSPyMstnPlatform.PlotPaperSizeInfo) -> MSPyBentleyGeom.DPoint2d:
        ...
    @printableSize.setter
    def printableSize(self: MSPyMstnPlatform.PlotPaperSizeInfo, arg0: MSPyBentleyGeom.DPoint2d) -> None:
        ...
    
    @property
    def totalSize(self: MSPyMstnPlatform.PlotPaperSizeInfo) -> MSPyBentleyGeom.DPoint2d:
        ...
    @totalSize.setter
    def totalSize(self: MSPyMstnPlatform.PlotPaperSizeInfo, arg0: MSPyBentleyGeom.DPoint2d) -> None:
        ...
    
    @property
    def units(self: MSPyMstnPlatform.PlotPaperSizeInfo) -> MSPyMstnPlatform.PlotUnits:
        ...
    @units.setter
    def units(self: MSPyMstnPlatform.PlotPaperSizeInfo, arg0: MSPyMstnPlatform.PlotUnits) -> None:
        ...
    
class PlotPaperSizeInfoArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.PlotPaperSizeInfoArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, arg0: MSPyMstnPlatform.PlotPaperSizeInfoArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, x: MSPyMstnPlatform.PlotPaperSizeInfo) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.PlotPaperSizeInfoArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, L: MSPyMstnPlatform.PlotPaperSizeInfoArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, i: int, x: MSPyMstnPlatform.PlotPaperSizeInfo) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.PlotPaperSizeInfoArray) -> MSPyMstnPlatform.PlotPaperSizeInfo
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.PlotPaperSizeInfoArray, i: int) -> MSPyMstnPlatform.PlotPaperSizeInfo
        
        Remove and return the item at index ``i``
        """
        ...
    
class PlotPathOperator:
    """
    Members:
    
    eUndefined
    
    eMoveTo
    
    eLineTo
    
    eBezierTo
    """

    def __init__(self: MSPyMstnPlatform.PlotPathOperator, value: int) -> None:
        ...
    
    eBezierTo: PlotPathOperator
    
    eLineTo: PlotPathOperator
    
    eMoveTo: PlotPathOperator
    
    eUndefined: PlotPathOperator
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotPathOperator) -> int:
        ...
    
class PlotPenSetup:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def color(self: MSPyMstnPlatform.PlotPenSetup) -> MSPyDgnPlatform.RgbaColorDef:
        ...
    @color.setter
    def color(self: MSPyMstnPlatform.PlotPenSetup, arg0: MSPyDgnPlatform.RgbaColorDef) -> None:
        ...
    
    @property
    def isColorValid(arg0: MSPyMstnPlatform.PlotPenSetup) -> int:
        ...
    @isColorValid.setter
    def isColorValid(arg0: MSPyMstnPlatform.PlotPenSetup, arg1: int) -> None:
        ...
    
    @property
    def isGrayscale(arg0: MSPyMstnPlatform.PlotPenSetup) -> int:
        ...
    @isGrayscale.setter
    def isGrayscale(arg0: MSPyMstnPlatform.PlotPenSetup, arg1: int) -> None:
        ...
    
    @property
    def isWidthValid(arg0: MSPyMstnPlatform.PlotPenSetup) -> int:
        ...
    @isWidthValid.setter
    def isWidthValid(arg0: MSPyMstnPlatform.PlotPenSetup, arg1: int) -> None:
        ...
    
    @property
    def plotGrayscale(arg0: MSPyMstnPlatform.PlotRasterOptions) -> int:
        ...
    @plotGrayscale.setter
    def plotGrayscale(arg0: MSPyMstnPlatform.PlotRasterOptions, arg1: int) -> None:
        ...
    
    @property
    def plotMonochromeAsIs(arg0: MSPyMstnPlatform.PlotRasterOptions) -> int:
        ...
    @plotMonochromeAsIs.setter
    def plotMonochromeAsIs(arg0: MSPyMstnPlatform.PlotRasterOptions, arg1: int) -> None:
        ...
    
    @property
    def plotRasterImages(arg0: MSPyMstnPlatform.PlotRasterOptions) -> int:
        ...
    @plotRasterImages.setter
    def plotRasterImages(arg0: MSPyMstnPlatform.PlotRasterOptions, arg1: int) -> None:
        ...
    
    @property
    def reserved(arg0: MSPyMstnPlatform.PlotRasterOptions) -> int:
        ...
    @reserved.setter
    def reserved(arg0: MSPyMstnPlatform.PlotRasterOptions, arg1: int) -> None:
        ...
    
    @property
    def screen(self: MSPyMstnPlatform.PlotPenSetup) -> float:
        ...
    @screen.setter
    def screen(self: MSPyMstnPlatform.PlotPenSetup, arg0: float) -> None:
        ...
    
    @property
    def widthMM(self: MSPyMstnPlatform.PlotPenSetup) -> float:
        ...
    @widthMM.setter
    def widthMM(self: MSPyMstnPlatform.PlotPenSetup, arg0: float) -> None:
        ...
    
class PlotPropValue:
    """
    None
    """

    def Assign(*args, **kwargs):
        """
        Overloaded function.
        
        1. Assign(self: MSPyMstnPlatform.PlotPropValue, value: int) -> None
        
        Assigns an integer value.
        
        2. Assign(self: MSPyMstnPlatform.PlotPropValue, value: float) -> None
        
        Assigns an integer value.
        
        3. Assign(self: MSPyMstnPlatform.PlotPropValue, value: str) -> None
        
        Assigns an integer value.
        """
        ...
    
    def GetBool(self: MSPyMstnPlatform.PlotPropValue) -> bool:
        """
        Gets the property value as an boolean.
        
        Remark:
        s Returns false if property value undefined or is not an integer
        type.
        """
        ...
    
    def GetDouble(self: MSPyMstnPlatform.PlotPropValue) -> float:
        """
        Gets the property value as a floating-point number.
        
        Remark:
        s Returns zero if property value undefined or is not a floating-
        point type.
        """
        ...
    
    def GetInt(self: MSPyMstnPlatform.PlotPropValue) -> int:
        """
        Gets the property value as an integer.
        
        Remark:
        s Returns zero if property value undefined or is not an integer
        type.
        """
        ...
    
    def GetString(self: MSPyMstnPlatform.PlotPropValue) -> str:
        """
        Gets the property value as a string.
        
        Remark:
        s Returns NULL if property value undefined or is not a string
        type.
        """
        ...
    
    def GetType(self: MSPyMstnPlatform.PlotPropValue) -> MSPyMstnPlatform.PlotPropValueType:
        """
        Gets the property value type.
        """
        ...
    
    def IsValid(self: MSPyMstnPlatform.PlotPropValue) -> bool:
        """
        True if the property value is defined.
        """
        ...
    
    def ToString(self: MSPyMstnPlatform.PlotPropValue, str: MSPyBentley.WString) -> None:
        """
        Converts the property value to a string.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.PlotPropValue) -> None
        
        Default constructor.
        
        2. __init__(self: MSPyMstnPlatform.PlotPropValue, value: int) -> None
        
        Constructs from an integer value.
        
        3. __init__(self: MSPyMstnPlatform.PlotPropValue, value: float) -> None
        
        Constructs from an double value.
        
        4. __init__(self: MSPyMstnPlatform.PlotPropValue, value: str) -> None
        
        Constructs from a string value.
        """
        ...
    
    @staticmethod
    def swap(a: MSPyMstnPlatform.PlotPropValue, b: MSPyMstnPlatform.PlotPropValue) -> None:
        """
        Swaps two PlotPropValue instances.
        """
        ...
    
class PlotPropValueType:
    """
    Members:
    
    eUndefined
    
    eInteger
    
    eDouble
    
    eString
    """

    def __init__(self: MSPyMstnPlatform.PlotPropValueType, value: int) -> None:
        ...
    
    eDouble: PlotPropValueType
    
    eInteger: PlotPropValueType
    
    eString: PlotPropValueType
    
    eUndefined: PlotPropValueType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotPropValueType) -> int:
        ...
    
class PlotRasterCompr:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def format(self: MSPyMstnPlatform.PlotRasterCompr) -> int:
        ...
    @format.setter
    def format(self: MSPyMstnPlatform.PlotRasterCompr, arg0: int) -> None:
        ...
    
    @property
    def methods(arg0: MSPyMstnPlatform.PlotRasterCompr) -> list:
        ...
    @methods.setter
    def methods(arg0: MSPyMstnPlatform.PlotRasterCompr, arg1: MSPyBentleyGeom.Int64Array) -> None:
        ...
    
class PlotRasterFormat:
    """
    Members:
    
    eBitMap
    
    eByteMap
    
    eRGBSeparate
    
    eRGBA
    """

    def __init__(self: MSPyMstnPlatform.PlotRasterFormat, value: int) -> None:
        ...
    
    eBitMap: PlotRasterFormat
    
    eByteMap: PlotRasterFormat
    
    eRGBA: PlotRasterFormat
    
    eRGBSeparate: PlotRasterFormat
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotRasterFormat) -> int:
        ...
    
class PlotRasterOptions:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def brightness(self: MSPyMstnPlatform.PlotRasterOptions) -> float:
        ...
    @brightness.setter
    def brightness(self: MSPyMstnPlatform.PlotRasterOptions, arg0: float) -> None:
        ...
    
    @property
    def contrast(self: MSPyMstnPlatform.PlotRasterOptions) -> float:
        ...
    @contrast.setter
    def contrast(self: MSPyMstnPlatform.PlotRasterOptions, arg0: float) -> None:
        ...
    
    @property
    def pixelsPerInch(self: MSPyMstnPlatform.PlotRasterOptions) -> float:
        ...
    @pixelsPerInch.setter
    def pixelsPerInch(self: MSPyMstnPlatform.PlotRasterOptions, arg0: float) -> None:
        ...
    
    @property
    def quality(self: MSPyMstnPlatform.PlotRasterOptions) -> float:
        ...
    @quality.setter
    def quality(self: MSPyMstnPlatform.PlotRasterOptions, arg0: float) -> None:
        ...
    
class PlotRasterTransparency:
    """
    Members:
    
    eNone
    
    eColor
    
    eMask
    """

    def __init__(self: MSPyMstnPlatform.PlotRasterTransparency, value: int) -> None:
        ...
    
    eColor: PlotRasterTransparency
    
    eMask: PlotRasterTransparency
    
    eNone: PlotRasterTransparency
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotRasterTransparency) -> int:
        ...
    
class PlotReqOrientation:
    """
    Members:
    
    eUndefined
    
    ePortrait
    
    eLandscape
    """

    def __init__(self: MSPyMstnPlatform.PlotReqOrientation, value: int) -> None:
        ...
    
    eLandscape: PlotReqOrientation
    
    ePortrait: PlotReqOrientation
    
    eUndefined: PlotReqOrientation
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotReqOrientation) -> int:
        ...
    
class PlotRotateDir:
    """
    Members:
    
    eCCW
    
    eCW
    
    eNone
    
    eRot180
    """

    def __init__(self: MSPyMstnPlatform.PlotRotateDir, value: int) -> None:
        ...
    
    eCCW: PlotRotateDir
    
    eCW: PlotRotateDir
    
    eNone: PlotRotateDir
    
    eRot180: PlotRotateDir
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotRotateDir) -> int:
        ...
    
class PlotStartStopCmd:
    """
    Members:
    
    eNone
    
    ePause
    
    eEject
    
    eReplot
    
    eBeep
    """

    def __init__(self: MSPyMstnPlatform.PlotStartStopCmd, value: int) -> None:
        ...
    
    eBeep: PlotStartStopCmd
    
    eEject: PlotStartStopCmd
    
    eNone: PlotStartStopCmd
    
    ePause: PlotStartStopCmd
    
    eReplot: PlotStartStopCmd
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotStartStopCmd) -> int:
        ...
    
class PlotTagBool:
    """
    Members:
    
    eIsSystemPrinter
    
    eDrawBorder
    
    ePrintPoints
    
    eAutoIncExt
    
    eAutoOverwritePlotFile
    
    eAutoOpenPlotFile
    
    eAutoCenter
    
    ePrintFence
    
    eUseDefaultScale
    
    ePrintBorderTime
    
    ePrintBorderFile
    
    ePrintBorderModel
    
    ePrintBorderOutline
    
    eBorderOutlineDisabled
    
    eSysprinterFullSheet
    
    eNoPlotFile
    
    eRasterized
    
    eIsPrintSetCapable
    
    eHonorRasterTransparency
    
    eUseModelForDefaultPlotFileName
    
    eAcceptsNonTransparentBitmaps
    
    ePostPlotBorderText
    
    eEnableOrientation
    
    eRasterizeUsingBands
    
    eUseSimpleGdi
    
    eOptimizeRasterColorDepth
    
    eRgbRasterOnly
    
    eRgbaRasterOnly
    
    eBitmapRasterOnly
    
    eStrokeRaster
    
    eNoPlotOrigin
    
    eSupportsPlotTo3d
    
    eIsPlotTo3d
    
    eStrokeBezierCurves
    
    eExportRenditionId
    
    eExportRenditionData
    
    eDisablePathSupport
    
    eCropRasterTransparency
    
    eEnableDriverClipping
    
    eSupportsCopies
    
    eMergeExportedRaster
    
    eEnablePssPassThru
    
    eEnableOutputWidth
    
    eAllowZeroPenWidth
    
    eUseScreenedVectors
    
    eSupportsExtLineStyles
    
    eSupportsPlotMetadata
    
    eSupportsOutputOle
    
    eSupportsOutputPdf
    
    eEnableCurrentForm
    
    eUseLocalTempFileForPseudoOutputFile
    
    eAllowBinaryRaster
    
    eSupportsNoneForm
    """

    def __init__(self: MSPyMstnPlatform.PlotTagBool, value: int) -> None:
        ...
    
    eAcceptsNonTransparentBitmaps: PlotTagBool
    
    eAllowBinaryRaster: PlotTagBool
    
    eAllowZeroPenWidth: PlotTagBool
    
    eAutoCenter: PlotTagBool
    
    eAutoIncExt: PlotTagBool
    
    eAutoOpenPlotFile: PlotTagBool
    
    eAutoOverwritePlotFile: PlotTagBool
    
    eBitmapRasterOnly: PlotTagBool
    
    eBorderOutlineDisabled: PlotTagBool
    
    eCropRasterTransparency: PlotTagBool
    
    eDisablePathSupport: PlotTagBool
    
    eDrawBorder: PlotTagBool
    
    eEnableCurrentForm: PlotTagBool
    
    eEnableDriverClipping: PlotTagBool
    
    eEnableOrientation: PlotTagBool
    
    eEnableOutputWidth: PlotTagBool
    
    eEnablePssPassThru: PlotTagBool
    
    eExportRenditionData: PlotTagBool
    
    eExportRenditionId: PlotTagBool
    
    eHonorRasterTransparency: PlotTagBool
    
    eIsPlotTo3d: PlotTagBool
    
    eIsPrintSetCapable: PlotTagBool
    
    eIsSystemPrinter: PlotTagBool
    
    eMergeExportedRaster: PlotTagBool
    
    eNoPlotFile: PlotTagBool
    
    eNoPlotOrigin: PlotTagBool
    
    eOptimizeRasterColorDepth: PlotTagBool
    
    ePostPlotBorderText: PlotTagBool
    
    ePrintBorderFile: PlotTagBool
    
    ePrintBorderModel: PlotTagBool
    
    ePrintBorderOutline: PlotTagBool
    
    ePrintBorderTime: PlotTagBool
    
    ePrintFence: PlotTagBool
    
    ePrintPoints: PlotTagBool
    
    eRasterizeUsingBands: PlotTagBool
    
    eRasterized: PlotTagBool
    
    eRgbRasterOnly: PlotTagBool
    
    eRgbaRasterOnly: PlotTagBool
    
    eStrokeBezierCurves: PlotTagBool
    
    eStrokeRaster: PlotTagBool
    
    eSupportsCopies: PlotTagBool
    
    eSupportsExtLineStyles: PlotTagBool
    
    eSupportsNoneForm: PlotTagBool
    
    eSupportsOutputOle: PlotTagBool
    
    eSupportsOutputPdf: PlotTagBool
    
    eSupportsPlotMetadata: PlotTagBool
    
    eSupportsPlotTo3d: PlotTagBool
    
    eSysprinterFullSheet: PlotTagBool
    
    eUseDefaultScale: PlotTagBool
    
    eUseLocalTempFileForPseudoOutputFile: PlotTagBool
    
    eUseModelForDefaultPlotFileName: PlotTagBool
    
    eUseScreenedVectors: PlotTagBool
    
    eUseSimpleGdi: PlotTagBool
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagBool) -> int:
        ...
    
class PlotTagDPoint2d:
    """
    Members:
    
    eDeviceResolution
    
    eApparentResolution
    
    ePlotOrigin
    
    ePlotSize
    
    ePlotScale
    
    eScaleAdjustmentFactor
    
    eBorderTextOffsetCM
    
    eP1
    
    eP2
    
    eEffectivePlotScale
    """

    def __init__(self: MSPyMstnPlatform.PlotTagDPoint2d, value: int) -> None:
        ...
    
    eApparentResolution: PlotTagDPoint2d
    
    eBorderTextOffsetCM: PlotTagDPoint2d
    
    eDeviceResolution: PlotTagDPoint2d
    
    eEffectivePlotScale: PlotTagDPoint2d
    
    eP1: PlotTagDPoint2d
    
    eP2: PlotTagDPoint2d
    
    ePlotOrigin: PlotTagDPoint2d
    
    ePlotScale: PlotTagDPoint2d
    
    ePlotSize: PlotTagDPoint2d
    
    eScaleAdjustmentFactor: PlotTagDPoint2d
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagDPoint2d) -> int:
        ...
    
class PlotTagDPoint3d:
    """
    Members:
    
    eViewOriginUors
    
    eViewDeltaUors
    """

    def __init__(self: MSPyMstnPlatform.PlotTagDPoint3d, value: int) -> None:
        ...
    
    eViewDeltaUors: PlotTagDPoint3d
    
    eViewOriginUors: PlotTagDPoint3d
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagDPoint3d) -> int:
        ...
    
class PlotTagDbl:
    """
    Members:
    
    eCurveTolerance
    
    eBorderTextHeightCM
    
    eBorderWidthCM
    
    eMiterLimit
    
    eDefaultScale
    
    eCurrentReferenceScale
    
    eMaxMiterAngleRads
    
    ePlotRotationRads
    
    eMinimumLevelOfDetail
    """

    def __init__(self: MSPyMstnPlatform.PlotTagDbl, value: int) -> None:
        ...
    
    eBorderTextHeightCM: PlotTagDbl
    
    eBorderWidthCM: PlotTagDbl
    
    eCurrentReferenceScale: PlotTagDbl
    
    eCurveTolerance: PlotTagDbl
    
    eDefaultScale: PlotTagDbl
    
    eMaxMiterAngleRads: PlotTagDbl
    
    eMinimumLevelOfDetail: PlotTagDbl
    
    eMiterLimit: PlotTagDbl
    
    ePlotRotationRads: PlotTagDbl
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagDbl) -> int:
        ...
    
class PlotTagFileSpec:
    """
    Members:
    
    ePrologFile
    
    ePrefixFile
    
    eSuffixFile
    
    eRenderingAttributesFile
    """

    def __init__(self: MSPyMstnPlatform.PlotTagFileSpec, value: int) -> None:
        ...
    
    ePrefixFile: PlotTagFileSpec
    
    ePrologFile: PlotTagFileSpec
    
    eRenderingAttributesFile: PlotTagFileSpec
    
    eSuffixFile: PlotTagFileSpec
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagFileSpec) -> int:
        ...
    
class PlotTagInt:
    """
    Members:
    
    eNumPens
    
    eNumForms
    
    eHpglQuality
    
    eDefaultNumCopies
    
    eMoveMode
    
    ePlotDriver
    
    ePlotterModel
    
    eDefaultLineCap
    
    eDefaultLineJoin
    
    eStartPlotCmd
    
    eEndPlotCmd
    
    eBorderPen
    
    eFencePen
    
    eDisplayUnits
    
    ePlotViewIndex
    
    eRollOrientation
    
    eRequiredOrientation
    
    ePlotFileHandle
    
    eDesiredColorMode
    
    eHighestColorMode
    
    eLevelOfDetailMode
    
    eSysprinterOrientation
    
    eSysprinterNumCopies
    
    eSysprinterMaxCopies
    
    eCurrentRenditionId
    
    eRenditionDataSize
    
    eVisible
    """

    def __init__(self: MSPyMstnPlatform.PlotTagInt, value: int) -> None:
        ...
    
    eBorderPen: PlotTagInt
    
    eCurrentRenditionId: PlotTagInt
    
    eDefaultLineCap: PlotTagInt
    
    eDefaultLineJoin: PlotTagInt
    
    eDefaultNumCopies: PlotTagInt
    
    eDesiredColorMode: PlotTagInt
    
    eDisplayUnits: PlotTagInt
    
    eEndPlotCmd: PlotTagInt
    
    eFencePen: PlotTagInt
    
    eHighestColorMode: PlotTagInt
    
    eHpglQuality: PlotTagInt
    
    eLevelOfDetailMode: PlotTagInt
    
    eMoveMode: PlotTagInt
    
    eNumForms: PlotTagInt
    
    eNumPens: PlotTagInt
    
    ePlotDriver: PlotTagInt
    
    ePlotFileHandle: PlotTagInt
    
    ePlotViewIndex: PlotTagInt
    
    ePlotterModel: PlotTagInt
    
    eRenditionDataSize: PlotTagInt
    
    eRequiredOrientation: PlotTagInt
    
    eRollOrientation: PlotTagInt
    
    eStartPlotCmd: PlotTagInt
    
    eSysprinterMaxCopies: PlotTagInt
    
    eSysprinterNumCopies: PlotTagInt
    
    eSysprinterOrientation: PlotTagInt
    
    eVisible: PlotTagInt
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagInt) -> int:
        ...
    
class PlotTagIsDefinedInPltcfg:
    """
    Members:
    
    eDefaultPrinter
    
    eDefaultForm
    
    eDefaultTray
    """

    def __init__(self: MSPyMstnPlatform.PlotTagIsDefinedInPltcfg, value: int) -> None:
        ...
    
    eDefaultForm: PlotTagIsDefinedInPltcfg
    
    eDefaultPrinter: PlotTagIsDefinedInPltcfg
    
    eDefaultTray: PlotTagIsDefinedInPltcfg
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagIsDefinedInPltcfg) -> int:
        ...
    
class PlotTagPtr:
    """
    Members:
    
    eDriverDllHmodule
    
    eCurrentRenditionData
    """

    def __init__(self: MSPyMstnPlatform.PlotTagPtr, value: int) -> None:
        ...
    
    eCurrentRenditionData: PlotTagPtr
    
    eDriverDllHmodule: PlotTagPtr
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagPtr) -> int:
        ...
    
class PlotTagStr:
    """
    Members:
    
    eBorderFontName
    
    eDefaultOutputFile
    
    eDriverName
    
    eSysprinterName
    
    eSysprinterFormName
    
    eSysprinterTrayName
    
    eDefaultExtension
    
    eBorderComment
    
    eDefaultPenTableFile
    
    eDefaultDesignScriptFile
    
    ePrintStyleName
    
    eConfigFileDisplayLabel
    
    eDriverDisplayName
    """

    def __init__(self: MSPyMstnPlatform.PlotTagStr, value: int) -> None:
        ...
    
    eBorderComment: PlotTagStr
    
    eBorderFontName: PlotTagStr
    
    eConfigFileDisplayLabel: PlotTagStr
    
    eDefaultDesignScriptFile: PlotTagStr
    
    eDefaultExtension: PlotTagStr
    
    eDefaultOutputFile: PlotTagStr
    
    eDefaultPenTableFile: PlotTagStr
    
    eDriverDisplayName: PlotTagStr
    
    eDriverName: PlotTagStr
    
    ePrintStyleName: PlotTagStr
    
    eSysprinterFormName: PlotTagStr
    
    eSysprinterName: PlotTagStr
    
    eSysprinterTrayName: PlotTagStr
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagStr) -> int:
        ...
    
class PlotTagTransform:
    """
    Members:
    
    eLocalToWorld
    
    eLocalToPlot
    
    eWorldToPlot
    
    eWorldToView
    
    eViewToPlot
    """

    def __init__(self: MSPyMstnPlatform.PlotTagTransform, value: int) -> None:
        ...
    
    eLocalToPlot: PlotTagTransform
    
    eLocalToWorld: PlotTagTransform
    
    eViewToPlot: PlotTagTransform
    
    eWorldToPlot: PlotTagTransform
    
    eWorldToView: PlotTagTransform
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagTransform) -> int:
        ...
    
class PlotTagTriState:
    """
    Members:
    
    eReplTransMaskWithTransColor
    """

    def __init__(self: MSPyMstnPlatform.PlotTagTriState, value: int) -> None:
        ...
    
    eReplTransMaskWithTransColor: PlotTagTriState
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTagTriState) -> int:
        ...
    
class PlotTriState:
    """
    Members:
    
    eFalse
    
    eTrue
    
    eUndefined
    """

    def __init__(self: MSPyMstnPlatform.PlotTriState, value: int) -> None:
        ...
    
    eFalse: PlotTriState
    
    eTrue: PlotTriState
    
    eUndefined: PlotTriState
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotTriState) -> int:
        ...
    
class PlotUnits:
    """
    Members:
    
    eUndefined
    
    eDefault
    
    em
    
    edm
    
    ecm
    
    emm
    
    eft
    
    ein
    
    edots
    
    etenthsmm
    """

    def __init__(self: MSPyMstnPlatform.PlotUnits, value: int) -> None:
        ...
    
    eDefault: PlotUnits
    
    eUndefined: PlotUnits
    
    ecm: PlotUnits
    
    edm: PlotUnits
    
    edots: PlotUnits
    
    eft: PlotUnits
    
    ein: PlotUnits
    
    em: PlotUnits
    
    emm: PlotUnits
    
    etenthsmm: PlotUnits
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotUnits) -> int:
        ...
    
class PlotterModel:
    """
    Members:
    
    eUndefined
    
    eHPLJET3
    
    eSysprinter
    
    eSysprinterMetafile
    """

    def __init__(self: MSPyMstnPlatform.PlotterModel, value: int) -> None:
        ...
    
    eHPLJET3: PlotterModel
    
    eSysprinter: PlotterModel
    
    eSysprinterMetafile: PlotterModel
    
    eUndefined: PlotterModel
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PlotterModel) -> int:
        ...
    
class PlotterRef:
    """
    None
    """

    def Copy(self: MSPyMstnPlatform.PlotterRef) -> MSPyMstnPlatform.PlotterRef:
        """
        Copy the plotter instance.
        """
        ...
    
    @staticmethod
    def Create() -> MSPyMstnPlatform.PlotterRef:
        """
        Create an unintialized plotter instance.
        
        Remark:
        s Callers must initialize before use.
        """
        ...
    
    def GetP(self: MSPyMstnPlatform.PlotterRef) -> MSPyMstnPlatform.IPlotter:
        ...
    
    def __init__(self: MSPyMstnPlatform.PlotterRef) -> None:
        ...
    
class PrintDescriptionRef:
    """
    None
    """

    def Copy(self: MSPyMstnPlatform.PrintDescriptionRef, copyPlotter: bool) -> MSPyMstnPlatform.PrintDescriptionRef:
        """
        Copy the print definition instance.
        
        :param copyPlotter:
        If False, print definitions will share plotter instance.
        """
        ...
    
    @staticmethod
    def Create() -> MSPyMstnPlatform.PrintDescriptionRef:
        """
        Create an unintialized print description instance.
        
        Remark:
        s Callers must initialize before use.
        """
        ...
    
    def GetP(self: MSPyMstnPlatform.PrintDescriptionRef) -> MSPyMstnPlatform.IPrintDescription:
        ...
    
    def __init__(self: MSPyMstnPlatform.PrintDescriptionRef) -> None:
        ...
    
class PrintStyleName:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def name(self: MSPyMstnPlatform.PrintStyleName) -> MSPyBentley.WString:
        ...
    @name.setter
    def name(self: MSPyMstnPlatform.PrintStyleName, arg0: MSPyBentley.WString) -> None:
        ...
    
    @property
    def sourceFileName(self: MSPyMstnPlatform.PrintStyleName) -> MSPyBentley.BeFileName:
        ...
    @sourceFileName.setter
    def sourceFileName(self: MSPyMstnPlatform.PrintStyleName, arg0: MSPyBentley.BeFileName) -> None:
        ...
    
class PrintStyleNameArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.PrintStyleNameArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.PrintStyleNameArray, arg0: MSPyMstnPlatform.PrintStyleNameArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.PrintStyleNameArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.PrintStyleNameArray, x: MSPyMstnPlatform.PrintStyleName) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.PrintStyleNameArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.PrintStyleNameArray, L: MSPyMstnPlatform.PrintStyleNameArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.PrintStyleNameArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.PrintStyleNameArray, i: int, x: MSPyMstnPlatform.PrintStyleName) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.PrintStyleNameArray) -> MSPyMstnPlatform.PrintStyleName
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.PrintStyleNameArray, i: int) -> MSPyMstnPlatform.PrintStyleName
        
        Remove and return the item at index ``i``
        """
        ...
    
class PropPubMethod:
    """
    Members:
    
    eNone
    
    eAll
    
    ePropFilterFile
    """

    def __init__(self: MSPyMstnPlatform.PropPubMethod, value: int) -> None:
        ...
    
    eAll: PropPubMethod
    
    eNone: PropPubMethod
    
    ePropFilterFile: PropPubMethod
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PropPubMethod) -> int:
        ...
    
class PyCExprValue:
    """
    None
    """

    def GetDoubleValue(self: MSPyMstnPlatform.PyCExprValue) -> float:
        ...
    
    def GetLongValue(self: MSPyMstnPlatform.PyCExprValue) -> int:
        ...
    
    def GetUtf8StringValue(self: MSPyMstnPlatform.PyCExprValue) -> MSPyBentley.Utf8String:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.PyCExprValue) -> MSPyMstnPlatform.PyCExprValueType:
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.PyCExprValue, arg0: float) -> None
        
        2. __init__(self: MSPyMstnPlatform.PyCExprValue, arg0: int) -> None
        
        3. __init__(self: MSPyMstnPlatform.PyCExprValue, arg0: str) -> None
        """
        ...
    
class PyCExprValueType:
    """
    Members:
    
    ePy_CEXPR_TYPE_POINTER
    
    ePy_CEXPR_TYPE_LONG
    
    ePy_CEXPR_TYPE_ULONG
    
    ePy_CEXPR_TYPE_DOUBLE
    
    ePy_CEXPR_TYPE_LONG64
    """

    def __init__(self: MSPyMstnPlatform.PyCExprValueType, value: int) -> None:
        ...
    
    ePy_CEXPR_TYPE_DOUBLE: PyCExprValueType
    
    ePy_CEXPR_TYPE_LONG: PyCExprValueType
    
    ePy_CEXPR_TYPE_LONG64: PyCExprValueType
    
    ePy_CEXPR_TYPE_POINTER: PyCExprValueType
    
    ePy_CEXPR_TYPE_ULONG: PyCExprValueType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PyCExprValueType) -> int:
        ...
    
class PyCExpression:
    """
    None
    """

    @staticmethod
    def GetCExpressionValue(expression: str, taskId: str, value: MSPyMstnPlatform.PyCExprValue) -> int:
        ...
    
    @staticmethod
    def SetCExpressionValue(expression: str, value: MSPyMstnPlatform.PyCExprValue, taskId: str) -> int:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyCadInputMessage:
    """
    None
    """

    def GetCommandKeyin(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyBentley.WString:
        ...
    
    def GetCursorButton(self: MSPyMstnPlatform.PyCadInputMessage) -> int:
        ...
    
    def GetInputType(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyMstnPlatform.CadInputType:
        ...
    
    def GetKeyin(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyBentley.WString:
        ...
    
    def GetPoint(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    def GetScreenPoint(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyBentleyGeom.DPoint3d:
        ...
    
    def GetView(self: MSPyMstnPlatform.PyCadInputMessage) -> MSPyDgnPlatform.ViewInfo:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyCadInputQueue:
    """
    None
    """

    @staticmethod
    def AttachQtToolSetting(hQtWin: int) -> None:
        ...
    
    @staticmethod
    def AttachTkinterToolSetting(hTkWin: int) -> None:
        ...
    
    @staticmethod
    def GetInput(type1: MSPyMstnPlatform.CadInputType, type2: MSPyMstnPlatform.CadInputType, type3: MSPyMstnPlatform.CadInputType, type4: MSPyMstnPlatform.CadInputType) -> MSPyMstnPlatform.PyCadInputMessage:
        """
        @Description Used to wait for the user to enter input in MicroStation's key-in area or one of MicroStation's views.
        @Remarks GetInput does not return until the user has entered the input of the appropriate type.
        Accepted input is limited to the types specified in the optional arguments. All types of input
        are allowed if no arguments are specified.
        P>Do not call GetInput from an event handler of a modal dialog box. When this happens, neither MicroStation nor the
        dialog box can get any input.</P>
        <P>While there is an outstanding call to ~mGetInput, the Visual Basic Editor does not accept input. Therefore,
        while a program is blocked at a call to ~mGetInput, it is impossible to use the Visual Basic Editor to set or clear breakpoints, edit source
        code, terminate the program, add variables to the watch area, etc.<P>
        @Remarks There can only be one outstanding call to GetInput at a time. GetInput raises an error if it is called while there is another
        """
        ...
    
    @staticmethod
    def PythonMainLoop() -> None:
        ...
    
    @staticmethod
    def SendCommand(commandStr: str) -> None:
        """
        @Description This statement sends the string to MicroStation's input queue. The string is to be interpreted as a command.
        @Param Command A key-in that invokes a MicroStation command.
        """
        ...
    
    @staticmethod
    def SendDataPoint(point: MSPyBentleyGeom.DPoint3d, view: int, qualifiers: int = 0) -> None:
        """
        @Description Used to send a datapoint to MicroStation. ~mSendDataPoint does not return until MicroStation
        has processed the datapoint. @Param[in] point is the point. @Param[in]view is a view index.
        """
        ...
    
    @staticmethod
    def SendDataPointForLocate(element: MSPyDgnPlatform.ElementRefBase, point: MSPyBentleyGeom.DPoint3d) -> None:
        """
        @Description Selects an element for the current command to operate on.
        @Param element Must refer to an element that is already in the model. It cannot refer to a newly created element that has
        not been added to the model.
        @Param DataPoint The data point to send
        """
        ...
    
    @staticmethod
    def SendKeyin(keyinStr: str) -> None:
        """
        @Description Used to send a key-in to MicroStation. ~mSendKeyin does not return until MicroStation
        has processed the key-in. @Param[in] keyinStr is a keyin string.
        """
        ...
    
    @staticmethod
    def SendKeyinToPython(keyinStr: str) -> None:
        ...
    
    @staticmethod
    def SendReset() -> None:
        """
        @Description Used to send a reset to MicroStation. ~mSendReset does not return until MicroStation
        has processed the reset.
        """
        ...
    
    @staticmethod
    def SequeueLastInput(position: MSPyMstnPlatform.MSInputQueuePos) -> None:
        """
        @Description The method sends the last input that was received by GetInput
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyCommandState:
    """
    None
    """

    @staticmethod
    def StartDefaultCommand() -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyDocumentOpenDialogParams:
    """
    None
    """

    @staticmethod
    def Create() -> MSPyMstnPlatform.PyDocumentOpenDialogParams:
        ...
    
    @property
    def DefFileId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @DefFileId.setter
    def DefFileId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def DefRscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @DefRscFileHandle.setter
    def DefRscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def DefSeedDir(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DefSeedDir.setter
    def DefSeedDir(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DefSeedFileId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @DefSeedFileId.setter
    def DefSeedFileId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def DefSeedFileName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DefSeedFileName.setter
    def DefSeedFileName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DefSeedFilter(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DefSeedFilter.setter
    def DefSeedFilter(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DefaultDir(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DefaultDir.setter
    def DefaultDir(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DefaultFilter(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DefaultFilter.setter
    def DefaultFilter(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DialogId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @DialogId.setter
    def DialogId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def DialogTitle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DialogTitle.setter
    def DialogTitle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def DirCfgVar(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @DirCfgVar.setter
    def DirCfgVar(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def FilterInfoString(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @FilterInfoString.setter
    def FilterInfoString(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def FilterRscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @FilterRscFileHandle.setter
    def FilterRscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def FilterStringListId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @FilterStringListId.setter
    def FilterStringListId(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    def GetDefFileId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetDefRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetDefSeedDir(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDefSeedFileId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetDefSeedFileName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDefSeedFilter(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDefaultDir(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDefaultFilter(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDialogId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetDialogTitle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetDirCfgVar(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetFilterInfoString(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetFilterRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetFilterStringListId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetOpenCreate(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetPostIncludeCADFileOpenFilters(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> bool:
        ...
    
    def GetPreIncludeCADFileOpenFilters(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> bool:
        ...
    
    def GetRequiredRights(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    
    def GetSuggestedFileName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetWorkSetName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    def GetWorkSpaceName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    
    @property
    def OpenCreate(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @OpenCreate.setter
    def OpenCreate(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def PostIncludeCADFileOpenFilters(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> bool:
        ...
    @PostIncludeCADFileOpenFilters.setter
    def PostIncludeCADFileOpenFilters(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: bool) -> None:
        ...
    
    @property
    def PreIncludeCADFileOpenFilters(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> bool:
        ...
    @PreIncludeCADFileOpenFilters.setter
    def PreIncludeCADFileOpenFilters(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: bool) -> None:
        ...
    
    @property
    def RequiredRights(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @RequiredRights.setter
    def RequiredRights(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    @property
    def RscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> int:
        ...
    @RscFileHandle.setter
    def RscFileHandle(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: int) -> None:
        ...
    
    def SetDefFileId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileId: int) -> None:
        ...
    
    def SetDefRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileHandle: int) -> None:
        ...
    
    def SetDefSeedDir(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, seedDir: MSPyBentley.WString) -> None:
        ...
    
    def SetDefSeedFileId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileId: int) -> None:
        ...
    
    def SetDefSeedFileName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileName: MSPyBentley.WString) -> None:
        ...
    
    def SetDefSeedFilter(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, seedFilter: MSPyBentley.WString) -> None:
        ...
    
    def SetDefaultDir(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, defDir: MSPyBentley.WString) -> None:
        ...
    
    def SetDefaultFilter(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, filter: MSPyBentley.WString) -> None:
        ...
    
    def SetDialogId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, dlgId: int) -> None:
        ...
    
    def SetDialogTitle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, title: MSPyBentley.WString) -> None:
        ...
    
    def SetDirCfgVar(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, cfgVar: MSPyBentley.WString) -> None:
        ...
    
    def SetFilterInfoString(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, infoString: MSPyBentley.WString) -> None:
        ...
    
    def SetFilterRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileHandle: int) -> None:
        ...
    
    def SetFilterStringListId(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, listId: int) -> None:
        ...
    
    def SetOpenCreate(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, openCreate: int) -> None:
        ...
    
    def SetPostIncludeCADFileOpenFilters(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, isOn: bool) -> None:
        ...
    
    def SetPreIncludeCADFileOpenFilters(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, isOn: bool) -> None:
        ...
    
    def SetRequiredRights(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, rights: int) -> None:
        ...
    
    def SetRscFileHandle(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, h: int) -> None:
        ...
    
    def SetSuggestedFileName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, fileName: MSPyBentley.WString) -> None:
        ...
    
    def SetWorkSetName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, name: MSPyBentley.WString) -> None:
        ...
    
    def SetWorkSpaceName(self: MSPyMstnPlatform.PyDocumentOpenDialogParams, name: MSPyBentley.WString) -> None:
        ...
    
    @property
    def SuggestedFileName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @SuggestedFileName.setter
    def SuggestedFileName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def WorkSetName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @WorkSetName.setter
    def WorkSetName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def WorkSpaceName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams) -> MSPyBentley.WString:
        ...
    @WorkSpaceName.setter
    def WorkSpaceName(arg0: MSPyMstnPlatform.PyDocumentOpenDialogParams, arg1: MSPyBentley.WString) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyEventsHandler:
    """
    None
    """

    @staticmethod
    def AddModalDialogEventsHandler(eventHandler: MSPyMstnPlatform.IPyModalDialogEvents) -> None:
        ...
    
    @staticmethod
    def RemoveModalDialogEventsHandler(eventHandler: MSPyMstnPlatform.IPyModalDialogEvents) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class PyMsdDialogBoxResult:
    """
    Members:
    
    ePyMsdDialogBoxResultApply
    
    ePyMsdDialogBoxResultReset
    
    ePyMsdDialogBoxResultOK
    
    ePyMsdDialogBoxResultCancel
    
    ePyMsdDialogBoxResultDefault
    
    ePyMsdDialogBoxResultYes
    
    ePyMsdDialogBoxResultNo
    
    ePyMsdDialogBoxResultRetry
    
    ePyMsdDialogBoxResultStop
    
    ePyMsdDialogBoxResultHelp
    
    ePyMsdDialogBoxResultYesToAll
    """

    def __init__(self: MSPyMstnPlatform.PyMsdDialogBoxResult, value: int) -> None:
        ...
    
    ePyMsdDialogBoxResultApply: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultCancel: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultDefault: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultHelp: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultNo: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultOK: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultReset: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultRetry: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultStop: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultYes: PyMsdDialogBoxResult
    
    ePyMsdDialogBoxResultYesToAll: PyMsdDialogBoxResult
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.PyMsdDialogBoxResult) -> int:
        ...
    
class PythonKeyinManager:
    """
    None
    """

    @staticmethod
    def GetManager() -> MSPyMstnPlatform.PythonKeyinManager:
        ...
    
    def LoadCommandTableFromXml(self: MSPyMstnPlatform.PythonKeyinManager, pythonFilePath: MSPyBentley.WString, keyInXmlFileName: MSPyBentley.WString) -> MSPyMstnPlatform.CommandTableStatus:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class QueryFeaturesAreaMode:
    """
    Members:
    
    eQueryFeaturesAreaMode_All
    
    eQueryFeaturesAreaMode_Fence
    """

    def __init__(self: MSPyMstnPlatform.QueryFeaturesAreaMode, value: int) -> None:
        ...
    
    eQueryFeaturesAreaMode_All: QueryFeaturesAreaMode
    
    eQueryFeaturesAreaMode_Fence: QueryFeaturesAreaMode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.QueryFeaturesAreaMode) -> int:
        ...
    
class ReferenceOverrideInfo:
    """
    None
    """

    @property
    def FileNameRegex(self: MSPyMstnPlatform.ReferenceOverrideInfo) -> MSPyBentley.WString:
        ...
    @FileNameRegex.setter
    def FileNameRegex(self: MSPyMstnPlatform.ReferenceOverrideInfo, arg0: MSPyBentley.WString) -> None:
        ...
    
    @property
    def IsOn(self: MSPyMstnPlatform.ReferenceOverrideInfo) -> bool:
        ...
    @IsOn.setter
    def IsOn(self: MSPyMstnPlatform.ReferenceOverrideInfo, arg0: bool) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ReferenceOverrideInfoArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ReferenceOverrideInfoArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, arg0: MSPyMstnPlatform.ReferenceOverrideInfoArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, x: MSPyMstnPlatform.ReferenceOverrideInfo) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ReferenceOverrideInfoArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, L: MSPyMstnPlatform.ReferenceOverrideInfoArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, i: int, x: MSPyMstnPlatform.ReferenceOverrideInfo) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.ReferenceOverrideInfoArray) -> MSPyMstnPlatform.ReferenceOverrideInfo
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.ReferenceOverrideInfoArray, i: int) -> MSPyMstnPlatform.ReferenceOverrideInfo
        
        Remove and return the item at index ``i``
        """
        ...
    
class RegionPlaneId:
    """
    None
    """

    @staticmethod
    def Create(*args, **kwargs):
        """
        Overloaded function.
        
        1. Create(eh: MSPyDgnPlatform.ElementHandle, pep: MSPyDgnPlatform.PersistentElementPath, status: MSPyMstnPlatform.GeometryId.Status) -> MSPyMstnPlatform.GeometryId
        
        2. Create(eh: MSPyDgnPlatform.ElementHandle) -> MSPyMstnPlatform.GeometryId
        """
        ...
    
    class DimensionToComponent:
        """
        Members:
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED
        
        eDCM3_DIMENSION_TO_EXTERIOR
        
        eDCM3_DIMENSION_TO_CENTRE_POINT
        
        eDCM3_DIMENSION_TO_AXIS
        
        eDCM3_DIMENSION_TO_PLANE
        
        eDCM3_DIMENSION_TO_SPINE
        
        eDCM3_DIMENSION_TO_APEX
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.DimensionToComponent, value: int) -> None:
            ...
        
        eDCM3_DIMENSION_TO_APEX: DimensionToComponent
        
        eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
        
        eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
        
        eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
        
        eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
        
        eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
        
        eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.DimensionToComponent) -> int:
            ...
        
    @property
    def Element(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    @property
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    @ElementRef.setter
    def ElementRef(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    @property
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId) -> int:
        ...
    @EntityIndex.setter
    def EntityIndex(arg0: MSPyMstnPlatform.GeometryId, arg1: int) -> None:
        ...
    
    class FlagMasks:
        """
        Members:
        
        eFlagMask_ParamX
        
        eFlagMask_ParamY
        
        eFlagMask_EntityIndex
        """
    
        def __init__(self: MSPyMstnPlatform.GeometryId.FlagMasks, value: int) -> None:
            ...
        
        eFlagMask_EntityIndex: FlagMasks
        
        eFlagMask_ParamX: FlagMasks
        
        eFlagMask_ParamY: FlagMasks
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.GeometryId.FlagMasks) -> int:
            ...
        
    def GetElement(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementHandle:
        ...
    
    def GetElementRef(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.ElementRefBase:
        ...
    
    def GetEntityIndex(self: MSPyMstnPlatform.GeometryId) -> int:
        ...
    
    def GetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. GetParameter(self: MSPyMstnPlatform.GeometryId) -> float
        
        2. GetParameter(self: MSPyMstnPlatform.GeometryId, param: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def GetRootPep(self: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    
    def GetRootRange(self: MSPyMstnPlatform.GeometryId, range: MSPyBentleyGeom.DRange3d) -> MSPyDgnPlatform.BentleyStatus:
        ...
    
    def GetStatus(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    
    def GetType(self: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    @property
    def RootPep(arg0: MSPyMstnPlatform.GeometryId) -> MSPyDgnPlatform.PersistentElementPath:
        ...
    @RootPep.setter
    def RootPep(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetElementRef(self: MSPyMstnPlatform.GeometryId, elemRef: MSPyDgnPlatform.ElementRefBase) -> None:
        ...
    
    def SetEntityIndex(self: MSPyMstnPlatform.GeometryId, entityIndex: int) -> None:
        ...
    
    def SetParameter(*args, **kwargs):
        """
        Overloaded function.
        
        1. SetParameter(self: MSPyMstnPlatform.GeometryId, param: float) -> None
        
        2. SetParameter(self: MSPyMstnPlatform.GeometryId, arg0: MSPyBentleyGeom.DPoint2d) -> None
        """
        ...
    
    def SetRootPep(self: MSPyMstnPlatform.GeometryId, pep: MSPyDgnPlatform.PersistentElementPath) -> None:
        ...
    
    def SetStatus(self: MSPyMstnPlatform.GeometryId, status: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Status(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Status:
        ...
    @Status.setter
    def Status(arg0: MSPyMstnPlatform.GeometryId, arg1: MSPyMstnPlatform.GeometryId.Status) -> None:
        ...
    
    @property
    def Type(arg0: MSPyMstnPlatform.GeometryId) -> MSPyMstnPlatform.GeometryId.Type:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    eBCurve: Type
    
    eBRepVertex: Type
    
    eCurve: Type
    
    eCurveArcAxis: Type
    
    eCurvePoint: Type
    
    eDCM3_DIMENSION_TO_APEX: DimensionToComponent
    
    eDCM3_DIMENSION_TO_AXIS: DimensionToComponent
    
    eDCM3_DIMENSION_TO_CENTRE_POINT: DimensionToComponent
    
    eDCM3_DIMENSION_TO_EXTERIOR: DimensionToComponent
    
    eDCM3_DIMENSION_TO_NOT_SPECIFIED: DimensionToComponent
    
    eDCM3_DIMENSION_TO_PLANE: DimensionToComponent
    
    eDCM3_DIMENSION_TO_SPINE: DimensionToComponent
    
    eDCM3_G_FIXED: Status
    
    eDCM3_G_NOT_CHANGED: Status
    
    eDCM3_G_NOT_CONSISTENT: Status
    
    eDCM3_G_NOT_CONSISTENT_DIMENSIONS: Status
    
    eDCM3_G_NOT_CONSISTENT_OTHER: Status
    
    eDCM3_G_NOT_CONSISTENT_UNKNOWN: Status
    
    eDCM3_G_OVER_DEFINED: Status
    
    eDCM3_G_UNDER_DEFINED: Status
    
    eDCM3_G_UNKNOWN: Status
    
    eDCM3_G_WELL_DEFINED: Status
    
    eDCM3_G_WITHIN_BOUNDS: Status
    
    eEdge: Type
    
    eEdgeArcAxis: Type
    
    eElement: Type
    
    eFace: Type
    
    eFaceAxis: Type
    
    eFlagMask_EntityIndex: FlagMasks
    
    eFlagMask_ParamX: FlagMasks
    
    eFlagMask_ParamY: FlagMasks
    
    eInvalidElement: Type
    
    eRegionPlane: Type
    
def RegisterIPrinterDriver(printerDriver: MSPyMstnPlatform.IPrinterDriverBase) -> None:
    ...

class RevolveSettings:
    """
    None
    """

    def SetAngle(self: MSPyMstnPlatform.RevolveSettings, angle: float) -> None:
        ...
    
    def SetAxis(self: MSPyMstnPlatform.RevolveSettings, axis: MSPyBentleyGeom.DRay3d) -> None:
        ...
    
    def SetAxisDirection(self: MSPyMstnPlatform.RevolveSettings, axisDirection: MSPyBentleyGeom.DVec3d) -> None:
        ...
    
    def SetAxisOrigin(self: MSPyMstnPlatform.RevolveSettings, axisOrigin: MSPyBentleyGeom.DPoint3d) -> None:
        ...
    
    def SetThickness(self: MSPyMstnPlatform.RevolveSettings, thickness: float) -> None:
        ...
    
    def Validate(self: MSPyMstnPlatform.RevolveSettings) -> bool:
        ...
    
    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.RevolveSettings) -> None
        
        2. __init__(self: MSPyMstnPlatform.RevolveSettings, hitPoint: MSPyBentleyGeom.DPoint3d, createSheet: bool, angle: float, axisMode: int, ev: MSPyDgnView.DgnButtonEvent, axisPoint: MSPyDgnView.DgnButtonEvent, curveVector: MSPyBentleyGeom.CurveVector, thicknessMode: int, thickness: float) -> None
        
        3. __init__(self: MSPyMstnPlatform.RevolveSettings, hitPoint: MSPyBentleyGeom.DPoint3d, createSheet: bool, angle: float, axisMode: int, origin: MSPyBentleyGeom.DPoint3d, axisPoint: MSPyBentleyGeom.DPoint3d, curveVector: MSPyBentleyGeom.CurveVector, thicknessMode: int, thickness: float, vp: MSPyDgnPlatform.Viewport) -> None
        """
        ...
    
    @property
    def angle(self: MSPyMstnPlatform.RevolveSettings) -> float:
        ...
    @angle.setter
    def angle(self: MSPyMstnPlatform.RevolveSettings, arg0: float) -> None:
        ...
    
    @property
    def axis(self: MSPyMstnPlatform.RevolveSettings) -> MSPyBentleyGeom.DRay3d:
        ...
    @axis.setter
    def axis(self: MSPyMstnPlatform.RevolveSettings, arg0: MSPyBentleyGeom.DRay3d) -> None:
        ...
    
    @property
    def createSheet(arg0: MSPyMstnPlatform.RevolveSettings) -> bool:
        ...
    @createSheet.setter
    def createSheet(arg0: MSPyMstnPlatform.RevolveSettings, arg1: bool) -> None:
        ...
    
    @property
    def numRules(arg0: MSPyMstnPlatform.RevolveSettings) -> int:
        ...
    @numRules.setter
    def numRules(arg0: MSPyMstnPlatform.RevolveSettings, arg1: int) -> None:
        ...
    
    @property
    def thickness(self: MSPyMstnPlatform.RevolveSettings) -> float:
        ...
    @thickness.setter
    def thickness(self: MSPyMstnPlatform.RevolveSettings, arg0: float) -> None:
        ...
    
    @property
    def thicknessMode(arg0: MSPyMstnPlatform.RevolveSettings) -> int:
        ...
    @thicknessMode.setter
    def thicknessMode(arg0: MSPyMstnPlatform.RevolveSettings, arg1: int) -> None:
        ...
    
class SHPExportSpecification:
    """
    None
    """

    def AddElementTemplateName(self: MSPyMstnPlatform.ExportSpecification, elementTemplateName: MSPyBentley.WString) -> None:
        """
        Add Element Template name to export.
        Call this method for each element template name to export.
        Element Templates are prefixed by group name(s) followed by a backslashes ('\\'). For example: myTemplates\\templateOne
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateName``:
        Element Template name.
        
        Returns:
        None.
        """
        ...
    
    def AddItemTypeName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingItemType: MSPyDgnPlatform.DgnFile, itemTypeLibraryName: MSPyBentley.WString, itemTypeName: MSPyBentley.WString) -> None:
        """
        Add Item Type name to export.
        Call this method for each item type name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``dgnContainingItemType``:
        DgnFile containing the item type.
        
        Parameter ``itemTypeLibraryName``:
        Item type library name.
        
        Parameter ``itemTypeName``:
        Item type name.
        
        Returns:
        None.
        """
        ...
    
    def AddLevelName(self: MSPyMstnPlatform.ExportSpecification, dgnContainingLevel: MSPyDgnPlatform.DgnFile, levelName: MSPyBentley.WString) -> None:
        """
        Add Level name to export.
        Call this method for each level name to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``dgnContainingLevel``:
        DgnFile containing the level.
        
        Parameter ``levelName``:
        Level name.
        
        Returns:
        None.
        """
        ...
    
    @property
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        ...
    @ElementFilterMode.setter
    def ElementFilterMode(arg0: MSPyMstnPlatform.ExportSpecification, arg1: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        ...
    
    def Export(self: MSPyMstnPlatform.SHPExportSpecification) -> tuple:
        """
        Export elements as specified by the export specification.
        
        Parameter ``[out]``:
        The returned Number of elements exported.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @property
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @ExportTextString.setter
    def ExportTextString(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @FacetCurves.setter
    def FacetCurves(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def GetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification) -> MSPyMstnPlatform.ExportElementFilterMode:
        """
        Get the element filter mode of export operation.
        
        Returns :
        ExportElementFilterMode.
        """
        ...
    
    def GetElementTemplateNames(self: MSPyMstnPlatform.ExportSpecification, elementTemplateNames: MSPyBentley.WStringArray) -> None:
        """
        Get the list of element template names to export.
        This method returns the list of element template names associated with the export specification.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByElementTemplate.
        
        Parameter ``elementTemplateNames``:
        List of element template names.
        
        Returns:
        None.
        """
        ...
    
    def GetExportTextString(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Gets the indicator that the element's text string should be exported to the output file.
        
        Returns:
        bool value. Default value is True.
        """
        ...
    
    def GetFacetCurves(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification) -> MSPyDgnPlatform.DgnFolderMoniker:
        """
        Get the folder moniker.
        This method returns the folder moniker associated with the export specification.
        
        Returns:
        DgnFolderMonikerPtr value.
        """
        ...
    
    def GetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def GetItemTypeNames(self: MSPyMstnPlatform.ExportSpecification, itemTypeNames: MSPyMstnPlatform.ItemTypeSpecificationPtrArray) -> None:
        """
        Get the list of item type specifications to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByItemType.
        
        Parameter ``itemTypeNames``:
        List of item type specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetLevelNames(self: MSPyMstnPlatform.ExportSpecification, levelNames: MSPyMstnPlatform.LevelSpecificationPtrArray) -> None:
        """
        Get the list of level names to export.
        This only applies when the ExportElementFilterMode is: eExportElementFilterMode_ByLevel.
        
        Parameter ``levelNames``:
        List of level specifications.
        
        Returns:
        None.
        """
        ...
    
    def GetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification) -> float:
        """
        Gets the Maximum Chord Height(The maximum chord height for all of the line segments is less than the Chord Height) used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Returns:
        float value. Default value is 0.0.
        """
        ...
    
    def GetNamePrefix(self: MSPyMstnPlatform.ExportSpecification) -> MSPyBentley.WString:
        """
        Gets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def GetPreserveZ(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that 3D data is exported as 3D or 2D.
        
        Returns:
        bool value.
        """
        ...
    
    def GetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification) -> bool:
        """
        Get the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    @property
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @IncludeReferenceFiles.setter
    def IncludeReferenceFiles(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    @property
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification) -> float:
        ...
    @MaxChordHeight.setter
    def MaxChordHeight(arg0: MSPyMstnPlatform.ExportSpecification, arg1: float) -> None:
        ...
    
    @property
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @PreserveZ.setter
    def PreserveZ(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def SetElementFilterMode(self: MSPyMstnPlatform.ExportSpecification, arg0: MSPyMstnPlatform.ExportElementFilterMode) -> None:
        """
        Set the element filter mode of export operation.
        
        Parameter ``mode``:
        Mode of export operation.
        The mode specifies the elements to be exported.
        
        Returns :
        None.
        """
        ...
    
    def SetExportTextString(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Sets the indicator that the element's text string should be exported to the output file.
        
        Parameter ``exportTextString``:
        Indicator that the element's text string should be exported to the output file. Default value is True.
        
        Returns:
        None.
        """
        ...
    
    def SetFacetCurves(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that curves(circle, curve, Bspline) should be faceted during export.
        
        Parameter ``facetCurves``:
        Indicator that curves should be faceted during export. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetFolderMoniker(self: MSPyMstnPlatform.ExportSpecification, folderMoniker: MSPyDgnPlatform.DgnFolderMoniker) -> None:
        """
        Set the folder moniker.
        This method sets the folder moniker associated with the export specification.
        
        Parameter ``folderMoniker``:
        Folder moniker.
        
        Returns:
        None.
        """
        ...
    
    def SetIncludeReferenceFiles(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the reference files should be processed when exporting elements.
        The IncludeReferenceFiles value only applies when the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``includeReferenceFiles``:
        Indicator that the reference files should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def SetMaxChordHeight(self: MSPyMstnPlatform.ExportSpecification, arg0: float) -> None:
        """
        Sets the Maximum Chord Height, the maximum chord height for all of the line segments is less than the Chord Height, used when FacetCurves=true.
        Value is in Master Units. Defaults to 0.0.
        To determine the maximum chord height value, use the Facet Curve tool with Method="Max. Chord Height" on your data.
        
        Parameter ``maxChordHeight``:
        Maximum Chord Height. Default value is 0.0.
        
        Returns:
        None.
        """
        ...
    
    def SetNamePrefix(self: MSPyMstnPlatform.ExportSpecification, namePrefix: MSPyBentley.WString) -> None:
        """
        Sets the file name prefix for output files used when ExportElementFilterMode is ExportElementFilterMode.BySelectionSet. Defaults to "My_Prefix".
        """
        ...
    
    def SetPreserveZ(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that 3D data is exported as 3D or 2D.
        
        Parameter ``preserveZ``:
        Indicator that the Z values should be preserved when exporting elements.
        
        Returns:
        None.
        """
        ...
    
    def SetUseFenceOverlap(self: MSPyMstnPlatform.ExportSpecification, arg0: bool) -> None:
        """
        Set the indicator that the active fence with non-clip overlap mode should be processed when exporting elements.
        The UseFenceOverlap value only applies when there is an active fence and the ExportElementFilterMode is one of: ByElementTemplate, ByItemType, ByLevel.
        
        Parameter ``useFenceOverlap``:
        Indicator that the active fence with non-clip overlap mode should be processed when exporting elements. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    @property
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification) -> bool:
        ...
    @UseFenceOverlap.setter
    def UseFenceOverlap(arg0: MSPyMstnPlatform.ExportSpecification, arg1: bool) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SHPImportSpecification:
    """
    None
    """

    def CreateDefaultElementTemplate(self: MSPyMstnPlatform.SHPImportSpecification) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Create the default element template with associated item type for feature as specified by the import specification.
        This method is not normally called by the user, since it is called internally by the Import method to create(if not existing) the default element template with associated item type for the feature as specified by the import specification.
        This method is useful if the element template must exist to be modified before the import is performed. For example, change the element template active point type from zero length line to cell before importing.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @property
    def FlipCoordinates(arg0: MSPyMstnPlatform.SHPImportSpecification) -> bool:
        ...
    @FlipCoordinates.setter
    def FlipCoordinates(arg0: MSPyMstnPlatform.SHPImportSpecification, arg1: bool) -> None:
        ...
    
    def GetExistingTemplateDgnFile(self: MSPyMstnPlatform.SHPImportSpecification) -> MSPyDgnPlatform.DgnFile:
        """
        Get the DgnFile containing the existing template of this feature specification.
        
        Returns:
        This method returns the DgnFile containing the existing element template associated with the import feature specification.
        """
        ...
    
    def GetExistingTemplateFullPath(self: MSPyMstnPlatform.SHPImportSpecification) -> MSPyBentley.WString:
        """
        Get the full path of the existing template of this feature specification.
        
        Returns:
        This method returns the full path of the existing template associated with the import feature specification.
        The full path includes the template group name and the template name. For example: "MyProject\\PACounties"
        Defaults to null, indicating that a default template group name based on the GDB folder name and template name based on the class name will be used.
        If this template does not exist, it will be created. For example: "UnitedStates.gdb\\PACounties"
        """
        ...
    
    def GetFlipCoordinates(self: MSPyMstnPlatform.SHPImportSpecification) -> bool:
        """
        Get the boolean denoting flip coordinates state.
        
        Returns:
        bool value. Default value is false.
        """
        ...
    
    def Import(self: MSPyMstnPlatform.SHPImportSpecification) -> tuple:
        """
        Import features as specified by the import specification.
        
        Parameter ``[out]``:
        The returned Number of features imported.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    def SetExistingTemplateDgnFile(self: MSPyMstnPlatform.SHPImportSpecification, arg0: MSPyDgnPlatform.DgnFile) -> None:
        """
        Set the DgnFile containing the existing template of this feature specification.
        
        Parameter ``existingTemplateDgnFile``:
        DgnFile containing the existing element template.
        
        Returns:
        None.
        """
        ...
    
    def SetExistingTemplateFullPath(self: MSPyMstnPlatform.SHPImportSpecification, arg0: MSPyBentley.WString) -> None:
        """
        Set the full path of the existing template of this feature specification.
        
        Parameter ``existingTemplateFullPath``:
        Full path of the existing template.
        The full path includes the template group name and the template name. For example: "MyProject\\PACounties"
        Defaults to null, indicating that a default template group name based on the GDB folder name and template name based on the class name will be used.
        If this template does not exist, it will be created. For example: "UnitedStates.gdb\\PACounties"
        
        Returns:
        None.
        """
        ...
    
    def SetFlipCoordinates(self: MSPyMstnPlatform.SHPImportSpecification, arg0: bool) -> None:
        """
        Set the boolean denoting flip coordinates state.
        
        Parameter ``flipCoordinates``:
        Flip Coordinates. Default value is false.
        
        Returns:
        None.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SectorAngleType:
    """
    Members:
    
    eParallel_AntiClockwise
    
    eParallel_Clockwise
    
    eAntiParallel_AntiClockwise
    
    eAntiParallel_Clockwise
    """

    def __init__(self: MSPyMstnPlatform.SectorAngleType, value: int) -> None:
        ...
    
    eAntiParallel_AntiClockwise: SectorAngleType
    
    eAntiParallel_Clockwise: SectorAngleType
    
    eParallel_AntiClockwise: SectorAngleType
    
    eParallel_Clockwise: SectorAngleType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SectorAngleType) -> int:
        ...
    
class ServerConnection:
    """
    None
    """

    def CreateDefaultElementTemplates(self: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.GeospatialContextStatus:
        """
        Create the default element templates with associated item types for features as specified by the import specification.
        This method is not normally called by the user, since it is called internally by the Import method to create(if not existing) the default element templates with associated item types for the features as specified by the import specification.
        This method is useful if the element template must exist to be modified before the import is performed. For example, change the element template active point type from zero length line to cell before importing.
        
        Returns:
        GeospatialContextStatus value.
        """
        ...
    
    @staticmethod
    def GetDefaultConnectionNameForURL(connectionName: MSPyBentley.WString, url: MSPyBentley.WString) -> None:
        """
        Get the default connection name for the given URL
        
        This method generates a default connection name for the given URL. The connection name is a human-readable string that describes the connection.
        The connection name is generated based on the server type and URL.
        For example, the default connection name for the URL "https://sampleserver6.arcgisonline.com/arcgis/rest/services/Military/FeatureServer" is "Military".
        
        Parameter ``connectionName``:
        The Name of the connection.
        
        Parameter ``url``:
        The URL of the server.
        """
        ...
    
    def GetFeatureSpecifications(self: MSPyMstnPlatform.ServerConnection, featureSpecs: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> None:
        """
        Get the list of a connection's feature specifications.
        
        Parameter ``featureSpecs``:
        The List of feature specifications for the connection.
        
        Returns:
        None.
        """
        ...
    
    def GetIURLServer(self: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.IURLServer:
        """
        Get the IURLServer interface on the ServerConnection, or NULL if the server connection is not for a URL based server.
        
        Returns:
        IURLServerP.
        """
        ...
    
    def GetName(self: MSPyMstnPlatform.ServerConnection) -> MSPyBentley.WString:
        """
        Get the name of this connection. See also GetDefaultConnectionNameForURL.
        """
        ...
    
    @staticmethod
    def GetNeedsUserNameAndPassword(url: MSPyBentley.WString) -> bool:
        """
        Determine if the server for the given URL needs username and password input for connection.
        A server may require a username and password for connection. This method checks if the server for the given URL requires a username and password.
        If OAuth is used, the server may not require a username and password.
        
        Parameter ``url``:
        The URL of the server.
        
        Returns:
        bool value.
        """
        ...
    
    def GetServerType(self: MSPyMstnPlatform.ServerConnection) -> MSPyMstnPlatform.ConnectionServerType:
        """
        Get the server type of this connection.
        """
        ...
    
    def GetServerTypeName(self: MSPyMstnPlatform.ServerConnection) -> MSPyBentley.WString:
        """
        Get the server type name of this connection.
        """
        ...
    
    def GetUniqueID(self: MSPyMstnPlatform.ServerConnection) -> MSPyBentley.WString:
        """
        Get the Unique Identifier for the connection.
        """
        ...
    
    def Show(self: MSPyMstnPlatform.ServerConnection, prefixString: MSPyBentley.WString) -> None:
        """
        Show the connection information for debugging.
        
        Parameter ``prefixString``:
        The Prefix string to show before the connection information.
        
        Returns:
        None.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ServerConnectionPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ServerConnectionPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ServerConnectionPtrArray, arg0: int) -> None
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ServerConnectionPtrArray) -> None:
        ...
    
    def push_back(self: MSPyMstnPlatform.ServerConnectionPtrArray, newItem: MSPyMstnPlatform.ServerConnection) -> None:
        ...
    
    def remove(self: MSPyMstnPlatform.ServerConnectionPtrArray, arg0: MSPyMstnPlatform.ServerConnection) -> None:
        ...
    
    def resize(self: MSPyMstnPlatform.ServerConnectionPtrArray, newSize: int) -> None:
        ...
    
class ServerFeatureSpecification:
    """
    None
    """

    def GetClassName(self: MSPyMstnPlatform.ServerFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the class name of this feature specification.
        """
        ...
    
    def GetDisplayName(self: MSPyMstnPlatform.ServerFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the display name of this feature specification.
        """
        ...
    
    def GetElementTemplatePath(self: MSPyMstnPlatform.ServerFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the ElementTemplate path of this feature specification. Note: This only has a value after a connection is established.
        """
        ...
    
    def GetIsSelected(self: MSPyMstnPlatform.ServerFeatureSpecification) -> bool:
        """
        Get the selected state of this feature specification.
        
        Returns:
        bool value.
        """
        ...
    
    def GetItemTypeLibraryName(self: MSPyMstnPlatform.ServerFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the item type library name of this feature specification. Note: This only has a value after a connection is established.
        """
        ...
    
    def GetItemTypeName(self: MSPyMstnPlatform.ServerFeatureSpecification) -> MSPyBentley.WString:
        """
        Get the item type name of this feature specification. Note: This only has a value after a connection is established.
        """
        ...
    
    @property
    def IsSelected(arg0: MSPyMstnPlatform.ServerFeatureSpecification) -> bool:
        ...
    @IsSelected.setter
    def IsSelected(arg0: MSPyMstnPlatform.ServerFeatureSpecification, arg1: bool) -> None:
        ...
    
    def SetIsSelected(self: MSPyMstnPlatform.ServerFeatureSpecification, arg0: bool) -> None:
        """
        Set the selected state of this feature specification.
        
        Parameter ``isSelected``:
        Is feature specification selected.
        
        Returns:
        None.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ServerFeatureSpecificationPtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, arg0: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ServerFeatureSpecification) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ServerFeatureSpecification) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, L: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, i: int, x: MSPyMstnPlatform.ServerFeatureSpecification) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray) -> MSPyMstnPlatform.ServerFeatureSpecification
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, i: int) -> MSPyMstnPlatform.ServerFeatureSpecification
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.ServerFeatureSpecificationPtrArray, x: MSPyMstnPlatform.ServerFeatureSpecification) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class SessionMonitor:
    """
    None
    """

    def __init__(self: MSPyMstnPlatform.SessionMonitor) -> None:
        ...
    
class SmartFeatureElement:
    """
    None
    """

    @staticmethod
    def AddFeature(eeh: MSPyDgnPlatform.EditElementHandle, feature: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Add parametric feature
        
        :param out]:
        eeh Parametric Feature element
        
        :param feature:
        Feature node to add
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def CollapseHistory(eeh: MSPyDgnPlatform.EditElementHandle, featureTree: MSPyMstnPlatform.SmartFeatureNode, featureNode: MSPyMstnPlatform.SmartFeatureNode) -> tuple:
        """
        Collapse feature tree
        
        :param eeh:
        Parametric solid element
        
        :param featureTree:
        Feature tree
        
        :param featureNode:
        Feature node to collapse
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def CreateAndWriteSmartFeatureElement(newFeatureEeh: MSPyDgnPlatform.EditElementHandle, targetEh: MSPyDgnPlatform.ElementHandle, destinationModelRef: MSPyDgnPlatform.DgnModelRef, node: MSPyMstnPlatform.SmartFeatureNode, childElementToControlFlagsMap: dict, mergeParametrics: bool = False) -> int:
        ...
    
    @staticmethod
    def CreateSingleChildSmartFeature(newFeatureEeh: MSPyDgnPlatform.EditElementHandle, templateEh: MSPyDgnPlatform.ElementHandle, destinationModelRef: MSPyDgnPlatform.DgnModelRef, oldFeatureEh: MSPyDgnPlatform.ElementHandle, node: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Create parametric feature having a single child.
        
        :param newFeatureEeh:
        Parametric solid element
        
        :param templateEh:
        Template element
        
        :param destinationModelRef:
        Model ref to create parametric feature
        
        :param oldFeatureEh:
        existing element handle on which parametric feature has to create
        
        :param node:
        Feature node
        
        :returns:
        SUCCESS if the operation is successful.
        
        Remark:
        Chamfer, Blend Feature can be created using it.
        """
        ...
    
    @staticmethod
    def DoRollBack(eeh: MSPyDgnPlatform.EditElementHandle) -> int:
        """
        Rollback feature
        
        :param out]:
        eeh Parametric Feature element
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def DropToLegacy(agenda: MSPyDgnPlatform.ElementAgenda, featureEh: MSPyDgnPlatform.ElementHandle) -> int:
        """
        Drop parametric feature to smart solid state
        
        :param agenda:
        Dropped elements
        
        :param featureEh:
        Parametric solid element to drop
        
        :returns:
        SUCCESS if the drop is successful.
        """
        ...
    
    @staticmethod
    def DumpFeatureTree(label: MSPyBentley.WString, eh: MSPyDgnPlatform.ElementHandle) -> int:
        """
        Print feature tree information for debug purpose
        
        :param label:
        E.g. WPrintfString(L" Element:% d ", eh.GetElementId()
        
        :param eh:
        Parametric Feature element
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def ExtractTree(eh: MSPyDgnPlatform.ElementHandle) -> tuple:
        """
        Get smart feature tree of supplied element.
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def GetFeatureName(subEntity: MSPyDgnPlatform.ISubEntity, hostEh: MSPyDgnPlatform.ElementHandle) -> MSPyBentley.WString:
        """
        Get feature name
        
        :param subEntity:
        subEntity used to precisely locate feature
        
        :param hostEh:
        Parametric Solid element
        
        :returns:
        Feature name
        """
        ...
    
    @staticmethod
    def GetFeaturesFromNodeIds(features: MSPyMstnPlatform.SmartFeatureNodePtrArray, featureEh: MSPyDgnPlatform.ElementHandle, nodeIdsSet: MSPyBentleyGeom.UInt32Array) -> tuple:
        """
        Get feature by using node id
        
        :param featureTree:
        Feature tree
        
        :param features:
        Features to be returned
        
        :param featureEh:
        Parametric Feature element
        
        :param nodeIdsSet:
        Features nodes
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def GetFeaturesFromNodeName(features: MSPyMstnPlatform.SmartFeatureNodePtrArray, featureEh: MSPyDgnPlatform.ElementHandle, nodeName: MSPyBentley.WString) -> tuple:
        """
        Get feature by using node name
        
        :param featureTree:
        Feature tree
        
        :param features:
        Features to be returned
        
        :param featureEh:
        Parametric Feature element
        
        :param nodeName:
        Feature node name
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def GetFeaturesFromSubEntities(features: MSPyMstnPlatform.SmartFeatureNodePtrArray, featureEh: MSPyDgnPlatform.ElementHandle, subEntities: MSPyDgnPlatform.ISubEntityPtrArray) -> tuple:
        """
        Get feature by supplying sub entities captured by UI
        
        :param featureTree:
        Feature tree
        
        :param features:
        Features to be returned
        
        :param featureEh:
        Parametric Feature element
        
        :param subEntities:
        Subentity to get feature from
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def GetOrCreateSmartFeature(newFeatureEeh: MSPyDgnPlatform.EditElementHandle, templateEh: MSPyDgnPlatform.ElementHandle, destinationModelRef: MSPyDgnPlatform.DgnModelRef, oldFeatureEh: MSPyDgnPlatform.ElementHandle, mergeParametrics: bool, visible: bool, temporary: bool, profile: bool) -> int:
        """
        Get existing parametric feature otherwise create a new one.
        
        :param newFeatureEeh:
        Parametric solid element
        
        :param templateEh:
        Template element
        
        :param destinationModelRef:
        Model ref to create parametric feature
        
        :param oldFeatureEh:
        existing element handle on which parametric feature has to create
        
        :param mergeParametrics:
        Merge Parameter option
        
        :param visible:
        Visible
        
        :param temporary:
        Temporary
        
        :param profile:
        Whether element is profile or not
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def HideExternalLeaf(featureEeh: MSPyDgnPlatform.EditElementHandle, leafElemRef: MSPyDgnPlatform.ElementRefBase) -> int:
        """
        Hide external leaf
        
        :param featureEeh:
        Parametric solid element
        
        :param leaf:
        Element ref of leaf
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def IsSmartFeature(eh: MSPyDgnPlatform.ElementHandle) -> bool:
        """
        Confirm whether supplied element is parametric feature.
        
        :param eh:
        Element to test
        
        :param templateEh:
        Template element
        """
        ...
    
    @staticmethod
    def RemoveFeature(eh: MSPyDgnPlatform.ElementHandle, tree: MSPyMstnPlatform.SmartFeatureNode, nodeToDelete: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Delete parametric feature
        
        :param eh:
        Parametric Feature element
        
        :param tree:
        Feature tree to use
        
        :param nodeToDelete:
        Feature node to delete
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def SaveTree(featureEeh: MSPyDgnPlatform.EditElementHandle, teatureTree: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Save smart feature tree on supplied element.
        
        :param out]:
        featureEeh Parametric Feature element
        
        :param featureTree:
        the tree to save on element
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def ShowExternalLeaf(featureEeh: MSPyDgnPlatform.EditElementHandle, leafElemRef: MSPyDgnPlatform.ElementRefBase) -> int:
        """
        Show external leaf
        
        :param featureEeh:
        Parametric solid element
        
        :param leaf:
        Element ref of leaf
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    @staticmethod
    def WriteSmartFeature(newFeatureEeh: MSPyDgnPlatform.EditElementHandle, featureTree: MSPyMstnPlatform.SmartFeatureNode, oldFeatureEh: MSPyDgnPlatform.ElementHandle) -> int:
        """
        Write Smart Feature into the file.
        
        :param newFeatureEeh:
        Parametric solid element
        
        :param featureTree:
        Feature tree
        
        :param oldFeatureEeh:
        Old feature element or Template element
        
        :returns:
        SUCCESS if the operation is successful.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SmartFeatureHandlerId:
    """
    Members:
    
    eUnspecified
    
    eExternalSolid
    
    eBoolean
    
    eBlend
    
    eChamfer
    
    eHollow
    
    eCut
    
    eThicken
    
    eOffsetFace
    
    eTranslateFace
    
    eImprintElement
    
    eImprintOffset
    
    eExternalProfile
    
    eTaperFace
    
    eSpinFace
    
    eEAP1Hole
    
    eProtrusion
    
    eRectangularArray
    
    ePolarArray
    
    eFenceStretch
    
    eFenceClip
    
    eExtrude
    
    eRevolve
    
    eLoftSurface
    
    eModifyVertex
    
    eModifyEdge
    
    eHole
    
    eTrim
    
    eDeleteFace
    
    eDeleteLump
    
    eExternalEdgeProfile
    
    eCopyFeature
    
    eSweepEdge
    
    eEllipticalCone
    
    eEllipsoid
    
    eSizeFilter
    
    eArrayAlongPath
    
    eAssociativeElement
    
    eExtrudeAlongProfile
    
    eAssociativeElementSymbology
    """

    def __init__(self: MSPyMstnPlatform.SmartFeatureHandlerId, value: int) -> None:
        ...
    
    eArrayAlongPath: SmartFeatureHandlerId
    
    eAssociativeElement: SmartFeatureHandlerId
    
    eAssociativeElementSymbology: SmartFeatureHandlerId
    
    eBlend: SmartFeatureHandlerId
    
    eBoolean: SmartFeatureHandlerId
    
    eChamfer: SmartFeatureHandlerId
    
    eCopyFeature: SmartFeatureHandlerId
    
    eCut: SmartFeatureHandlerId
    
    eDeleteFace: SmartFeatureHandlerId
    
    eDeleteLump: SmartFeatureHandlerId
    
    eEAP1Hole: SmartFeatureHandlerId
    
    eEllipsoid: SmartFeatureHandlerId
    
    eEllipticalCone: SmartFeatureHandlerId
    
    eExternalEdgeProfile: SmartFeatureHandlerId
    
    eExternalProfile: SmartFeatureHandlerId
    
    eExternalSolid: SmartFeatureHandlerId
    
    eExtrude: SmartFeatureHandlerId
    
    eExtrudeAlongProfile: SmartFeatureHandlerId
    
    eFenceClip: SmartFeatureHandlerId
    
    eFenceStretch: SmartFeatureHandlerId
    
    eHole: SmartFeatureHandlerId
    
    eHollow: SmartFeatureHandlerId
    
    eImprintElement: SmartFeatureHandlerId
    
    eImprintOffset: SmartFeatureHandlerId
    
    eLoftSurface: SmartFeatureHandlerId
    
    eModifyEdge: SmartFeatureHandlerId
    
    eModifyVertex: SmartFeatureHandlerId
    
    eOffsetFace: SmartFeatureHandlerId
    
    ePolarArray: SmartFeatureHandlerId
    
    eProtrusion: SmartFeatureHandlerId
    
    eRectangularArray: SmartFeatureHandlerId
    
    eRevolve: SmartFeatureHandlerId
    
    eSizeFilter: SmartFeatureHandlerId
    
    eSpinFace: SmartFeatureHandlerId
    
    eSweepEdge: SmartFeatureHandlerId
    
    eTaperFace: SmartFeatureHandlerId
    
    eThicken: SmartFeatureHandlerId
    
    eTranslateFace: SmartFeatureHandlerId
    
    eTrim: SmartFeatureHandlerId
    
    eUnspecified: SmartFeatureHandlerId
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SmartFeatureHandlerId) -> int:
        ...
    
class SmartFeatureNode:
    """
    None
    """

    def CanBeDisabled(self: MSPyMstnPlatform.SmartFeatureNode) -> bool:
        """
        Whether node can be disabled?
        """
        ...
    
    @property
    def ChildCount(arg0: MSPyMstnPlatform.SmartFeatureNode) -> int:
        ...
    
    @property
    def Children(arg0: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNodePtrArray:
        ...
    
    def ClearColorOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Clear the color
        """
        ...
    
    def ClearMaterialOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Clear material
        """
        ...
    
    def ClearTransparencyOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Clear transparency
        """
        ...
    
    @property
    def CustomName(arg0: MSPyMstnPlatform.SmartFeatureNode) -> MSPyBentley.WString:
        ...
    @CustomName.setter
    def CustomName(arg0: MSPyMstnPlatform.SmartFeatureNode, arg1: MSPyBentley.WString) -> None:
        ...
    
    @property
    def Disabled(arg0: MSPyMstnPlatform.SmartFeatureNode) -> bool:
        ...
    @Disabled.setter
    def Disabled(arg0: MSPyMstnPlatform.SmartFeatureNode, arg1: bool) -> None:
        ...
    
    def GetAllChildrenRecursively(self: MSPyMstnPlatform.SmartFeatureNode, allChildren: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> None:
        """
        Get all children recursively
        
        :param allChildren:
        All children
        """
        ...
    
    def GetBasisTransform(self: MSPyMstnPlatform.SmartFeatureNode, transform: MSPyBentleyGeom.Transform, hostEh: MSPyDgnPlatform.ElementHandle, applyTransform: bool = True) -> MSPyDgnPlatform.BentleyStatus:
        """
        Get basis transform of feature
        """
        ...
    
    def GetBody(self: MSPyMstnPlatform.SmartFeatureNode, hostEh: MSPyDgnPlatform.ElementHandle, getSolids: bool, getSheets: bool, applyHostTransform: bool, displayError: bool) -> tuple:
        """
        Acquire body of parametric feature.
        
        :param body:
        Output body
        
        :param hostEh:
        Parametric Feature Element
        
        :param getSolids:
        solid output is required
        
        :param getSheets:
        sheet output is required
        
        :param applyHostTransform:
        Apply Host tansform
        
        :param displayError:
        Display error
        """
        ...
    
    def GetChild(self: MSPyMstnPlatform.SmartFeatureNode, index: int) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Get child
        
        :param index:
        Child index
        
        :returns:
        SmartFeatureNodePtr of child node
        """
        ...
    
    def GetChildCount(self: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Get child count
        
        :returns:
        Child count
        """
        ...
    
    def GetChildren(self: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNodePtrArray:
        """
        Get all children
        
        :returns:
        Smart Feature node vector of children
        """
        ...
    
    def GetColorOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> tuple:
        """
        Get color of the body
        """
        ...
    
    def GetCustomName(self: MSPyMstnPlatform.SmartFeatureNode) -> MSPyBentley.WString:
        """
        Get custom name
        """
        ...
    
    def GetDisabled(self: MSPyMstnPlatform.SmartFeatureNode) -> bool:
        """
        Query the disable status of smart feature node.
        """
        ...
    
    def GetHandlerId(self: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureHandlerId:
        """
        Get paramtric feature type. Should be compared with
        SmartFeatureHandlerId enum.
        """
        ...
    
    def GetHighestNodeId(self: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Get highest node id in smart feature tree
        """
        ...
    
    def GetLeaf(self: MSPyMstnPlatform.SmartFeatureNode, eh: MSPyDgnPlatform.ElementHandle) -> int:
        """
        Get leaf
        
        :param eh:
        leaf element handle
        
        :returns:
        SUCCESS if the operation is successful
        """
        ...
    
    def GetLowestNodeId(self: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Get lowest node id in smart feature tree
        """
        ...
    
    def GetMaterialOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> tuple:
        """
        Get material of body
        """
        ...
    
    def GetNodeId(self: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Get node id
        
        :returns:
        Node id
        """
        ...
    
    def GetParent(self: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Get parent
        
        :returns:
        SmartFeatureNodePtr of parent node
        """
        ...
    
    def GetParentOfHiddenExternalLeaf(self: MSPyMstnPlatform.SmartFeatureNode) -> tuple:
        """
        Get parent of hidden external leaf. E.g. Extrude feature is returned;
        in case of hidden profile
        
        :param externalLeafParent:
        Parent node of external leaf
        
        :returns:
        SUCCESS if the operation is successful
        """
        ...
    
    def GetSingleChild(self: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNode:
        """
        Returns immediate single child.
        """
        ...
    
    def GetSingleChildBody(self: MSPyMstnPlatform.SmartFeatureNode, hostEh: MSPyDgnPlatform.ElementHandle, getSolids: bool, getSheets: bool, applyHostTransform: bool, displayError: bool) -> tuple:
        """
        Get body of immediate single child.
        """
        ...
    
    def GetTransparencyOverride(self: MSPyMstnPlatform.SmartFeatureNode) -> tuple:
        """
        Get transparency
        """
        ...
    
    @property
    def HandlerId(arg0: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureHandlerId:
        ...
    
    @property
    def HighestNodeId(arg0: MSPyMstnPlatform.SmartFeatureNode) -> int:
        ...
    
    @property
    def LowestNodeId(arg0: MSPyMstnPlatform.SmartFeatureNode) -> int:
        ...
    
    @property
    def NodeId(arg0: MSPyMstnPlatform.SmartFeatureNode) -> int:
        ...
    
    @property
    def Parent(arg0: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNode:
        ...
    
    @staticmethod
    def RelocateFeature(node: MSPyMstnPlatform.SmartFeatureNode, target: MSPyMstnPlatform.SmartFeatureNode, hostEh: MSPyDgnPlatform.ElementHandle, errorStringId: MSPyBentley.WString) -> tuple:
        """
        Relocate feature node
        """
        ...
    
    def SetColorOverride(self: MSPyMstnPlatform.SmartFeatureNode, color: int) -> None:
        """
        Set color on the body
        """
        ...
    
    def SetCustomName(self: MSPyMstnPlatform.SmartFeatureNode, name: MSPyBentley.WString) -> None:
        """
        Set custom name
        """
        ...
    
    def SetDisabled(self: MSPyMstnPlatform.SmartFeatureNode, disable: bool) -> None:
        """
        Disable the smart feature node.
        
        :param disabled:
        Boolean value to disable
        """
        ...
    
    def SetMaterialOverride(self: MSPyMstnPlatform.SmartFeatureNode, materialOverride: MSPyDgnPlatform.MaterialId) -> None:
        """
        Set material on the body
        """
        ...
    
    def SetTransparencyOverride(self: MSPyMstnPlatform.SmartFeatureNode, transparencyOverride: float) -> None:
        """
        Set transparency
        """
        ...
    
    @property
    def SingleChild(arg0: MSPyMstnPlatform.SmartFeatureNode) -> MSPyMstnPlatform.SmartFeatureNode:
        ...
    
    def TransformFeatureAndDependents(self: MSPyMstnPlatform.SmartFeatureNode, transform: MSPyBentleyGeom.Transform) -> int:
        """
        Transform a feature and its dependents
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SmartFeatureNodePtrArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, arg0: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, x: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, x: MSPyMstnPlatform.SmartFeatureNode) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, L: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, i: int, x: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.SmartFeatureNodePtrArray) -> MSPyMstnPlatform.SmartFeatureNode
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, i: int) -> MSPyMstnPlatform.SmartFeatureNode
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.SmartFeatureNodePtrArray, x: MSPyMstnPlatform.SmartFeatureNode) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class SmartFeatureUtil:
    """
    None
    """

    @staticmethod
    def DrawDynamicSpinAxis(axis: MSPyBentleyGeom.DRay3d, range: MSPyBentleyGeom.DRange3d, normal: MSPyBentleyGeom.DVec3d, viewport: MSPyDgnPlatform.Viewport) -> None:
        """
        Draw dynamic spin axis.
        
        :param axis:
        axis
        
        :param range:
        range
        
        :param normal:
        normal
        
        :param viewport:
        viewport
        """
        ...
    
    @staticmethod
    def GetCurveVector(eh: MSPyDgnPlatform.ElementHandle, regionsOnly: bool) -> tuple:
        """
        Get CurveVector using elementHandle.
        
        :param curveVector:
        Output curve vector
        
        :param eh:
        Element used to get curve vector
        
        :param regionsOnly:
        only regions
        """
        ...
    
    @staticmethod
    def GetCurveVectorPlane(plane: MSPyBentleyGeom.DPlane3d, curveVector: MSPyBentleyGeom.CurveVector, point: MSPyBentleyGeom.DPoint3d = None, parallelIfLinear: bool = True) -> None:
        """
        Get plane of supplied CurveVector.
        
        :param plane:
        output plane
        
        :param curveVector:
        of which plane has to retrieve
        
        :param point:
        Point used on curve vector
        
        :param parallelIfLinear:
        Parallel option be used in case of linear
        """
        ...
    
    @staticmethod
    def InitSmartFeature() -> int:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SolidUtil:
    """
    None
    """

    @staticmethod
    def ClosestPoint(entity: MSPyDgnPlatform.ISolidKernelEntity, testPt: MSPyBentleyGeom.DPoint3d) -> tuple:
        """
        Get the closest point on body to a given point.
        
        :param entity:
        The entity to pick sub-entities for.
        
        :param testPt:
        The space point.
        
        :param subEntity:
        The face, edge, or vertext sub-entity that contains the closest
        point.
        
        :param point:
        The closest point on the body.
        
        :returns:
        true if closest point was found.
        """
        ...
    
    @staticmethod
    def ClosestPointToEdge(subEntity: MSPyDgnPlatform.ISubEntity, testPt: MSPyBentleyGeom.DPoint3d) -> tuple:
        """
        Get the closest point on an edge to a given point.
        
        :param subEntity:
        The edge to test.
        
        :param testPt:
        The space point.
        
        :param point:
        The closest point on the edge.
        
        :param param:
        The u parameter at the closest point.
        
        :returns:
        true if closest point was found.
        """
        ...
    
    @staticmethod
    def ClosestPointToFace(subEntity: MSPyDgnPlatform.ISubEntity, testPt: MSPyBentleyGeom.DPoint3d, point: MSPyBentleyGeom.DPoint3d, normal: MSPyBentleyGeom.DVec3d, param: MSPyBentleyGeom.DPoint2d) -> bool:
        """
        Get the closest point on a face to a given point.
        
        :param subEntity:
        The face to test.
        
        :param testPt:
        The space point.
        
        :param point:
        The closest point on the face.
        
        :param normal:
        The surface normal at the closest point.
        
        :param param:
        The uv parameter at the closest point.
        
        :returns:
        true if closest point was found.
        """
        ...
    
    class Convert:
        """
        None
        """
    
    @staticmethod
    def BodyToElement(eeh: MSPyDgnPlatform.EditElementHandle, entity: MSPyDgnPlatform.ISolidKernelEntity, templateEh: MSPyDgnPlatform.ElementHandle, modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def ElementToBodies(out: MSPyDgnPlatform.ISolidKernelEntityPtrArray, eh: MSPyDgnPlatform.ElementHandle, getSolids: bool = True, getSheets: bool = True, getWires: bool = True) -> tuple:
            """
            Create bodies from an element that represents one or more wire, sheet,
            or solid bodies.
            
            :param out:
            The collection of new bodies.
            
            :param hasMissingGeom:
            Will be set to true if not all geometry for the element is
            included in the output body collection.
            
            :param eh:
            The element to convert.
            
            :param getSolids:
            Collect solid bodies.
            
            :param getSheets:
            Collect sheet bodies.
            
            :param getWires:
            Collect wire bodies.
            
            :returns:
            SUCCESS if at least one body of the requested type was created.
            """
            ...
        
    @staticmethod
    def ElementToBody(eh: MSPyDgnPlatform.ElementHandle, getSolid: bool = True, getSheet: bool = True, getWire: bool = True) -> tuple:
            """
            Create a body from an element that can represent a single wire, sheet,
            or solid body.
            
            :param out:
            The new body.
            
            :param eh:
            The element to convert.
            
            :param getSolid:
            Accept element that can be converted to a single solid body.
            
            :param getSheet:
            Accept element that can be converted to a single sheet body.
            
            :param getWire:
            Accept element that can be converted to a single wire body.
            
            :returns:
            SUCCESS if a body of the requested type was created.
            """
            ...
        
    @staticmethod
    def SubEntityToCurveVector(subEntity: MSPyDgnPlatform.ISubEntity) -> tuple:
            """
            Create a simplified CurveVector representation of the given sub-
            entity.
            
            :param curves:
            A CurveVector representing the sub-entity.
            
            :param subEntity:
            The planar face, edge, or vertex to convert. @note A planar face,
            edge, or vertex can be represented by a CurveVector. Non-planar
            faces will return ERROR.
            
            :returns:
            SUCCESS if a CurveVector could be created to represent the sub-
            entity.
            """
            ...
        
    @staticmethod
    def SubEntityToGeometry(subEntity: MSPyDgnPlatform.ISubEntity, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
            """
            Create a simplified IGeometryPtr representation of the given sub-
            entity (non-BRep geometry).
            
            :param geom:
            A reference counted pointer to the new geometry type.
            
            :param subEntity:
            The face, edge, or vertex to convert.
            
            :param modelRef:
            The destination modelRef. @note A planar face, edge, or vertex can
            be represented by a CurveVector. Non-planar faces can be
            represented by a MSBsplineSurface or ISolidPrimitive.
            
            :returns:
            SUCCESS if a IGeometryPtr could be created to represent the sub-
            entity.
            """
            ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
        
    @staticmethod
    def CopyEntity(*args, **kwargs):
        """
        CopyEntity(in: MSPyDgnPlatform.ISolidKernelEntity) -> tuple
        
        Create a new ISolidKernelEntityPtr by copying the input body.
        
        :param out:
        The new body.
        
        :param in:
        The body to copy.
        
        :returns:
        SUCCESS if copy is valid.
        """
        ...
    
    class Create:
        """
        None
        """
    
    @staticmethod
    def BodyFromBSurface(surface: MSPyBentleyGeom.MSBsplineSurface, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
            """
            Create a new sheet body from a MSBsplineSurface.
            
            :param out:
            The new body.
            
            :param surface:
            The surface to create a body from.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromCurveVector(curve: MSPyBentleyGeom.CurveVector, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
            """
            Create a new wire or planar sheet body from a CurveVector that
            represents an open path, closed path, region with holes, or union
            region.
            
            :param out:
            The new body.
            
            :param curve:
            The curve vector to create a body from.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            @note The CurvePrimitives that define an open path or closed loop
            are expected to be connected head-to-tail and may not intersect
            except at a vertex. A vertex can be shared by at most 2 edges.
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromExtrusionToBody(extrudeTo: MSPyDgnPlatform.ISolidKernelEntity, profile: MSPyDgnPlatform.ISolidKernelEntity, reverseDirection: bool) -> tuple:
            """
            Create a new body by extruding a planar sheet body up to another body.
            
            :param out:
            The new body.
            
            :param extrudeTo:
            The body to trim the extruded body to.
            
            :param profile:
            The planar sheet body to extrude.
            
            :param reverseDirection:
            To specify if extrusion is in the same direction or opposite
            direction to the surface normal of the profile sheet body.
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromLoft(profiles: MSPyBentleyGeom.CurveVectorPtrArray, guides: MSPyBentleyGeom.CurveVectorPtrArray, modelRef: MSPyDgnPlatform.DgnModelRef, periodic: bool = False, segment: bool = False) -> tuple:
            """
            Create a new sheet or solid body from surfaces created by lofting
            through a set of cross section profiles.
            
            :param out:
            The new body.
            
            :param profiles:
            The cross sections profiles.
            
            :param nProfiles:
            The profile count.
            
            :param guides:
            An optional set of guide curves for constrolling the loft.
            
            :param nGuides:
            The guide curve count.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            
            :param periodic:
            If true, a closed surface is constructed in which the first
            section curve is used as the last section curve.
            
            :param segment:
            If true, surfaces are created linearly between each section curve,
            with no smoothing.
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromPolyface(meshData: MSPyBentleyGeom.PolyfaceQuery, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
            """
            Create a new sheet or solid body from a Polyface.
            
            :param out:
            The new body.
            
            :param meshData:
            The surface or solid to create a body from.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromSolidPrimitive(primitive: MSPyBentleyGeom.ISolidPrimitive, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
            """
            Create a new sheet or solid body from an ISolidPrimitive.
            
            :param out:
            The new body.
            
            :param primitive:
            The surface or solid to create a body from.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    @staticmethod
    def BodyFromSweep(profile: MSPyBentleyGeom.CurveVector, path: MSPyBentleyGeom.CurveVector, modelRef: MSPyDgnPlatform.DgnModelRef, alignParallel: bool, selfRepair: bool, createSheet: bool, lockDirection: MSPyBentleyGeom.DVec3d = None, twistAngle: Optional[float] = None, scale: Optional[float] = None, scalePoint: MSPyBentleyGeom.DPoint3d = None) -> tuple:
            """
            Create a new sheet or solid body by sweeping a cross section profile
            along a path.
            
            :param out:
            The new body.
            
            :param profile:
            The cross section profile. (open, closed, or region with holes)
            
            :param path:
            The path to sweep along.
            
            :param model:
            Used to get the solid to uor scale. (ModelInfo.GetSolidExtent)
            
            :param alignParallel:
            true to keep profile at a fixed angle to global axis instead of
            path tangent (and lock direction).
            
            :param selfRepair:
            true to attempt repair of self-intersections.
            
            :param createSheet:
            true to force a sheet body to be created from a closed profile
            which would normally produce a solid body. (Similiar behavior to
            ISolidPrimitive.GetCapped)
            
            :param lockDirection:
            Optionally keep profile at a fixed angle relative to the path
            tangent projected into a plane perpendicular to the lock
            direction. Only valid when alignParallel is false.
            
            :param twistAngle:
            Optionally spin profile as it moves along the path.
            
            :param scale:
            Optionally scale profile as it moves along the path.
            
            :param scalePoint:
            The profile point to scale about, required when applying scale.
            
            :returns:
            SUCCESS if body was created.
            """
            ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
        
    class Debug:
        """
        None
        """
    
    @staticmethod
    def DumpEntity(entity: MSPyDgnPlatform.ISolidKernelEntity, label: str) -> None:
            ...
        
    @staticmethod
    def DumpSubEntity(subEntity: MSPyDgnPlatform.ISubEntity, label: str) -> None:
            ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
        
    @staticmethod
    def DisjoinBody(*args, **kwargs):
        """
        DisjoinBody(out: MSPyDgnPlatform.ISolidKernelEntityPtrArray, in: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Create separate bodies from a single multi-region body.
        
        :param out:
        The collection of new bodies.
        
        :param in:
        The body to separate.
        
        :returns:
        SUCCESS if input body could be separated, ERROR if input body is
        already a single region.
        """
        ...
    
    @staticmethod
    def Draw(subEntity: MSPyDgnPlatform.ISubEntity, context: MSPyDgnPlatform.ViewContext) -> MSPyDgnPlatform.BentleyStatus:
        """
        Draw geometry for the given face, edge, or vertex to the specified
        ViewContext.
        
        :param subEntity:
        The face, edge, or vertex sub-entity to display.
        
        :param context:
        The ViewContext to output geometry to. @note Uses the current
        ElemMatSymb, caller is expected to setup symbology beforehand.
        """
        ...
    
    @staticmethod
    def EvaluateEdge(subEntity: MSPyDgnPlatform.ISubEntity, point: MSPyBentleyGeom.DPoint3d, uDir: MSPyBentleyGeom.DVec3d, uParam: float) -> MSPyDgnPlatform.BentleyStatus:
        """
        Evaluate point and tangent at a u parameter on the curve of the given
        edge sub-entity.
        
        :param subEntity:
        The edge sub-entity to query.
        
        :param point:
        The coordinates of the point on the curve at the u parameter.
        
        :param uDir:
        The normalized curve tangent at the u parameter.
        
        :param uParam:
        The u parameter to evaluate.
        
        :returns:
        SUCCESS if the parameter could be evaluated.
        """
        ...
    
    @staticmethod
    def EvaluateFace(subEntity: MSPyDgnPlatform.ISubEntity, point: MSPyBentleyGeom.DPoint3d, normal: MSPyBentleyGeom.DVec3d, uDir: MSPyBentleyGeom.DVec3d, vDir: MSPyBentleyGeom.DVec3d, uvParam: MSPyBentleyGeom.DPoint2d) -> MSPyDgnPlatform.BentleyStatus:
        """
        Evaluate point, normal, and derivatives at a uv parameter on the
        surface of the given face sub-entity.
        
        :param subEntity:
        The face sub-entity to query.
        
        :param point:
        The coordinates of the point on the surface at the uv parameter.
        
        :param normal:
        The normalized surface normal at the uv parameter.
        
        :param uDir:
        The first derivative with respect to u at the uv parameter.
        
        :param vDir:
        The first derivative with respect to v at the uv parameter.
        
        :param uvParam:
        The uv parameter pair to evaluate.
        
        :returns:
        SUCCESS if the parameter could be evaluated.
        """
        ...
    
    @staticmethod
    def EvaluateVertex(subEntity: MSPyDgnPlatform.ISubEntity, point: MSPyBentleyGeom.DPoint3d) -> MSPyDgnPlatform.BentleyStatus:
        """
        Evaluate point of the given vertex sub-entity.
        
        :param subEntity:
        The vertex sub-entity to query.
        
        :param point:
        The coordinates of the point at the given vertex.
        
        :returns:
        SUCCESS if vertex point exists.
        """
        ...
    
    @staticmethod
    def GetBodyEdges(*args, **kwargs):
        """
        GetBodyEdges(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISolidKernelEntity) -> int
        
        Query the set of edges of the input body.
        
        :param subEntities:
        An optional vector to hold the sub-entities of type
        SubEntityType_Edge, pass NULL if just interested in count.
        
        :param in:
        The entity to query.
        
        :returns:
        A count of the number of edges.
        """
        ...
    
    @staticmethod
    def GetBodyFaces(*args, **kwargs):
        """
        GetBodyFaces(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISolidKernelEntity) -> int
        
        Query the set of faces of the input body.
        
        :param subEntities:
        An optional vector to hold the sub-entities of type
        SubEntityType_Face, pass NULL if just interested in count.
        
        :param in:
        The entity to query.
        
        :returns:
        A count of the number of faces.
        """
        ...
    
    @staticmethod
    def GetBodyVertices(*args, **kwargs):
        """
        GetBodyVertices(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISolidKernelEntity) -> int
        
        Query the set of vertices of the input body.
        
        :param subEntities:
        An optional vector to hold the sub-entities of type
        SubEntityType_Vertex, pass NULL if just interested in count.
        
        :param in:
        The entity to query.
        
        :returns:
        A count of the number of vertices.
        """
        ...
    
    @staticmethod
    def GetEdgeFaces(*args, **kwargs):
        """
        GetEdgeFaces(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of faces for the input edge sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Face.
        
        :param subEntity:
        The edge sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def GetEdgeParameterRange(subEntities: MSPyDgnPlatform.ISubEntity, uRange: MSPyBentleyGeom.DRange1d) -> MSPyDgnPlatform.BentleyStatus:
        """
        Get u edge parameter range for the given edge sub-entity.
        
        :param subEntity:
        The edge sub-entity to query.
        
        :param uRange:
        The u parameter range of the edge.
        
        :returns:
        SUCCESS if edge parameter range was computed.
        """
        ...
    
    @staticmethod
    def GetEdgeVertices(*args, **kwargs):
        """
        GetEdgeVertices(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of vertices for the input edge sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Vertex.
        
        :param subEntity:
        The edge sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def GetEntityRange(range: MSPyBentleyGeom.DRange3d, entity: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
        """
        Get an axis aligned bounding box for the given body.
        
        :param range:
        The bounding box.
        
        :param entity:
        The entity to query.
        
        :returns:
        SUCCESS if bounding box could be computed.
        """
        ...
    
    @staticmethod
    def GetFaceEdges(*args, **kwargs):
        """
        GetFaceEdges(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of edges for the input face sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Edge.
        
        :param subEntity:
        The face sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def GetFaceParameterRange(subEntities: MSPyDgnPlatform.ISubEntity, uRange: MSPyBentleyGeom.DRange1d, vRange: MSPyBentleyGeom.DRange1d) -> MSPyDgnPlatform.BentleyStatus:
        """
        Get uv face parameter range for the given face sub-entity.
        
        :param subEntity:
        The face sub-entity to query.
        
        :param uRange:
        The u parameter range of the face.
        
        :param vRange:
        The v parameter range of the face.
        
        :returns:
        SUCCESS if face parameter range was computedx.
        """
        ...
    
    @staticmethod
    def GetFaceVertices(*args, **kwargs):
        """
        GetFaceVertices(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of vertices for the input face sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Vertex.
        
        :param subEntity:
        The face sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def GetLoopEdgesFromEdge(loopEdges: MSPyDgnPlatform.ISubEntityPtrArray, edge: MSPyDgnPlatform.ISubEntity, face: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus:
        """
        Query the set of edges that comprise a single face loop containing the
        given edge sub-entity.
        
        :param loopEdges:
        A vector to hold the sub-entities of type SubEntityType_Edge.
        
        :param edge:
        The edge sub-entity that is part of the loop.
        
        :param face:
        The face sub-entity that has the loop as part of it's bounds.
        
        :returns:
        SUCCESS if the output vector was populated.
        """
        ...
    
    @staticmethod
    def GetPlanarFaceData(point: MSPyBentleyGeom.DPoint3d, normal: MSPyBentleyGeom.DVec3d, subEntity: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus:
        """
        Evaluate point and normal at center of face parameter range for the
        given face sub-entity.
        
        :param point:
        The coordinates of the point on the surface at the center of the
        face parameter range. Can be NULL.
        
        :param normal:
        The normalized surface normal at the center of the face parameter
        range. Can be NULL.
        
        :param subEntity:
        The face sub-entity to query.
        
        :returns:
        SUCCESS if face is planar. The point and normal are still returned
        when non-planar if the face sub-entity is valid.
        """
        ...
    
    @staticmethod
    def GetSmoothBlendEdges(smoothEdges: MSPyDgnPlatform.ISubEntityPtrArray, edge: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus:
        """
        Query the set of edges that are connected and tangent to the given
        edge sub-entity.
        
        :param smoothEdges:
        A vector to hold the sub-entities of type SubEntityType_Edge.
        
        :param edge:
        The edge sub-entity to query smoothly connected edges for.
        
        :returns:
        SUCCESS if the output vector was populated. @note These are the
        edges that would be included by the propagateSmooth option of
        SolidUtil.Modify.BlendEdges and SolidUtil.Modify.ChamferEdges.
        """
        ...
    
    @staticmethod
    def GetSubEntityRange(range: MSPyBentleyGeom.DRange3d, subEntity: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus:
        """
        Get an axis aligned bounding box for the given face or edge.
        
        :param range:
        The bounding box.
        
        :param subEntity:
        The face or edge sub-entity to query.
        
        :returns:
        SUCCESS if bounding box could be computed.
        """
        ...
    
    @staticmethod
    def GetVertexEdges(*args, **kwargs):
        """
        GetVertexEdges(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of edges for the input vertex sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Edge.
        
        :param subEntity:
        The vertex sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def GetVertexFaces(*args, **kwargs):
        """
        GetVertexFaces(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, in: MSPyDgnPlatform.ISubEntity) -> MSPyDgnPlatform.BentleyStatus
        
        Query the set of faces for the input vertex sub-entity.
        
        :param subEntities:
        A vector to hold the sub-entities of type SubEntityType_Face.
        
        :param subEntity:
        The vertex sub-entity to query.
        
        :returns:
        SUCCESS if input entity was the correct type and output vector was
        populated.
        """
        ...
    
    @staticmethod
    def IsPointInsideBody(entity: MSPyDgnPlatform.ISolidKernelEntity, testPt: MSPyBentleyGeom.DPoint3d) -> bool:
        """
        Test if a point is inside or on the boundary of the given body.
        
        :param entity:
        The entity to test.
        
        :param testPt:
        The space point.
        
        :returns:
        true if point is not outside the body.
        """
        ...
    
    @staticmethod
    def Locate(entity: MSPyDgnPlatform.ISolidKernelEntity, boresite: MSPyBentleyGeom.DRay3d, intersectEntities: MSPyDgnPlatform.ISubEntityPtrArray, intersectPts: MSPyBentleyGeom.DPoint3dArray, intersectParams: MSPyBentleyGeom.DPoint2dArray, maxFace: int, maxEdge: int, maxVertex: int, maxDistance: float) -> bool:
        """
        Pick face, edge, and vertex sub-entities of a body by their proximity
        to a ray.
        
        :param entity:
        The entity to pick sub-entities for.
        
        :param boresite:
        The ray origin and direction.
        
        :param intersectEntities:
        The selected sub-entities.
        
        :param intersectPts:
        The hit points on the selected sub-entities.
        
        :param intersectParams:
        The parameters on the selected sub-entities. For edge hits x is
        the u parameter (y always 0). Not meaningful for vertex hits
        (always 0,0).
        
        :param maxFace:
        The maximum number of face hits to return. Pass 0 to not pick
        faces.
        
        :param maxEdge:
        The maximum number of edge hits to return. Pass 0 to not pick
        edges.
        
        :param maxVertex:
        The maximum number of vertex hits to return. Pass 0 to not pick
        vertices.
        
        :param maxDistance:
        An edge or vertex will be picked if it is within this distance
        from the ray. Not used for face picking. @note The returned
        entities are ordered by increasing distance from ray origin to hit
        point on entity.
        
        :returns:
        true if ray intersected a requested entity type.
        """
        ...
    
    class Modify:
        """
        None
        """
    
    @staticmethod
    def BlendEdges(target: MSPyDgnPlatform.ISolidKernelEntity, edges: MSPyDgnPlatform.ISubEntityPtrArray, radii: MSPyBentleyGeom.DoubleArray, propagateSmooth: bool = True) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the specified edges of the given body by changing them into
            faces having the requested blending surface geometry.
            
            :param target:
            The target body to blend.
            
            :param edges:
            The array of edge sub-entities to attach blends to.
            
            :param radii:
            The array of blend radius values for each edge.
            
            :param nEdges:
            Count of edge sub-entities.
            
            :param propagateSmooth:
            Whether to automatically continue blend along connected and
            tangent edges that aren't explicitly specified in edges array.
            
            :returns:
            SUCCESS if blends could be created.
            """
            ...
        
    @staticmethod
    def BooleanCut(*args, **kwargs):
            """
            Overloaded function.
            
            1. BooleanCut(target: MSPyDgnPlatform.ISolidKernelEntity, planarTool: MSPyBentleyGeom.CurveVector, directionMode: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, depthMode: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, distance: float, invert: bool, defaultNormal: MSPyBentleyGeom.DVec3d, nodeId: int) -> MSPyDgnPlatform.BentleyStatus
            
            Modify the target body by subtracting a cut body produced from
            sweeping the sheet tool body according to the specified cut direction
            and depth.
            
            :param target:
            The target body to modify.
            
            :param planarTool:
            The planar sheet body for the cut profile.
            
            :param directionMode:
            The sweep direction relative to the sheet body normal of the cut
            profile.
            
            :param depthMode:
            To specify if the cut should extended through the entire body or
            only create a pocket of fixed depth.
            
            :param distance:
            To specify the cut depth for CutDepthMode.Blind.
            
            :param invert:
            Set true to reverse the sense of the tool (outside rather than
            inside if closed).
            
            :param defaultNormal:
            If not NULL, uused to to determine the cut direction only if the
            tool is a line segment.
            
            :param nodeId:
            The node id of the entity.
            
            :returns:
            SUCCESS if cut operation was completed.
            
            2. BooleanCut(target: MSPyDgnPlatform.ISolidKernelEntity, planarTool: MSPyBentleyGeom.CurveVector, directionMode: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, depthMode: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, distance: float, invert: bool, defaultNormal: MSPyBentleyGeom.DVec3d, nodeId: int, cutDirection: MSPyBentleyGeom.DVec3d) -> MSPyDgnPlatform.BentleyStatus
            
            Modify the target body by subtracting a cut body produced from
            sweeping the sheet tool body according to the specified cut direction
            and depth.
            
            :param target:
            The target body to modify.
            
            :param planarTool:
            The planar sheet body for the cut profile.
            
            :param directionMode:
            The sweep direction relative to the sheet body normal of the cut
            profile.
            
            :param depthMode:
            To specify if the cut should extended through the entire body or
            only create a pocket of fixed depth.
            
            :param distance:
            To specify the cut depth for CutDepthMode.Blind.
            
            :param invert:
            Set true to reverse the sense of the tool (outside rather than
            inside if closed).
            
            :param defaultNormal:
            If not NULL, uused to to determine the cut direction only if the
            tool is a line segment.
            
            :param nodeId:
            The node id of the entity.
            
            :returns:
            SUCCESS if cut operation was completed.
            """
            ...
        
    @staticmethod
    def BooleanIntersect(target: MSPyDgnPlatform.ISolidKernelEntity, tools: MSPyDgnPlatform.ISolidKernelEntityPtrArray) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by intersecting with one or more tool bodies.
            
            :param target:
            The target body to modify.
            
            :param tools:
            A list of one or more tool bodies (consumed in boolean).
            
            :param nTools:
            Count of tool bodies.
            
            :returns:
            SUCCESS if boolean operation was completed.
            """
            ...
        
    @staticmethod
    def BooleanSubtract(target: MSPyDgnPlatform.ISolidKernelEntity, tools: MSPyDgnPlatform.ISolidKernelEntityPtrArray) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by subtracting one or more tool bodies.
            
            :param target:
            The target body to modify.
            
            :param tools:
            Array of one or more tool bodies (consumed in boolean).
            
            :param nTools:
            Count of tool bodies.
            
            :returns:
            SUCCESS if boolean operation was completed.
            """
            ...
        
    @staticmethod
    def BooleanUnion(target: MSPyDgnPlatform.ISolidKernelEntity, tools: MSPyDgnPlatform.ISolidKernelEntityPtrArray) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by uniting with one or more tool bodies.
            
            :param target:
            The target body to modify.
            
            :param tools:
            Array of one or more tool bodies (consumed in boolean).
            
            :param nTools:
            Count of tool bodies.
            
            :returns:
            SUCCESS if boolean operation was completed.
            """
            ...
        
    @staticmethod
    def ChamferEdges(target: MSPyDgnPlatform.ISolidKernelEntity, edges: MSPyDgnPlatform.ISubEntityPtrArray, values1: MSPyBentleyGeom.DoubleArray, values2: MSPyBentleyGeom.DoubleArray, mode: MSPyMstnPlatform.SolidUtil.Modify.ChamferMode, propagateSmooth: bool = True) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the specified edges of the given body by changing them into
            faces having the requested chamfer surface geometry.
            
            :param target:
            The target body to chamfer.
            
            :param edges:
            The array of edge sub-entities to attach chamfers to.
            
            :param values1:
            The array of chamfer values for each edge, value meaning varies by
            ChamferMode.
            
            :param values2:
            The array of chamfer values for each edge, value meaning varies by
            ChamferMode. (Unused for ChamferMode.Length)
            
            :param nEdges:
            Count of edge sub-entities.
            
            :param mode:
            Specifies chamfer type and determines how values1 and values2 are
            interpreted and used.
            
            :param propagateSmooth:
            Whether to automatically continue chamfer along connected and
            tangent edges that aren't explicitly specified in edges array.
            
            :returns:
            SUCCESS if chamfers could be created.
            """
            ...
        
    class ChamferMode:
        """
        Members:
        
        eRanges
        
        eLength
        
        eDistances
        
        eDistanceAngle
        
        eAngleDistance
        """
    
        def __init__(self: MSPyMstnPlatform.SolidUtil.Modify.ChamferMode, value: int) -> None:
            ...
        
        eAngleDistance: ChamferMode
        
        eDistanceAngle: ChamferMode
        
        eDistances: ChamferMode
        
        eLength: ChamferMode
        
        eRanges: ChamferMode
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.SolidUtil.Modify.ChamferMode) -> int:
            ...
        
    @staticmethod
    def ClashDetectionBetweenTargetAndTool(target: MSPyDgnPlatform.ISolidKernelEntity, planarTool: MSPyBentleyGeom.CurveVector, directionMode: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, depthMode: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, distance: float, defaultNormal: MSPyBentleyGeom.DVec3d, cutDirection: MSPyBentleyGeom.DVec3d) -> MSPyDgnPlatform.BentleyStatus:
            """
            Get clash result between target and tool from the list of targets
            
            :param clashTool:
            List of target tool causing clashes with the target
            
            :param target:
            The target body
            
            :param planarTool:
            The planar sheet body for the cut profile.
            
            :param directionMode:
            The sweep direction relative to the sheet body normal of the cut
            profile.
            
            :param depthMode:
            To specify if the cut should extended through the entire body or
            only create a pocket of fixed depth.
            
            :param distance:
            To specify the cut depth for CutDepthMode.Blind.
            
            :param invert:
            Set true to reverse the sense of the tool (outside rather than
            inside if closed).
            
            :param defaultNormal:
            If not NULL, uused to to determine the cut direction only if the
            tool is a line segment.
            
            :param cutDirection:
            Cut direction
            
            :returns:
            SUCCESS if there occur clash between given vector and target
            """
            ...
        
    class CutDepthMode:
        """
        Members:
        
        eAll
        
        eBlind
        """
    
        def __init__(self: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode, value: int) -> None:
            ...
        
        eAll: CutDepthMode
        
        eBlind: CutDepthMode
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.SolidUtil.Modify.CutDepthMode) -> int:
            ...
        
    class CutDirectionMode:
        """
        Members:
        
        eForward
        
        eBackward
        
        eBoth
        """
    
        def __init__(self: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode, value: int) -> None:
            ...
        
        eBackward: CutDirectionMode
        
        eBoth: CutDirectionMode
        
        eForward: CutDirectionMode
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.SolidUtil.Modify.CutDirectionMode) -> int:
            ...
        
    @staticmethod
    def DeleteFaces(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target solid or sheet body by removing selected faces and
            healing.
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be delted.
            
            :param nFaces:
            Count of face sub-entities.
            
            :returns:
            SUCCESS if faces could be deleted.
            """
            ...
        
    @staticmethod
    def DeleteRedundantTopology(target: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by removing redundant topology. An example of
            redundant topololgy would be an edge where the faces on either side
            have identical surface geometry.
            
            :param target:
            The target body to modify.
            
            :returns:
            SUCCESS if operation was completed.
            """
            ...
        
    @staticmethod
    def Emboss(target: MSPyDgnPlatform.ISolidKernelEntity, tool: MSPyDgnPlatform.ISolidKernelEntity, reverseDirection: bool) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by adding a protrusion constructed from the
            sheet tool body and its imprint on the target body.
            
            :param target:
            The target body to modify, can be a sheet or solid.
            
            :param tool:
            The planar sheet body for the emboss profile.
            
            :param reverseDirection:
            To specify if material is to be added in the same direction or
            opposite direction to the surface normal of the tool sheet body.
            
            :returns:
            SUCCESS if emboss operation was completed.
            """
            ...
        
    @staticmethod
    def HollowFaces(*args, **kwargs):
            """
            HollowFaces(target: MSPyDgnPlatform.ISolidKernelEntity, defaultDistance: float, faces: MSPyDgnPlatform.ISubEntityPtrArray, distances: MSPyBentleyGeom.DoubleArray, addStep: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption = <StepFacesOption.eADD_STEP_NonCoincident: 2>) -> MSPyDgnPlatform.BentleyStatus
            
            Modify the target solid body by hollowing using specified face
            offsets.
            
            :param target:
            The target body to hollow.
            
            :param defaultDistance:
            The offset distance to apply to any face not specifically included
            in the faces array.
            
            :param faces:
            The array of faces to be offset by other than the default offset
            distance.
            
            :param distances:
            The array of offsets for each face.
            
            :param nFaces:
            Count of face sub-entities.
            
            :param addStep:
            The option for how to handle the creation of step faces. @note A
            positive offset goes outwards (in the direction of the surface
            normal), a negative offset is inwards, and a face with zero offset
            will be pierced/removed.
            
            :returns:
            SUCCESS if hollow could be created.
            """
            ...
        
    @staticmethod
    def ImprintCurveVectorOnBody(target: MSPyDgnPlatform.ISolidKernelEntity, curveVector: MSPyBentleyGeom.CurveVector, direction: MSPyBentleyGeom.DVec3d, extendOpenCurvesToEdge: bool = True) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by imprinting new edges from the specified
            curve vector.
            
            :param target:
            The target body to imprint.
            
            :param curveVector:
            The curve geometry to imprint.
            
            :param direction:
            The project direction for imprinting the curve.
            
            :param extendOpenCurvesToEdge:
            The option to extend an open curve to ensure that it splits the
            face.
            
            :returns:
            SUCCESS if imprint created.
            """
            ...
        
    @staticmethod
    def ImprintWiresOnFace(face: MSPyDgnPlatform.ISubEntity, wires: MSPyDgnPlatform.ISolidKernelEntityPtrArray, extendToEdge: bool) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify a face of a body by imprinting the specified wire bodies.
            
            :param face:
            The target face sub-entity to imprint.
            
            :param wires:
            The vector of wire bodies to imprint the curves of onto the face.
            
            :param extendToEdge:
            The option to extend an open wire body to ensure that it splits
            the face.
            
            :returns:
            SUCCESS if face imprint created.
            """
            ...
        
    @staticmethod
    def OffsetFaces(*args, **kwargs):
            """
            OffsetFaces(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, distances: MSPyBentleyGeom.DoubleArray, addStep: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption = <StepFacesOption.eADD_STEP_NonCoincident: 2>) -> MSPyDgnPlatform.BentleyStatus
            
            Modify the target solid or sheet body by offsetting selected faces.
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be offset.
            
            :param distances:
            The array of offsets for each face.
            
            :param nFaces:
            Count of face sub-entities.
            
            :param addStep:
            The option for how to handle the creation of step faces.
            
            :returns:
            SUCCESS if faces could be offset.
            """
            ...
        
    @staticmethod
    def OffsetFacesWithStatus(*args, **kwargs):
            """
            OffsetFacesWithStatus(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, distances: MSPyBentleyGeom.DoubleArray, addStep: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption, offsetStatus: int = <StepFacesOption.eADD_STEP_NonCoincident: 2>) -> tuple
            """
            ...
        
    @staticmethod
    def OffsetThroughHole(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, distances: MSPyBentleyGeom.DoubleArray) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target solid by offsetting face through body. It will punch
            hole .
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be offset.
            
            :param distances:
            The array of offsets for each face.
            
            :param nFaces:
            Count of face sub-entities.
            
            :returns:
            SUCCESS if hole cutting is successfull.
            """
            ...
        
    @staticmethod
    def SewBodies(sewn: MSPyDgnPlatform.ISolidKernelEntityPtrArray, unsewn: MSPyDgnPlatform.ISolidKernelEntityPtrArray, tools: MSPyDgnPlatform.ISolidKernelEntityPtrArray, gapWidthBound: float, nIterations: int = 1) -> MSPyDgnPlatform.BentleyStatus:
            """
            Sew the given set of sheet bodies together by joining those that share
            edges in common.
            
            :param sewn:
            The new bodies produced by sewing.
            
            :param unsewn:
            The bodies that were not able to be sewn.
            
            :param tools:
            The array of sheet bodies. (invalidated after sew).
            
            :param nTools:
            Count of tool bodies.
            
            :param gapWidthBound:
            Defines a limit on the width of the gap between sheet body edges
            that will be allowed to remain.
            
            :param nIterations:
            To request repeated sew attempts that automatically increase gap
            up to limit set by gapWidthBound.
            
            :returns:
            SUCCESS if some bodies were able to be sewn together.
            """
            ...
        
    @staticmethod
    def SpinBody(target: MSPyDgnPlatform.ISolidKernelEntity, axis: MSPyBentleyGeom.DRay3d, angle: float) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by spinning along an arc specified by a revolve
            axis and sweep angle.
            
            :param target:
            The target body to spin. A wire body becomes a sheet, and a sheet
            body becomes a solid.
            
            :param axis:
            The revolve axis.
            
            :param angle:
            The sweep angle. (value in range of -2pi to 2pi)
            
            :returns:
            SUCCESS if spin could be completed.
            """
            ...
        
    @staticmethod
    def SpinFaces(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, axis: MSPyBentleyGeom.DRay3d, angle: float) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target solid or sheet body by spinning selected faces along
            an arc specified by a revolve axis and sweep angle.
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be spun.
            
            :param nFaces:
            Count of face sub-entities.
            
            :param axis:
            The revolve axis.
            
            :param angle:
            The sweep angle. (value in range of -2pi to 2pi)
            
            :returns:
            SUCCESS if faces could be spun.
            """
            ...
        
    class StepFacesOption:
        """
        Members:
        
        eADD_STEP_No
        
        eADD_STEP_Smooth
        
        eADD_STEP_NonCoincident
        
        eADD_STEP_All
        """
    
        def __init__(self: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption, value: int) -> None:
            ...
        
        eADD_STEP_All: StepFacesOption
        
        eADD_STEP_No: StepFacesOption
        
        eADD_STEP_NonCoincident: StepFacesOption
        
        eADD_STEP_Smooth: StepFacesOption
        
        @property
        def name(self: handle) -> str:
            ...
        
        @property
        def value(arg0: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption) -> int:
            ...
        
    @staticmethod
    def SweepBody(target: MSPyDgnPlatform.ISolidKernelEntity, path: MSPyBentleyGeom.DVec3d) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target body by sweeping along a path vector.
            
            :param target:
            The target body to sweep. A wire body becomes a sheet, and a sheet
            body becomes a solid.
            
            :param path:
            A scaled vector to define the sweep direction and distance.
            
            :returns:
            SUCCESS if sweep could be completed.
            """
            ...
        
    @staticmethod
    def SweepFaces(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, path: MSPyBentleyGeom.DVec3d) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target solid or sheet body by sweeping selected faces along
            a path vector.
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be swept.
            
            :param nFaces:
            Count of face sub-entities.
            
            :param path:
            A scaled vector to define the sweep direction and distance.
            
            :returns:
            SUCCESS if faces could be swept.
            """
            ...
        
    @staticmethod
    def ThickenSheet(target: MSPyDgnPlatform.ISolidKernelEntity, frontDistance: float, backDistance: float) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the target sheet body by thickening to create a solid body.
            
            :param target:
            The target sheet body to thicken.
            
            :param frontDistance:
            The offset distance in the direction of the sheet body face
            normal.
            
            :param backDistance:
            The offset distance in the opposite direction of the sheet body
            face normal.
            
            :returns:
            SUCCESS if thicken could be completed.
            """
            ...
        
    @staticmethod
    def ThickenSheetWithStatus(target: MSPyDgnPlatform.ISolidKernelEntity, frontDistance: float, backDistance: float, status: int) -> tuple:
            ...
        
    @staticmethod
    def TransformBody(entity: MSPyDgnPlatform.ISolidKernelEntity, transform: MSPyBentleyGeom.Transform) -> MSPyDgnPlatform.BentleyStatus:
            """
            Modify the entity transform for the given body by pre-multiplying the
            current entity transform with the input transform.
            
            :param entity:
            The body whose body to uor transform is to be updated.
            
            :param transform:
            The transform to apply to the body. @note This method does not
            change the BRep data in any way, it only changes it's body to uor
            transform. This is a helper method added for discoverabiliy that
            is the same as calling
            ISolidKernelEntity.PreMultiplyEntityTransformInPlace.
            
            :returns:
            SUCCESS if transform was updated.
            """
            ...
        
    @staticmethod
    def TransformFaces(*args, **kwargs):
            """
            TransformFaces(target: MSPyDgnPlatform.ISolidKernelEntity, faces: MSPyDgnPlatform.ISubEntityPtrArray, translations: MSPyBentleyGeom.TransformArray, addStep: MSPyMstnPlatform.SolidUtil.Modify.StepFacesOption = <StepFacesOption.eADD_STEP_NonCoincident: 2>) -> MSPyDgnPlatform.BentleyStatus
            
            Modify the target solid or sheet body by transforming selected faces.
            
            :param target:
            The target body to modify.
            
            :param faces:
            The array of faces to be transformed.
            
            :param translations:
            The array of transforms for each face.
            
            :param nFaces:
            Count of face sub-entities.
            
            :param addStep:
            The option for how to handle the creation of step faces.
            
            :returns:
            SUCCESS if faces could be transformed.
            """
            ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
        
        eADD_STEP_All: StepFacesOption
        
        eADD_STEP_No: StepFacesOption
        
        eADD_STEP_NonCoincident: StepFacesOption
        
        eADD_STEP_Smooth: StepFacesOption
        
        eAll: CutDepthMode
        
        eAngleDistance: ChamferMode
        
        eBackward: CutDirectionMode
        
        eBlind: CutDepthMode
        
        eBoth: CutDirectionMode
        
        eDistanceAngle: ChamferMode
        
        eDistances: ChamferMode
        
        eForward: CutDirectionMode
        
        eLength: ChamferMode
        
        eRanges: ChamferMode
        
    @staticmethod
    def RayTestFace(subEntity: MSPyDgnPlatform.ISubEntity, boresite: MSPyBentleyGeom.DRay3d, intersectPts: MSPyBentleyGeom.DPoint3dArray, intersectParams: MSPyBentleyGeom.DPoint2dArray) -> bool:
        """
        Get the ray intersection with a face.
        
        :param subEntity:
        The face to intersect.
        
        :param boresite:
        The ray origin and direction.
        
        :param intersectPts:
        The hit points on the face.
        
        :param intersectParams:
        The uv parameters on the face.
        
        :returns:
        true if ray intersects face.
        """
        ...
    
    class TopologyID:
        """
        None
        """
    
    @staticmethod
    def AddNodeIdAttributes(entity: MSPyDgnPlatform.ISolidKernelEntity, nodeId: int, overrideExisting: bool) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def DeleteNodeIdAttributes(entity: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def EdgesFromId(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, edgeId: MSPyBentleyGeom.EdgeId, entity: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def FacesFromId(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, faceId: MSPyBentleyGeom.FaceId, entity: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def FindNodeIdRange(entity: MSPyDgnPlatform.ISolidKernelEntity) -> tuple:
            """
            Find the highest and lowest nodeId values from the topology ids
            currently assigned to the faces of the given body. Used to avoid
            nodeId conflicts between target and tool bodies.
            
            :param entity:
            The solid or sheet body to inspect.
            
            :param highestNodeId:
            The highest nodeId currently assigned.
            
            :param lowestNodeId:
            The lowest nodeId currently assigned.
            
            :returns:
            SUCCESS if face ids are assigned to the body.
            """
            ...
        
    @staticmethod
    def IdFromEdge(subEntity: MSPyDgnPlatform.ISubEntity, useHighestId: bool) -> tuple:
            """
            Get the EdgeId currently assigned to a given edge sub-entity.
            
            :param edgeId:
            The requested nodeId-entityId pairs.
            
            :param subEntity:
            The edge sub-entity to query.
            
            :param useHighestId:
            true to return the highest nodeId-entityId pairs for this face,
            false to return the lowest. Typically true.
            
            :returns:
            SUCCESS if an EdgeId was assigned.
            """
            ...
        
    @staticmethod
    def IdFromFace(subEntity: MSPyDgnPlatform.ISubEntity, useHighestId: bool) -> tuple:
            """
            Get the FaceId currently assigned to a given face sub-entity.
            
            :param faceId:
            The requested nodeId-entityId pair.
            
            :param subEntity:
            The face sub-entity to query.
            
            :param useHighestId:
            true to return the highest nodeId-entityId pair for this face,
            false to return the lowest. Typically true.
            
            :returns:
            SUCCESS if a FaceId was assigned.
            """
            ...
        
    @staticmethod
    def IdFromVertex(subEntity: MSPyDgnPlatform.ISubEntity, useHighestId: bool) -> tuple:
            """
            Get the VertexId currently assigned to a given vertex sub-entity.
            
            :param vertexId:
            The requested nodeId-entityId triple.
            
            :param subEntity:
            The vertex sub-entity to query.
            
            :param useHighestId:
            true to return the highest nodeId-entityId triple for this face,
            false to return the lowest. Typically true.
            
            :returns:
            SUCCESS if a VertexId was assigned.
            """
            ...
        
    @staticmethod
    def IncrementNodeIdAttributes(entity: MSPyDgnPlatform.ISolidKernelEntity, increment: int) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    @staticmethod
    def VerticesFromId(subEntities: MSPyDgnPlatform.ISubEntityPtrArray, vertexId: MSPyBentleyGeom.VertexId, entity: MSPyDgnPlatform.ISolidKernelEntity) -> MSPyDgnPlatform.BentleyStatus:
            ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
        
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SolverGeometry:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class StateCallback:
    """
    None
    """

    @staticmethod
    def SetCommandCleanupFunction(newFunc: Callable[[str], None], funcID: str) -> Callable[[str], None]:
        ...
    
    @staticmethod
    def SetComplexDynamicsFunction(newFunc: Callable[[MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.DgnDrawMode], None], funcID: str) -> Callable[[MSPyBentleyGeom.DPoint3d, int, MSPyDgnPlatform.DgnDrawMode], None]:
        ...
    
    @staticmethod
    def SetDataPointFunction(newFunc: Callable[[MSPyBentleyGeom.DPoint3d, int], None], funcID: str) -> Callable[[MSPyBentleyGeom.DPoint3d, int], None]:
        ...
    
    @staticmethod
    def SetDragInitFunction(newFunc: Callable[[MSPyBentleyGeom.DPoint3d, int], None], funcID: str) -> Callable[[MSPyBentleyGeom.DPoint3d, int], None]:
        ...
    
    @staticmethod
    def SetKeyinFunction(newFunc: Callable[[str, int, str], None], funcID: str) -> Callable[[str, int, str], None]:
        ...
    
    @staticmethod
    def SetOopsFunction(newFunc: Callable[[int], None], funcID: str) -> Callable[[int], None]:
        ...
    
    @staticmethod
    def SetRedoFunction(newFunc: Callable[[int], None], funcID: str) -> Callable[[int], None]:
        ...
    
    @staticmethod
    def SetResetFunction(newFunc: Callable[[str], None], funcID: str) -> Callable[[str], None]:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class StringUtility:
    """
    None
    """

    @staticmethod
    def FromDirection(angle_str: MSPyBentley.WString, abs_angle: float, format: MSPyDgnPlatform.AngleFormatVals, igdsChars: bool, addTrueNorth: bool, angleMode: int, precision: int, leadingZero: bool, trailingZeros: bool, modelRef: MSPyDgnPlatform.DgnModelRef) -> None:
        ...
    
    @staticmethod
    def FromUors(uor_string: MSPyBentley.WString, uors: float) -> None:
        ...
    
    @staticmethod
    def ToDirection(arg0: MSPyBentley.WString) -> float:
        ...
    
    @staticmethod
    def ToUors(arg0: MSPyBentley.WString) -> float:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SubstituteElemStatus:
    """
    Members:
    
    eSUBSTELEM_STATUS_Normal
    
    eSUBSTELEM_STATUS_Block
    """

    def __init__(self: MSPyMstnPlatform.SubstituteElemStatus, value: int) -> None:
        ...
    
    eSUBSTELEM_STATUS_Block: SubstituteElemStatus
    
    eSUBSTELEM_STATUS_Normal: SubstituteElemStatus
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SubstituteElemStatus) -> int:
        ...
    
class SurfaceOrientation:
    """
    Members:
    
    eNotSpecified
    
    eAligned
    
    eAntiAligned
    """

    def __init__(self: MSPyMstnPlatform.SurfaceOrientation, value: int) -> None:
        ...
    
    eAligned: SurfaceOrientation
    
    eAntiAligned: SurfaceOrientation
    
    eNotSpecified: SurfaceOrientation
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SurfaceOrientation) -> int:
        ...
    
class SysColor:
    """
    Members:
    
    eSYSCOLOR_FIXED_BASE
    
    eSYSCOLOR_FIXED_BLACK
    
    eSYSCOLOR_FIXED_BLUE
    
    eSYSCOLOR_FIXED_GREEN
    
    eSYSCOLOR_FIXED_CYAN
    
    eSYSCOLOR_FIXED_RED
    
    eSYSCOLOR_FIXED_MAGENTA
    
    eSYSCOLOR_FIXED_YELLOW
    
    eSYSCOLOR_FIXED_WHITE
    
    eSYSCOLOR_FIXED_LGREY
    
    eSYSCOLOR_FIXED_DGREY
    
    eSYSCOLOR_FIXED_MGREY
    
    eSYSCOLOR_FIXED_PSEUDOWHITE
    
    eSYSCOLOR_FIXED_DARKBLUE
    
    eSYSCOLOR_FIXED_TURQUOISE
    
    eSYSCOLOR_FIXED_DARKGREEN
    
    eSYSCOLOR_FIXED_MAROON
    
    eSYSCOLOR_FIXED_VIOLET
    
    eSYSCOLOR_FIXED_DARKYELLOW
    
    eSYSCOLOR_BACKGROUND_PALEYELLOW
    
    eSYSCOLOR_FIXED_MAXCOLORS
    
    eSYSCOLOR_WINDOWS_BASE
    
    eSYSCOLOR_WINDOWS_WINBACKGROUND
    
    eSYSCOLOR_WINDOWS_WINTEXT
    
    eSYSCOLOR_WINDOWS_MENU
    
    eSYSCOLOR_WINDOWS_MENUTEXT
    
    eSYSCOLOR_WINDOWS_SCROLLBAR
    
    eSYSCOLOR_WINDOWS_BTNFACE
    
    eSYSCOLOR_WINDOWS_BTNSHADOW
    
    eSYSCOLOR_WINDOWS_BTNTEXT
    
    eSYSCOLOR_WINDOWS_BTNHIGHLIGHT
    
    eSYSCOLOR_WINDOWS_GRAYTEXT
    
    eSYSCOLOR_WINDOWS_HIGHLIGHT
    
    eSYSCOLOR_WINDOWS_HIGHLIGHTTEXT
    
    eSYSCOLOR_WINDOWS_WINFRAME
    
    eSYSCOLOR_WINDOWS_DESKTOP
    
    eSYSCOLOR_WINDOWS_APPWORKSPACE
    
    eSYSCOLOR_WINDOWS_TITLEBAR
    
    eSYSCOLOR_WINDOWS_ITITLEBAR
    
    eSYSCOLOR_WINDOWS_TITLEBARTEXT
    
    eSYSCOLOR_WINDOWS_ITITLEBARTEXT
    
    eSYSCOLOR_WINDOWS_BORDER
    
    eSYSCOLOR_WINDOWS_IBORDER
    
    eSYSCOLOR_WINDOWS_DLOGBACKGROUND
    
    eSYSCOLOR_WINDOWS_TOOLTIPBG
    
    eSYSCOLOR_WINDOWS_TOOLTIPTEXT
    
    eSYSCOLOR_WINDOWS_LIGHT
    
    eSYSCOLOR_WINDOWS_DARKSHADOW
    
    eSYSCOLOR_WINDOWS_GRADIENTTITLEBAR
    
    eSYSCOLOR_WINDOWS_GRADIENTITITLEBAR
    
    eSYSCOLOR_WINDOWS_MENUBAR
    
    eSYSCOLOR_WINDOWS_MENUHILIGHT
    
    eSYSCOLOR_WINDOWS_TOOLBARAREABG
    
    eSYSCOLOR_WINDOWS_DIALOGAREABG
    
    eSYSCOLOR_WINDOWS_STATUSBAR
    
    eSYSCOLOR_WINDOWS_RIBBONBG
    
    eSYSCOLOR_WINDOWS_MAXCOLORS
    
    eSYSCOLOR_MAXCOLOR
    
    eSYSCOLOR_NCOLORS
    """

    def __init__(self: MSPyMstnPlatform.SysColor, value: int) -> None:
        ...
    
    eSYSCOLOR_BACKGROUND_PALEYELLOW: SysColor
    
    eSYSCOLOR_FIXED_BASE: SysColor
    
    eSYSCOLOR_FIXED_BLACK: SysColor
    
    eSYSCOLOR_FIXED_BLUE: SysColor
    
    eSYSCOLOR_FIXED_CYAN: SysColor
    
    eSYSCOLOR_FIXED_DARKBLUE: SysColor
    
    eSYSCOLOR_FIXED_DARKGREEN: SysColor
    
    eSYSCOLOR_FIXED_DARKYELLOW: SysColor
    
    eSYSCOLOR_FIXED_DGREY: SysColor
    
    eSYSCOLOR_FIXED_GREEN: SysColor
    
    eSYSCOLOR_FIXED_LGREY: SysColor
    
    eSYSCOLOR_FIXED_MAGENTA: SysColor
    
    eSYSCOLOR_FIXED_MAROON: SysColor
    
    eSYSCOLOR_FIXED_MAXCOLORS: SysColor
    
    eSYSCOLOR_FIXED_MGREY: SysColor
    
    eSYSCOLOR_FIXED_PSEUDOWHITE: SysColor
    
    eSYSCOLOR_FIXED_RED: SysColor
    
    eSYSCOLOR_FIXED_TURQUOISE: SysColor
    
    eSYSCOLOR_FIXED_VIOLET: SysColor
    
    eSYSCOLOR_FIXED_WHITE: SysColor
    
    eSYSCOLOR_FIXED_YELLOW: SysColor
    
    eSYSCOLOR_MAXCOLOR: SysColor
    
    eSYSCOLOR_NCOLORS: SysColor
    
    eSYSCOLOR_WINDOWS_APPWORKSPACE: SysColor
    
    eSYSCOLOR_WINDOWS_BASE: SysColor
    
    eSYSCOLOR_WINDOWS_BORDER: SysColor
    
    eSYSCOLOR_WINDOWS_BTNFACE: SysColor
    
    eSYSCOLOR_WINDOWS_BTNHIGHLIGHT: SysColor
    
    eSYSCOLOR_WINDOWS_BTNSHADOW: SysColor
    
    eSYSCOLOR_WINDOWS_BTNTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_DARKSHADOW: SysColor
    
    eSYSCOLOR_WINDOWS_DESKTOP: SysColor
    
    eSYSCOLOR_WINDOWS_DIALOGAREABG: SysColor
    
    eSYSCOLOR_WINDOWS_DLOGBACKGROUND: SysColor
    
    eSYSCOLOR_WINDOWS_GRADIENTITITLEBAR: SysColor
    
    eSYSCOLOR_WINDOWS_GRADIENTTITLEBAR: SysColor
    
    eSYSCOLOR_WINDOWS_GRAYTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_HIGHLIGHT: SysColor
    
    eSYSCOLOR_WINDOWS_HIGHLIGHTTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_IBORDER: SysColor
    
    eSYSCOLOR_WINDOWS_ITITLEBAR: SysColor
    
    eSYSCOLOR_WINDOWS_ITITLEBARTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_LIGHT: SysColor
    
    eSYSCOLOR_WINDOWS_MAXCOLORS: SysColor
    
    eSYSCOLOR_WINDOWS_MENU: SysColor
    
    eSYSCOLOR_WINDOWS_MENUBAR: SysColor
    
    eSYSCOLOR_WINDOWS_MENUHILIGHT: SysColor
    
    eSYSCOLOR_WINDOWS_MENUTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_RIBBONBG: SysColor
    
    eSYSCOLOR_WINDOWS_SCROLLBAR: SysColor
    
    eSYSCOLOR_WINDOWS_STATUSBAR: SysColor
    
    eSYSCOLOR_WINDOWS_TITLEBAR: SysColor
    
    eSYSCOLOR_WINDOWS_TITLEBARTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_TOOLBARAREABG: SysColor
    
    eSYSCOLOR_WINDOWS_TOOLTIPBG: SysColor
    
    eSYSCOLOR_WINDOWS_TOOLTIPTEXT: SysColor
    
    eSYSCOLOR_WINDOWS_WINBACKGROUND: SysColor
    
    eSYSCOLOR_WINDOWS_WINFRAME: SysColor
    
    eSYSCOLOR_WINDOWS_WINTEXT: SysColor
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SysColor) -> int:
        ...
    
class SystemCallback:
    """
    None
    """

    @staticmethod
    def SetAcsOperationFunction(newFunc: Callable[[str, str, MSPyDgnPlatform.ACSType, AcsChangeType, MSPyDgnPlatform.IAuxCoordSys, MSPyDgnPlatform.ACSEventType], None], funcID: str) -> Callable[[str, str, MSPyDgnPlatform.ACSType, AcsChangeType, MSPyDgnPlatform.IAuxCoordSys, MSPyDgnPlatform.ACSEventType], None]:
        """
        @description Set a function that is called when an ACS is created,
        deleted, or modified.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        :returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        
        Remark:
        s Applications should register a MSPyDgnPlatform.IACSEvents listener
        instead.
        """
        ...
    
    @staticmethod
    def SetActiveElementTemplateChangedFunction(newFunc: Callable[[str, str], None], funcID: str) -> Callable[[str, str], None]:
        """
        @description Allows you to be notified after the active Element
        Template is changed.
        """
        ...
    
    @staticmethod
    def SetActiveParamChangedFunction(newFunc: Callable[[int], None], funcID: str) -> Callable[[int], None]:
        """
        @description Set a function that is called when the state of an active
        parameter changes.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        :returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetApplicationAreaChangeFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        """
        @description Set a function that is called when the Application Area
        has changed.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        Returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetBeforeReferenceWriteFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, bool], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, bool], None]:
        ...
    
    @staticmethod
    def SetBeforeViewsOpenFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        ...
    
    @staticmethod
    def SetClipboardUpdatedFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        """
        @description Allows you to be notified when the Clipboard has been
        updated.
        """
        ...
    
    @staticmethod
    def SetCompressDgnFileFunction(newFunc: Callable[[MSPyBentley.WString, MSPyMstnPlatform.CompressType], int], funcID: str) -> Callable[[MSPyBentley.WString, MSPyMstnPlatform.CompressType], int]:
        ...
    
    @staticmethod
    def SetCompressDgnModelFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModel, MSPyMstnPlatform.CompressType], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModel, MSPyMstnPlatform.CompressType], None]:
        ...
    
    @staticmethod
    def SetDgnCacheUnloadingFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModel], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModel], None]:
        ...
    
    @staticmethod
    def SetDgnFileLoadedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnFile], None]:
        ...
    
    @staticmethod
    def SetDgnFileUnloadingFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnFile], None]:
        ...
    
    @staticmethod
    def SetDgnLibsChangedFunction(newFunc: Callable[[MSPyMstnPlatform.DgnLibSelector], None], funcID: str) -> Callable[[MSPyMstnPlatform.DgnLibSelector], None]:
        """
        @description Allows you to be notified when the set of DgnLibs has
        changed.
        """
        ...
    
    @staticmethod
    def SetDimStyleChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int, DimensionStyleChangeType], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int, DimensionStyleChangeType], None]:
        """
        @Description Set a function that is called each time a dimension style
        is added, deleted, or updated in a file. Also called when the active
        dimension style changes.
        
        :param newFunc The new function to call.
        :param funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set for
        this MdlApp, or NULL.
        
        Remark:
        s This method is superceded by DimensionStyle.AddListener which
        provides more detailed information.
        """
        ...
    
    @staticmethod
    def SetElmDscrCopyFunction(newFunc: Callable[[MSPyDgnPlatform.EditElementHandle, MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.DgnModelRef, bool], None], funcID: str) -> Callable[[MSPyDgnPlatform.EditElementHandle, MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.DgnModelRef, bool], None]:
        """
        @description Set a function that is called when an element is being
        copied between models.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        Returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetExitDesignFileStateFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        ...
    
    @staticmethod
    def SetFenceChangedFunction(newFunc: Callable[[FenceChangedType], None], funcID: str) -> Callable[[FenceChangedType], None]:
        """
        @description Set a function that is called when a fence is defined or
        cleared.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        :returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetFileOutdatedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile, MSPyDgnPlatform.DgnModelRef, MSPyMstnPlatform.FileOutdatedCheck_Reason], bool], funcID: str) -> Callable[[MSPyDgnPlatform.DgnFile, MSPyDgnPlatform.DgnModelRef, MSPyMstnPlatform.FileOutdatedCheck_Reason], bool]:
        ...
    
    @staticmethod
    def SetFileSaveAsFunction(newFunc: Callable[[bool, str], None], funcID: str) -> Callable[[bool, str], None]:
        ...
    
    @staticmethod
    def SetFileSaveFunction(newFunc: Callable[[MSPyDgnPlatform.ProcessChangesWhen, MSPyDgnPlatform.DgnFileChanges, MSPyDgnPlatform.DgnSaveReason, float, MSPyDgnPlatform.DgnFile], None], funcID: str) -> Callable[[MSPyDgnPlatform.ProcessChangesWhen, MSPyDgnPlatform.DgnFileChanges, MSPyDgnPlatform.DgnSaveReason, float, MSPyDgnPlatform.DgnFile], None]:
        ...
    
    @staticmethod
    def SetFilterChangeFunction(newFunc: Callable[[str, int, FilterChangeType], None], funcID: str) -> Callable[[str, int, FilterChangeType], None]:
        ...
    
    @staticmethod
    def SetLevelChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int, MSPyMstnPlatform.LevelChangeType], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int, MSPyMstnPlatform.LevelChangeType], None]:
        ...
    
    @staticmethod
    def SetLevelMaskCachePostChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int], None]:
        ...
    
    @staticmethod
    def SetLevelMaskCachePreChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int], None]:
        ...
    
    @staticmethod
    def SetLevelPreChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int, MSPyMstnPlatform.LevelChangeType], int], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int, MSPyMstnPlatform.LevelChangeType], int]:
        ...
    
    @staticmethod
    def SetLockChangedFunction(newFunc: Callable[[MSPyMstnPlatform.LockChanged_Events], None], funcID: str) -> Callable[[MSPyMstnPlatform.LockChanged_Events], None]:
        """
        @description Set a function that is called when the state of an active
        lock changes.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        Returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetMainToolBoxTaskChangedFunction(newFunc: Callable[[str, str], None], funcID: str) -> Callable[[str, str], None]:
        """
        @description Allows you to be notified after the current UI "main"
        task (e.g. via task navigation) has changed.
        """
        ...
    
    @staticmethod
    def SetMasterfileClosedFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        ...
    
    @staticmethod
    def SetMessageCenterWriteFunction(newFunc: Callable[[MSPyDgnPlatform.OutputMessagePriority, str, str, int], None], funcID: str) -> Callable[[MSPyDgnPlatform.OutputMessagePriority, str, str, int], None]:
        """
        @description Set a function that is called when a message is written
        to the Message Center.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        :returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetModelChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, ModelChangeType], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, ModelChangeType], None]:
        ...
    
    @staticmethod
    def SetModelRefDestroyFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef], None]:
        ...
    
    @staticmethod
    def SetMonitorBatchProcessingFunction(newFunc: Callable[[MSPyMstnPlatform.BatchProcessing_States], None], funcID: str) -> Callable[[MSPyMstnPlatform.BatchProcessing_States], None]:
        ...
    
    @staticmethod
    def SetMonitorViewCommandsFunction(newFunc: Callable[[bool], None], funcID: str) -> Callable[[bool], None]:
        ...
    
    @staticmethod
    def SetNewDesignFileFunction(newFunc: Callable[[str, MSPyMstnPlatform.NewDesignFileReason], None], funcID: str) -> Callable[[str, MSPyMstnPlatform.NewDesignFileReason], None]:
        ...
    
    @staticmethod
    def SetPromptOutputFunction(newFunc: Callable[[str, str, int], None], funcID: str) -> Callable[[str, str, int], None]:
        """
        @description Set a function that is called when a prompt is output to
        the Status Bar.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        Returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetQueryHasPendingFunction(newFunc: Callable[[MSPyDgnPlatform.DgnFile], bool], funcID: str) -> Callable[[MSPyDgnPlatform.DgnFile], bool]:
        ...
    
    @staticmethod
    def SetReferenceAttachFunction(newFunc: Callable[[str, str, MSPyDgnPlatform.DgnModelRef, str, int], int], funcID: str) -> Callable[[str, str, MSPyDgnPlatform.DgnModelRef, str, int], int]:
        ...
    
    @staticmethod
    def SetReferenceAttachQueueFunction(newFunc: Callable[[MSPyMstnPlatform.SystemRefAttachQueueState], None], funcID: str) -> Callable[[MSPyMstnPlatform.SystemRefAttachQueueState], None]:
        ...
    
    @staticmethod
    def SetReferenceAttachedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.DgnAttachmentAttachedReason], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.DgnAttachmentAttachedReason], None]:
        ...
    
    @staticmethod
    def SetReferenceBeforeAttachFunction(newFunc: Callable[[str, MSPyDgnPlatform.DgnModelRef], int], funcID: str) -> Callable[[str, MSPyDgnPlatform.DgnModelRef], int]:
        ...
    
    @staticmethod
    def SetReferenceDetachFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef], int], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef], int]:
        ...
    
    @staticmethod
    def SetReferenceDetachedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, str, MSPyDgnPlatform.DgnAttachmentDetachedReason], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, str, MSPyDgnPlatform.DgnAttachmentDetachedReason], None]:
        ...
    
    @staticmethod
    def SetReferenceModifiedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnAttachment, MSPyDgnPlatform.DgnAttachment, MSPyDgnPlatform.DgnModelRef, bool, bool], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnAttachment, MSPyDgnPlatform.DgnAttachment, MSPyDgnPlatform.DgnModelRef, bool, bool], None]:
        ...
    
    @staticmethod
    def SetReferenceNestingFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.RefAttachNestMode, int, MSPyDgnPlatform.RefAttachNestMode, int, bool], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, MSPyDgnPlatform.RefAttachNestMode, int, MSPyDgnPlatform.RefAttachNestMode, int, bool], None]:
        ...
    
    @staticmethod
    def SetRibbonBackstageOpenedFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        """
        @description Allows you to be notified when the Ribbon's Backstage is
        opened.
        """
        ...
    
    @staticmethod
    def SetSaveSettingsFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        ...
    
    @staticmethod
    def SetSelectedViewChangedFunction(newFunc: Callable[[int, int, bool], None], funcID: str) -> Callable[[int, int, bool], None]:
        ...
    
    @staticmethod
    def SetStatusOutputFunction(newFunc: Callable[[str, int], None], funcID: str) -> Callable[[str, int], None]:
        """
        @description Set a function that is called when a status message is
        output to the Status Bar.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        :returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetTaskNavigationTaskChangingFunction(newFunc: Callable[[MSPyMstnPlatform.MsPyBool, str, str], None], funcID: str) -> Callable[[MSPyMstnPlatform.MsPyBool, str, str], None]:
        """
        @description Allows you to be notified before the current UI task is
        changed. This allows you to cancel the task change, leaving the
        current task active.
        """
        ...
    
    @staticmethod
    def SetTextStyleChangeFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, int, TextStyleChangeType], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, int, TextStyleChangeType], None]:
        """
        @Description Set a function that is called each time a text style is
        added, deleted, or updated in a file. Also called when the active text
        style changes.
        :param newFunc The new function to call.
        :param funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set for this
        MdlApp, or NULL.
        
        Remark:
        s This method is superceded by DgnTextStyle.AddListener which
        provides more detailed information.
        """
        ...
    
    @staticmethod
    def SetUnloadProgramFunction(newFunc: Callable[[MSPyMstnPlatform.UnloadProgramReason], bool], funcID: str) -> Callable[[MSPyMstnPlatform.UnloadProgramReason], bool]:
        """
        @Description An MDL application can use this to set a function to be
        called when the application is about to be unloaded.
        :param unloadFunction The new function to call, or NULL.
        :param funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set for this MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetUpdateSequenceChangedFunction(newFunc: Callable[[MSPyDgnPlatform.DgnModelRef, MSPyBentleyGeom.UpdateSequenceList], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnModelRef, MSPyBentleyGeom.UpdateSequenceList], None]:
        """
        @description Set a function that is called when the model update
        sequence is defined or modified.
        
        :param newFunc:
        The new function to call.
        
        :param funcID:
        Unique ID of the callback function that user defines.
        
        Returns:
        The return value is the previous function that was set for this
        MdlApp, or NULL.
        """
        ...
    
    @staticmethod
    def SetUpgradeV7ToV8Function(newFunc: Callable[[MSPyDgnPlatform.DgnFile, bool, bool], None], funcID: str) -> Callable[[MSPyDgnPlatform.DgnFile, bool, bool], None]:
        ...
    
    @staticmethod
    def SetViewGroupCacheChangeFunction(newFunc: Callable[[str, str, ViewGroupChangeType], None], funcID: str) -> Callable[[str, str, ViewGroupChangeType], None]:
        ...
    
    @staticmethod
    def SetWorkspaceChangedFunction(newFunc: Callable[[], None], funcID: str) -> Callable[[], None]:
        """
        @Description Set a function that is called when the workspace,
        project, or interface changes.
        :param newFunc The new function to call.
        :param funcID Unique ID of the callback function that user defines.
        @Return The return value is the previous function that was set
        for this MdlApp, or NULL.
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class SystemRefAttachQueueState:
    """
    Members:
    
    eSYSTEM_REFATTACHQUEUE_Start
    
    eSYSTEM_REFATTACHQUEUE_Done
    """

    def __init__(self: MSPyMstnPlatform.SystemRefAttachQueueState, value: int) -> None:
        ...
    
    eSYSTEM_REFATTACHQUEUE_Done: SystemRefAttachQueueState
    
    eSYSTEM_REFATTACHQUEUE_Start: SystemRefAttachQueueState
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.SystemRefAttachQueueState) -> int:
        ...
    
class TextStyleChangeType:
    """
    Members:
    
    eTEXTSTYLE_CHANGE_ADD
    
    eTEXTSTYLE_CHANGE_DELETE
    
    eTEXTSTYLE_CHANGE_MODIFY
    
    eTEXTSTYLE_CHANGE_DELETEUNUSED
    
    eTEXTSTYLE_CHANGE_BEFORE_ADD
    
    eTEXTSTYLE_CHANGE_BEFORE_DELETE
    
    eTEXTSTYLE_CHANGE_BEFORE_MODIFY
    """

    def __init__(self: MSPyMstnPlatform.TextStyleChangeType, value: int) -> None:
        ...
    
    eTEXTSTYLE_CHANGE_ADD: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_BEFORE_ADD: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_BEFORE_DELETE: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_BEFORE_MODIFY: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_DELETE: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_DELETEUNUSED: TextStyleChangeType
    
    eTEXTSTYLE_CHANGE_MODIFY: TextStyleChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.TextStyleChangeType) -> int:
        ...
    
class UIItemStateType:
    """
    Members:
    
    eNone_
    
    eVisible
    
    eEnabled
    
    eChecked
    """

    def __init__(self: MSPyMstnPlatform.UIItemStateType, value: int) -> None:
        ...
    
    eChecked: UIItemStateType
    
    eEnabled: UIItemStateType
    
    eNone_: UIItemStateType
    
    eVisible: UIItemStateType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.UIItemStateType) -> int:
        ...
    
class UnloadProgramReason:
    """
    Members:
    
    eSYSTEM_TERMINATED_UNLOADING_APPDOMAIN
    
    eSYSTEM_TERMINATED_ENTERING_RESTRICTED_RIGHTS_MODE
    
    eSYSTEM_TERMINATED_UNLOAD_UI_SERVERS
    
    eSYSTEM_TERMINATED_LIBRARY_UNLOAD
    
    eSYSTEM_TERMINATED_SHUTDOWN
    
    eSYSTEM_TERMINATED_FATAL
    
    eSYSTEM_TERMINATED_COMMAND
    
    eSYSTEM_TERMINATED_EXIT
    
    eSYSTEM_TERMINATED_BY_APP
    
    eSYSTEM_TERMINATED_EXCEPTION
    """

    def __init__(self: MSPyMstnPlatform.UnloadProgramReason, value: int) -> None:
        ...
    
    eSYSTEM_TERMINATED_BY_APP: UnloadProgramReason
    
    eSYSTEM_TERMINATED_COMMAND: UnloadProgramReason
    
    eSYSTEM_TERMINATED_ENTERING_RESTRICTED_RIGHTS_MODE: UnloadProgramReason
    
    eSYSTEM_TERMINATED_EXCEPTION: UnloadProgramReason
    
    eSYSTEM_TERMINATED_EXIT: UnloadProgramReason
    
    eSYSTEM_TERMINATED_FATAL: UnloadProgramReason
    
    eSYSTEM_TERMINATED_LIBRARY_UNLOAD: UnloadProgramReason
    
    eSYSTEM_TERMINATED_SHUTDOWN: UnloadProgramReason
    
    eSYSTEM_TERMINATED_UNLOADING_APPDOMAIN: UnloadProgramReason
    
    eSYSTEM_TERMINATED_UNLOAD_UI_SERVERS: UnloadProgramReason
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.UnloadProgramReason) -> int:
        ...
    
class VertexType:
    """
    Members:
    
    eEdge
    
    eStart
    
    eEnd
    
    eCenter
    
    eParameter
    
    ePointIndex
    
    eEllipseMajor1
    
    eEllipseMajor2
    
    eEllipseMinor1
    
    eEllipseMinor2
    
    eArcPoint
    
    eEllipseMajorEdge
    
    eEllipseMinorEdge
    
    ePlanarFace
    """

    def __init__(self: MSPyMstnPlatform.VertexType, value: int) -> None:
        ...
    
    eArcPoint: VertexType
    
    eCenter: VertexType
    
    eEdge: VertexType
    
    eEllipseMajor1: VertexType
    
    eEllipseMajor2: VertexType
    
    eEllipseMajorEdge: VertexType
    
    eEllipseMinor1: VertexType
    
    eEllipseMinor2: VertexType
    
    eEllipseMinorEdge: VertexType
    
    eEnd: VertexType
    
    eParameter: VertexType
    
    ePlanarFace: VertexType
    
    ePointIndex: VertexType
    
    eStart: VertexType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.VertexType) -> int:
        ...
    
class VertexTypeArray:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Overloaded function.
        
        1. __init__(self: MSPyMstnPlatform.VertexTypeArray) -> None
        
        2. __init__(self: MSPyMstnPlatform.VertexTypeArray, arg0: MSPyMstnPlatform.VertexTypeArray) -> None
        
        Copy constructor
        
        3. __init__(self: MSPyMstnPlatform.VertexTypeArray, arg0: Iterable) -> None
        """
        ...
    
    def append(self: MSPyMstnPlatform.VertexTypeArray, x: MSPyMstnPlatform.VertexType) -> None:
        """
        Add an item to the end of the list
        """
        ...
    
    def clear(self: MSPyMstnPlatform.VertexTypeArray) -> None:
        """
        Clear the contents
        """
        ...
    
    def count(self: MSPyMstnPlatform.VertexTypeArray, x: MSPyMstnPlatform.VertexType) -> int:
        """
        Return the number of times ``x`` appears in the list
        """
        ...
    
    def extend(*args, **kwargs):
        """
        Overloaded function.
        
        1. extend(self: MSPyMstnPlatform.VertexTypeArray, L: MSPyMstnPlatform.VertexTypeArray) -> None
        
        Extend the list by appending all the items in the given list
        
        2. extend(self: MSPyMstnPlatform.VertexTypeArray, L: Iterable) -> None
        
        Extend the list by appending all the items in the given list
        """
        ...
    
    def insert(self: MSPyMstnPlatform.VertexTypeArray, i: int, x: MSPyMstnPlatform.VertexType) -> None:
        """
        Insert an item at a given position.
        """
        ...
    
    def pop(*args, **kwargs):
        """
        Overloaded function.
        
        1. pop(self: MSPyMstnPlatform.VertexTypeArray) -> MSPyMstnPlatform.VertexType
        
        Remove and return the last item
        
        2. pop(self: MSPyMstnPlatform.VertexTypeArray, i: int) -> MSPyMstnPlatform.VertexType
        
        Remove and return the item at index ``i``
        """
        ...
    
    def remove(self: MSPyMstnPlatform.VertexTypeArray, x: MSPyMstnPlatform.VertexType) -> None:
        """
        Remove the first item from the list whose value is x. It is an error if there is no such item.
        """
        ...
    
class ViewCallback:
    """
    None
    """

    @staticmethod
    def SetMotionFunction(newFunc: Callable[[MSWindow, int, int], None], funcID: str) -> Callable[[MSWindow, int, int], None]:
        """
        @Description An MDL application can use this to set a function to be
        called when the cursor moved in a view. @Param[in] newFunc The new
        function to call, or NULL. @Return The return value is the previous
        function that was set for this MdlApp, or NULL.
        
        See also:
        SetMotionFunction.SetMotionFunction
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def SetNoMotionFunction(newFunc: Callable[[MSWindow, int, int], None], funcID: str) -> Callable[[MSWindow, int, int], None]:
        """
        @Description An MDL application can use this to set a function to be
        called when the cursor is stopped in a view. @Param[in] newFunc The
        new function to call, or NULL. @Return The return value is the
        previous function that was set for this MdlApp, or NULL.
        
        See also:
        ViewCallback.SetMotionFunction
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def SetSubstituteElemFunction(newFunc: Callable[[MSPyDgnPlatform.MSElementDescrReceiver, MSPyDgnPlatform.Viewport, MSPyDgnPlatform.DrawPurpose, MSPyDgnPlatform.ViewContext, MSPyDgnPlatform.ElementHandle], MSPyMstnPlatform.SubstituteElemStatus], funcID: str) -> Callable[[MSPyDgnPlatform.MSElementDescrReceiver, MSPyDgnPlatform.Viewport, MSPyDgnPlatform.DrawPurpose, MSPyDgnPlatform.ViewContext, MSPyDgnPlatform.ElementHandle], MSPyMstnPlatform.SubstituteElemStatus]:
        """
        @Description Set or clear an "element substitution hook" to modify the
        display of elements in MicroStation views. @Param[in] substFunc
        function to become the new element substituion hook for this
        application. If NULL, then any previous substituion hook is cleared.
        @Return SUCCESS if the element substitution hook was set/cleared.
        ERROR if the function pointer is invalid.
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def SetUpdatePostFunction(newFunc: Callable[[bool, MSPyDgnPlatform.DgnDrawMode, MSPyDgnPlatform.DgnModelRefList, List[MSPyMstnPlatform.Asynch_update_view], MSPyDgnPlatform.ViewContext, List[int], List[msDisplayDescr]], int], funcID: str) -> Callable[[bool, MSPyDgnPlatform.DgnDrawMode, MSPyDgnPlatform.DgnModelRefList, List[MSPyMstnPlatform.Asynch_update_view], MSPyDgnPlatform.ViewContext, List[int], List[msDisplayDescr]], int]:
        """
        @Description An MDL application can use this to set a function to be
        called after a view updates. @Param[in] newFunc The new function to
        call, or NULL. @Return The return value is the previous function that
        was set for this MdlApp, or NULL.
        
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    @staticmethod
    def SetUpdatePreFunction(newFunc: Callable[[bool, MSPyDgnPlatform.DgnDrawMode, MSPyDgnPlatform.DgnModelRefList, List[MSPyMstnPlatform.Asynch_update_view], MSPyDgnPlatform.ViewContext, List[int], List[msDisplayDescr]], int], funcID: str) -> Callable[[bool, MSPyDgnPlatform.DgnDrawMode, MSPyDgnPlatform.DgnModelRefList, List[MSPyMstnPlatform.Asynch_update_view], MSPyDgnPlatform.ViewContext, List[int], List[msDisplayDescr]], int]:
        """
        @Description An MDL application can use this to set a function to be
        called before a view updates. @Param[in] newFunc The new function to
        call, or NULL. @Return The return value is the previous function that
        was set for this MdlApp, or NULL.
        
        
        Bentley Systems +---------------+---------------+---------------+-----
        ----------+---------------+------
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class ViewGroupChangeType:
    """
    Members:
    
    eVIEWGROUP_CACHE_CHANGE_CREATE
    
    eVIEWGROUP_CACHE_CHANGE_DELETE
    
    eVIEWGROUP_CACHE_CHANGE_PROPERTY_EDIT
    
    eVIEWGROUP_CACHE_CHANGE_ACTIVATE
    
    eVIEWGROUP_CACHE_CHANGE_REDIRECT
    """

    def __init__(self: MSPyMstnPlatform.ViewGroupChangeType, value: int) -> None:
        ...
    
    eVIEWGROUP_CACHE_CHANGE_ACTIVATE: ViewGroupChangeType
    
    eVIEWGROUP_CACHE_CHANGE_CREATE: ViewGroupChangeType
    
    eVIEWGROUP_CACHE_CHANGE_DELETE: ViewGroupChangeType
    
    eVIEWGROUP_CACHE_CHANGE_PROPERTY_EDIT: ViewGroupChangeType
    
    eVIEWGROUP_CACHE_CHANGE_REDIRECT: ViewGroupChangeType
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.ViewGroupChangeType) -> int:
        ...
    
class WindowInfo:
    """
    None
    """

    def GetGraphHandle(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the Graphics Handle for the Window. In Microsoft Windows, this
        is an HWND.
        """
        ...
    
    def GetNext(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the next Window in the linked list
        """
        ...
    
    def GetPrevious(self: MSPyMstnPlatform.WindowInfo) -> MSPyMstnPlatform.WindowInfo:
        """
        Returns the previous Window in the linked list
        """
        ...
    
    def GetScreenNumber(self: MSPyMstnPlatform.WindowInfo) -> int:
        """
        Returns the screen number for the Window
        """
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
class Workmode:
    """
    Members:
    
    eWORKMODE_DGN
    
    eWORKMODE_DWG
    
    eWORKMODE_V7
    """

    def __init__(self: MSPyMstnPlatform.Workmode, value: int) -> None:
        ...
    
    eWORKMODE_DGN: Workmode
    
    eWORKMODE_DWG: Workmode
    
    eWORKMODE_V7: Workmode
    
    @property
    def name(self: handle) -> str:
        ...
    
    @property
    def value(arg0: MSPyMstnPlatform.Workmode) -> int:
        ...
    
eACS_CHANGE_DELETE: AcsChangeType

eACS_CHANGE_REWRITE: AcsChangeType

eACS_CHANGE_SAVE: AcsChangeType

eACS_CYLINDRICAL: int

eACS_RECTANGULAR: int

eACS_SPHERICAL: int

eACS_SYNCH_TO_DATA: AcsChangeType

eACTIONBUTTON_APPLY: ActionButtonValue

eACTIONBUTTON_CANCEL: ActionButtonValue

eACTIONBUTTON_DEFAULT: ActionButtonValue

eACTIONBUTTON_HELP: ActionButtonValue

eACTIONBUTTON_NO: ActionButtonValue

eACTIONBUTTON_NOTOALL: ActionButtonValue

eACTIONBUTTON_OK: ActionButtonValue

eACTIONBUTTON_OPEN: ActionButtonValue

eACTIONBUTTON_RESET: ActionButtonValue

eACTIONBUTTON_RETRY: ActionButtonValue

eACTIONBUTTON_STOP: ActionButtonValue

eACTIONBUTTON_YES: ActionButtonValue

eACTIONBUTTON_YESTOALL: ActionButtonValue

eANGULAR_UNITS_Bearing: AngularUnits

eANGULAR_UNITS_DecimalDegrees: AngularUnits

eANGULAR_UNITS_DegreesMinutesSeconds: AngularUnits

eANGULAR_UNITS_Gradians: AngularUnits

eANGULAR_UNITS_Radians: AngularUnits

eAbsolute: PlotMoveMode

eAcceptsNonTransparentBitmaps: PlotTagBool

eAligned: SurfaceOrientation

eAll: PropPubMethod

eAllowBinaryRaster: PlotTagBool

eAllowZeroPenWidth: PlotTagBool

eAlways: PlotEdpFillDisplay

eAngle: Constraint2dType

eAntiAligned: SurfaceOrientation

eAntiParallel_AntiClockwise: SectorAngleType

eAntiParallel_Clockwise: SectorAngleType

eApparentResolution: PlotTagDPoint2d

eArcPoint: VertexType

eArc_length: Constraint2dType

eArea: Constraint2dType

eArrayAlongPath: SmartFeatureHandlerId

eAssociativeElement: SmartFeatureHandlerId

eAssociativeElementSymbology: SmartFeatureHandlerId

eAutoCenter: PlotTagBool

eAutoDGN: MdlApplicationClass

eAutoIncExt: PlotTagBool

eAutoOpenPlotFile: PlotTagBool

eAutoOverwritePlotFile: PlotTagBool

eBACKGROUND_COLOR_DIALOG: int

eBACKGROUND_COLOR_VIEW: int

eBUILDSTRINGTOKENFLAG_ProhibitUTF8: int

eBUTTONTRANS_CLICK: int

eBUTTONTRANS_DOWN: int

eBUTTONTRANS_MOTION: int

eBUTTONTRANS_STARTDRAG: int

eBUTTONTRANS_TIMEOUT: int

eBUTTONTRANS_UP: int

eBeep: PlotStartStopCmd

eBetween_Fixed: Constraint2dStatus

eBetween_Set_Members: Constraint2dStatus

eBevel: PlotEdpLineJoin

eBezierTo: PlotPathOperator

eBitMap: PlotRasterFormat

eBitmapRasterOnly: PlotTagBool

eBlanking: PlotEdpFillDisplay

eBlend: SmartFeatureHandlerId

eBoolean: SmartFeatureHandlerId

eBorderComment: PlotTagStr

eBorderFontName: PlotTagStr

eBorderOutlineDisabled: PlotTagBool

eBorderPen: PlotTagInt

eBorderTextHeightCM: PlotTagDbl

eBorderTextOffsetCM: PlotTagDPoint2d

eBorderWidthCM: PlotTagDbl

eButt: PlotLineJoin

eByView: PlotEdpFillDisplay

eByteMap: PlotRasterFormat

eCALS: PlotDriver

eCAPABILITY_ACTIVATE_REFERENCE_EXTERNAL: MstnCapabilityValues

eCAPABILITY_ACTIVATE_REFERENCE_INTERNAL: MstnCapabilityValues

eCAPABILITY_ALLOW_NON_SHX_STYLES: MstnCapabilityValues

eCAPABILITY_BSPLINE_DISPLAY_CONTROL: MstnCapabilityValues

eCAPABILITY_BYCELL: MstnCapabilityValues

eCAPABILITY_BYLEVEL: MstnCapabilityValues

eCAPABILITY_CELLLIB_ALLOWUPGRADEV7: MstnCapabilityValues

eCAPABILITY_CELLPATTERN: MstnCapabilityValues

eCAPABILITY_CELLS_ATTRIBUTE_CHANGES: MstnCapabilityValues

eCAPABILITY_COLORTABLE: MstnCapabilityValues

eCAPABILITY_COLOR_MULTI_GRADIENT: MstnCapabilityValues

eCAPABILITY_COLOR_SHOW_BACKGROUND: MstnCapabilityValues

eCAPABILITY_COLOR_SHOW_BOOKTAB: MstnCapabilityValues

eCAPABILITY_COLOR_SHOW_GRADIENTTAB: MstnCapabilityValues

eCAPABILITY_COLOR_SHOW_INDEXEDTAB: MstnCapabilityValues

eCAPABILITY_COLOR_SHOW_TRUECOLORTAB: MstnCapabilityValues

eCAPABILITY_COMPONENTMODEL: MstnCapabilityValues

eCAPABILITY_CONSTRAINTS: MstnCapabilityValues

eCAPABILITY_CREATE_COMPOUND_STYLE: MstnCapabilityValues

eCAPABILITY_CREATE_POINT_STYLE: MstnCapabilityValues

eCAPABILITY_CURVE_IN_CMPLXCH: MstnCapabilityValues

eCAPABILITY_CUSTOM_KEYPOINTS: MstnCapabilityValues

eCAPABILITY_DDDESIGN: MstnCapabilityValues

eCAPABILITY_DEFAULT_FONTS: MstnCapabilityValues

eCAPABILITY_DESIGN_HISTORY: MstnCapabilityValues

eCAPABILITY_DETAILINGSYMBOLS: MstnCapabilityValues

eCAPABILITY_DGNLINK_FOLLOW_TOCONFIGVAR: MstnCapabilityValues

eCAPABILITY_DGNLINK_FOLLOW_TOLINKSET: MstnCapabilityValues

eCAPABILITY_DGNLINK_MULTILINKS_PER_ELEM: MstnCapabilityValues

eCAPABILITY_DGNLINK_NONDGN_REGIONLINKS: MstnCapabilityValues

eCAPABILITY_DGN_BLOCKS: MstnCapabilityValues

eCAPABILITY_DIGITAL_SIGNATURES: MstnCapabilityValues

eCAPABILITY_DIMENSION_ALT_LABEL: MstnCapabilityValues

eCAPABILITY_DIMENSION_ARBITARY: MstnCapabilityValues

eCAPABILITY_DIMENSION_ARC_ABOVE: MstnCapabilityValues

eCAPABILITY_DIMENSION_ARC_LENGTH: MstnCapabilityValues

eCAPABILITY_DIMENSION_BALLNCHAIN: MstnCapabilityValues

eCAPABILITY_DIMENSION_CAPSULE_FRAME: MstnCapabilityValues

eCAPABILITY_DIMENSION_CELLTERM_HEIGHT: MstnCapabilityValues

eCAPABILITY_DIMENSION_CUSTOM_PREFIX: MstnCapabilityValues

eCAPABILITY_DIMENSION_CUSTOM_SYMBOLS: MstnCapabilityValues

eCAPABILITY_DIMENSION_DIMLINE_LEVEL: MstnCapabilityValues

eCAPABILITY_DIMENSION_DIN: MstnCapabilityValues

eCAPABILITY_DIMENSION_FONT: MstnCapabilityValues

eCAPABILITY_DIMENSION_FRACTION_SCALE: MstnCapabilityValues

eCAPABILITY_DIMENSION_INCLINED_FIT: MstnCapabilityValues

eCAPABILITY_DIMENSION_LSTYLE_OVERRIDE: MstnCapabilityValues

eCAPABILITY_DIMENSION_METRIC_FORMAT: MstnCapabilityValues

eCAPABILITY_DIMENSION_MINIMUM_LEADER: MstnCapabilityValues

eCAPABILITY_DIMENSION_NEG_EXTOFFSET: MstnCapabilityValues

eCAPABILITY_DIMENSION_NOSTYLE: MstnCapabilityValues

eCAPABILITY_DIMENSION_ORDDIM_DATUM: MstnCapabilityValues

eCAPABILITY_DIMENSION_SECONDARY_ZEROS: MstnCapabilityValues

eCAPABILITY_DIMENSION_TERM_ATTRIBS: MstnCapabilityValues

eCAPABILITY_DIMENSION_TERM_FIRST: MstnCapabilityValues

eCAPABILITY_DIMENSION_TERM_JOINT: MstnCapabilityValues

eCAPABILITY_DIMENSION_TERM_SIDES: MstnCapabilityValues

eCAPABILITY_DIMENSION_TERM_SYMBOL: MstnCapabilityValues

eCAPABILITY_DIMENSION_TEXT_HEIGHT_SCALE: MstnCapabilityValues

eCAPABILITY_DIMENSION_TEXT_JUSTIFICATION: MstnCapabilityValues

eCAPABILITY_DIMENSION_TEXT_MARGIN: MstnCapabilityValues

eCAPABILITY_DIMENSION_TEXT_WEIGHT: MstnCapabilityValues

eCAPABILITY_DIMENSION_TEXT_WIDTH: MstnCapabilityValues

eCAPABILITY_DIMENSION_TOL_MARGINS: MstnCapabilityValues

eCAPABILITY_DIMENSION_UNDERLINE_TEXT: MstnCapabilityValues

eCAPABILITY_DIMENSION_UNIT_FORMAT: MstnCapabilityValues

eCAPABILITY_DIMENSION_UNIT_LABEL: MstnCapabilityValues

eCAPABILITY_DIMENSION_USE_MINLEADER: MstnCapabilityValues

eCAPABILITY_DIMENSION_WIDEFIT_TEXTABOVE: MstnCapabilityValues

eCAPABILITY_DIMENSION_WORKING_UNITS: MstnCapabilityValues

eCAPABILITY_DIMSTYLE_REQUIRESTANDARD: MstnCapabilityValues

eCAPABILITY_DISPLAY_STYLE_EDITING: MstnCapabilityValues

eCAPABILITY_DWGINCOMPATIBLE_LINESTYLES: MstnCapabilityValues

eCAPABILITY_ELEMENTTEMPLATE_HONORELEMENTLOCK: MstnCapabilityValues

eCAPABILITY_ELEMENTTEMPLATE_HONORLEVELLOCK: MstnCapabilityValues

eCAPABILITY_ELEMENT_ASSOCIATION: MstnCapabilityValues

eCAPABILITY_ELEMENT_CLASS: MstnCapabilityValues

eCAPABILITY_ELEMENT_LOCK: MstnCapabilityValues

eCAPABILITY_ELEMENT_PRIORITY: MstnCapabilityValues

eCAPABILITY_ELEMENT_TRANSPARENCY: MstnCapabilityValues

eCAPABILITY_ELEMENT_VIEWINDEPENDENT: MstnCapabilityValues

eCAPABILITY_FENCE_NAME: MstnCapabilityValues

eCAPABILITY_FILE_PROTECT: MstnCapabilityValues

eCAPABILITY_GRAPHIC_GROUP: MstnCapabilityValues

eCAPABILITY_GRID_ORIENTATION: MstnCapabilityValues

eCAPABILITY_IGDS_LINESTYLE: MstnCapabilityValues

eCAPABILITY_IMPORTRFA: MstnCapabilityValues

eCAPABILITY_INVISGEOM_BYELEMENT: MstnCapabilityValues

eCAPABILITY_ITEMTYPEIMPORTEXPORT: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_ARRAYS: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_ATTACH_TO_NONCELL: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_CHANGE_PROPERTY_TYPE: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_CREATE_PROPERTY_TYPES: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_IMPORT: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_ITEM_NAME: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_MODIFY: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_NONDWG_LIBRARIES: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_RENAME_USED_ITEMTYPES: MstnCapabilityValues

eCAPABILITY_ITEMTYPE_ALLOW_UNITS: MstnCapabilityValues

eCAPABILITY_LARGE_DESIGN_PLANE: MstnCapabilityValues

eCAPABILITY_LEVELS_ALLOW_CREATE: MstnCapabilityValues

eCAPABILITY_LEVELS_ALLOW_DELETE: MstnCapabilityValues

eCAPABILITY_LEVELS_CREATE: MstnCapabilityValues

eCAPABILITY_LEVELS_DESCRIPTION: MstnCapabilityValues

eCAPABILITY_LEVELS_ELEMENT_ACCESS: MstnCapabilityValues

eCAPABILITY_LEVELS_GLOBALDISPLAY: MstnCapabilityValues

eCAPABILITY_LEVELS_GLOBALFREEZE: MstnCapabilityValues

eCAPABILITY_LEVELS_MATERIAL: MstnCapabilityValues

eCAPABILITY_LEVELS_NUMBERS: MstnCapabilityValues

eCAPABILITY_LEVELS_OVERRIDES_PER_LEVEL: MstnCapabilityValues

eCAPABILITY_LEVELS_OVERRIDE_LSTYLE_PROPERTIES: MstnCapabilityValues

eCAPABILITY_LEVELS_OVERRIDE_SYMBOLOGY: MstnCapabilityValues

eCAPABILITY_LEVELS_PRIORITY: MstnCapabilityValues

eCAPABILITY_LEVELS_TRANSPARENCY: MstnCapabilityValues

eCAPABILITY_LEVELS_USE_AUTO_GENERATED_NUMBERS: MstnCapabilityValues

eCAPABILITY_LEVELS_VIEWDISPLAY: MstnCapabilityValues

eCAPABILITY_LEVELS_VPFREEZE: MstnCapabilityValues

eCAPABILITY_LEVEL_ALLOW_LEVELMANAGER: MstnCapabilityValues

eCAPABILITY_LEVEL_LIBRARY_ATTACH: MstnCapabilityValues

eCAPABILITY_LEVEL_LIBRARY_DETACH: MstnCapabilityValues

eCAPABILITY_LEVEL_PLOT: MstnCapabilityValues

eCAPABILITY_LIGHTING_ALLOWLONGLIGHTNAMES: MstnCapabilityValues

eCAPABILITY_LINESTYLE_CREATE_STDTXT: MstnCapabilityValues

eCAPABILITY_LINESTYLE_CREATE_TEXTSTYLE: MstnCapabilityValues

eCAPABILITY_LINESTYLE_SCALEDWIDTH: MstnCapabilityValues

eCAPABILITY_LINESTYLE_SCALE_PER_MODEL: MstnCapabilityValues

eCAPABILITY_MASK_CLIP: MstnCapabilityValues

eCAPABILITY_MATERIAL_ASSIGNBYLEVELCOLOR: MstnCapabilityValues

eCAPABILITY_MODELINGMESH: MstnCapabilityValues

eCAPABILITY_MODEL_CHANGE_TYPE: MstnCapabilityValues

eCAPABILITY_MODEL_CREATE_2D: MstnCapabilityValues

eCAPABILITY_MODEL_CREATE_3D: MstnCapabilityValues

eCAPABILITY_MODEL_CREATE_DESIGN: MstnCapabilityValues

eCAPABILITY_MODEL_CREATE_DRAWING: MstnCapabilityValues

eCAPABILITY_MODEL_CREATE_SHEET: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_DESIGN: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_DRAWING: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_LAST_DESIGN: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_LAST_DRAWING: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_LAST_SHEET: MstnCapabilityValues

eCAPABILITY_MODEL_DELETE_SHEET: MstnCapabilityValues

eCAPABILITY_MODEL_DISPLAY_SHEETLAYOUT: MstnCapabilityValues

eCAPABILITY_MODEL_EDIT_PROPERTIES_DESIGN: MstnCapabilityValues

eCAPABILITY_MODEL_EDIT_PROPERTIES_DRAWING: MstnCapabilityValues

eCAPABILITY_MODEL_EDIT_PROPERTIES_SHEET: MstnCapabilityValues

eCAPABILITY_MODEL_LINESTYLE_SCALE_OPTIONS: MstnCapabilityValues

eCAPABILITY_MODEL_PLACE_AS_CELL: MstnCapabilityValues

eCAPABILITY_MODEL_SHEET_INDEXING: MstnCapabilityValues

eCAPABILITY_MODEL_UNITS_IN_SHEET: MstnCapabilityValues

eCAPABILITY_MODEL_WITHOUT_VIEWGROUP: MstnCapabilityValues

eCAPABILITY_MODIFY_SELECTSERVER: MstnCapabilityValues

eCAPABILITY_MULTILINE_ALLOW_ACTIVE: MstnCapabilityValues

eCAPABILITY_MULTILINE_CAPSYMBOLOGY: MstnCapabilityValues

eCAPABILITY_MULTILINE_CLASS: MstnCapabilityValues

eCAPABILITY_MULTILINE_LINESTYLEMODS: MstnCapabilityValues

eCAPABILITY_MULTILINE_NOSTYLE: MstnCapabilityValues

eCAPABILITY_MULTILINE_REQUIRESTANDARDSTYLE: MstnCapabilityValues

eCAPABILITY_MULTILINE_WEIGHTS: MstnCapabilityValues

eCAPABILITY_NAMED_GROUPS: MstnCapabilityValues

eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE: MstnCapabilityValues

eCAPABILITY_NONDEFAULTMODEL_ANNOTATION_SCALE_LOCK: MstnCapabilityValues

eCAPABILITY_NOTE_ALL_FRAME_TYPES: MstnCapabilityValues

eCAPABILITY_NOTE_ELBOWLENGTH: MstnCapabilityValues

eCAPABILITY_NOTE_FRAME_SCALE: MstnCapabilityValues

eCAPABILITY_NOTE_LEFTMARGIN: MstnCapabilityValues

eCAPABILITY_NOTE_LOWERMARGIN: MstnCapabilityValues

eCAPABILITY_NOTE_MANUALATTACHMENT: MstnCapabilityValues

eCAPABILITY_NOTE_MANUALJUSTIFICATION: MstnCapabilityValues

eCAPABILITY_PARASOLID: MstnCapabilityValues

eCAPABILITY_PICKLIST: MstnCapabilityValues

eCAPABILITY_PLACETEXT_DISPLAY_TOGGLES: MstnCapabilityValues

eCAPABILITY_POINTCLOUD: MstnCapabilityValues

eCAPABILITY_PRINT3D: MstnCapabilityValues

eCAPABILITY_RASTER_ALL_TYPES: MstnCapabilityValues

eCAPABILITY_RASTER_APPLYROTATIONANDAFFINITY: MstnCapabilityValues

eCAPABILITY_RASTER_BACKGROUND: MstnCapabilityValues

eCAPABILITY_RASTER_DISP_GAMMA: MstnCapabilityValues

eCAPABILITY_RASTER_GEOREFERENCEPRIORITY: MstnCapabilityValues

eCAPABILITY_RASTER_INVERT: MstnCapabilityValues

eCAPABILITY_RASTER_PHOTOMATCH: MstnCapabilityValues

eCAPABILITY_RASTER_PRINT: MstnCapabilityValues

eCAPABILITY_RASTER_PRINT_GAMMA: MstnCapabilityValues

eCAPABILITY_RASTER_PROJECT: MstnCapabilityValues

eCAPABILITY_RASTER_TINT: MstnCapabilityValues

eCAPABILITY_RASTER_TRANSP_FULL_CONTROL: MstnCapabilityValues

eCAPABILITY_REALITYMESH: MstnCapabilityValues

eCAPABILITY_REFERENCE_3DTO2D: MstnCapabilityValues

eCAPABILITY_REFERENCE_ALLOW_DXF: MstnCapabilityValues

eCAPABILITY_REFERENCE_ANNOTATIONSCALE: MstnCapabilityValues

eCAPABILITY_REFERENCE_ATTACHLEVEL: MstnCapabilityValues

eCAPABILITY_REFERENCE_DISPLAYOVERRIDES: MstnCapabilityValues

eCAPABILITY_REFERENCE_DWG: MstnCapabilityValues

eCAPABILITY_REFERENCE_GEOREPROJECT: MstnCapabilityValues

eCAPABILITY_REFERENCE_HIDDENLINE: MstnCapabilityValues

eCAPABILITY_REFERENCE_LINESTYLESCALE: MstnCapabilityValues

eCAPABILITY_REFERENCE_NEWLEVELDISPLAY: MstnCapabilityValues

eCAPABILITY_REFERENCE_PRIORITY: MstnCapabilityValues

eCAPABILITY_REFERENCE_SHEET_LOGICALNAME: MstnCapabilityValues

eCAPABILITY_REFERENCE_TRANSPARENCY: MstnCapabilityValues

eCAPABILITY_REFERENCE_V8: MstnCapabilityValues

eCAPABILITY_REFERENCE_VIEWLEVELDISPLAY: MstnCapabilityValues

eCAPABILITY_REF_ADJUSTCOLORS: MstnCapabilityValues

eCAPABILITY_REF_AUX_INFO: MstnCapabilityValues

eCAPABILITY_REF_DISP_PER_VIEW: MstnCapabilityValues

eCAPABILITY_REF_FROM_URL: MstnCapabilityValues

eCAPABILITY_REF_NESTING_OPTIONS: MstnCapabilityValues

eCAPABILITY_REF_NONDEFAULT_MODEL: MstnCapabilityValues

eCAPABILITY_REF_RASTERDISPLAY_OFF: MstnCapabilityValues

eCAPABILITY_REF_SAVE_PATH_REL: MstnCapabilityValues

eCAPABILITY_REF_SCALELINESTYLE: MstnCapabilityValues

eCAPABILITY_REPORTS_ALLOW_IMPORT: MstnCapabilityValues

eCAPABILITY_REPORTS_ALLOW_MODIFY: MstnCapabilityValues

eCAPABILITY_REPORTS_ASSOCIATION: MstnCapabilityValues

eCAPABILITY_SAVEDVIEW: MstnCapabilityValues

eCAPABILITY_SAVEDVIEWS_APPLY_TO_SHEETS: MstnCapabilityValues

eCAPABILITY_SAVEDVIEWS_CREATE_FOR_SHEETS: MstnCapabilityValues

eCAPABILITY_SAVEDVIEWS_DELETE_FOR_SHEETS: MstnCapabilityValues

eCAPABILITY_SAVEDVIEWS_PROPS_FOR_SHEETS: MstnCapabilityValues

eCAPABILITY_SAVEDVIEWS_UPDATE_FOR_SHEETS: MstnCapabilityValues

eCAPABILITY_SCALE_AXIS_INDEP: MstnCapabilityValues

eCAPABILITY_SELF_REFERENCE: MstnCapabilityValues

eCAPABILITY_SHAREDCELLS_FROM_ATTACHED_LIB: MstnCapabilityValues

eCAPABILITY_SHAREDCELLS_FROM_REFERENCES: MstnCapabilityValues

eCAPABILITY_STANDARDSCHECKER: MstnCapabilityValues

eCAPABILITY_TABLE_DESCRIPTION: MstnCapabilityValues

eCAPABILITY_TAGS_COPY_WITH_BASE: MstnCapabilityValues

eCAPABILITY_TAG_NOCELL_ELEMS: MstnCapabilityValues

eCAPABILITY_TERRAINMODEL: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_ACTIVE_DGNSETTINGS: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_ACTIVE_DWGSETTINGS: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_ALLOW_CREATE: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_ALLOW_DELETE: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_ALLOW_MODIFY: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_NOSTYLE: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_STYLE_DGNSETTINGS: MstnCapabilityValues

eCAPABILITY_TEXTSTYLE_STYLE_DWGSETTINGS: MstnCapabilityValues

eCAPABILITY_TEXT_AUTOSTACKFRACTIONS: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_BORDER_X: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_BORDER_Y: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_COLOR: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_FILL_COLOR: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_STYLE: MstnCapabilityValues

eCAPABILITY_TEXT_BACKGROUND_WEIGHT: MstnCapabilityValues

eCAPABILITY_TEXT_BACKWARDS: MstnCapabilityValues

eCAPABILITY_TEXT_BOLD: MstnCapabilityValues

eCAPABILITY_TEXT_COLOR: MstnCapabilityValues

eCAPABILITY_TEXT_FIXEDSPACING: MstnCapabilityValues

eCAPABILITY_TEXT_FONTS: MstnCapabilityValues

eCAPABILITY_TEXT_FONTS_RSC: MstnCapabilityValues

eCAPABILITY_TEXT_FONTS_SHX: MstnCapabilityValues

eCAPABILITY_TEXT_FONTS_TRUETYPE: MstnCapabilityValues

eCAPABILITY_TEXT_FRACTIONS: MstnCapabilityValues

eCAPABILITY_TEXT_FULLJUSTIFICATION: MstnCapabilityValues

eCAPABILITY_TEXT_HEIGHT: MstnCapabilityValues

eCAPABILITY_TEXT_INSERTSTACKFRACTIONS: MstnCapabilityValues

eCAPABILITY_TEXT_INTERCHARACTERSPACING: MstnCapabilityValues

eCAPABILITY_TEXT_ITALICS: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_CB: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_CC: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_CT: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LB: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LC: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LMB: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LMC: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LMT: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_LT: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RB: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RC: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RMB: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RMC: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RMT: MstnCapabilityValues

eCAPABILITY_TEXT_JUSTIFICATION_RT: MstnCapabilityValues

eCAPABILITY_TEXT_LINELENGTH: MstnCapabilityValues

eCAPABILITY_TEXT_LINEOFFSET_X: MstnCapabilityValues

eCAPABILITY_TEXT_LINEOFFSET_Y: MstnCapabilityValues

eCAPABILITY_TEXT_LINESPACING: MstnCapabilityValues

eCAPABILITY_TEXT_LINESPACINGTYPE: MstnCapabilityValues

eCAPABILITY_TEXT_NODEJUSTIFICATION: MstnCapabilityValues

eCAPABILITY_TEXT_OVERLINE: MstnCapabilityValues

eCAPABILITY_TEXT_OVERLINE_COLOR: MstnCapabilityValues

eCAPABILITY_TEXT_OVERLINE_OFFSET: MstnCapabilityValues

eCAPABILITY_TEXT_OVERLINE_STYLE: MstnCapabilityValues

eCAPABILITY_TEXT_OVERLINE_WEIGHT: MstnCapabilityValues

eCAPABILITY_TEXT_SHXBIGFONTS: MstnCapabilityValues

eCAPABILITY_TEXT_SLANTANGLE: MstnCapabilityValues

eCAPABILITY_TEXT_SUBSCRIPT: MstnCapabilityValues

eCAPABILITY_TEXT_SUPERSCRIPT: MstnCapabilityValues

eCAPABILITY_TEXT_TTF_VERTICAL: MstnCapabilityValues

eCAPABILITY_TEXT_UNDERLINE: MstnCapabilityValues

eCAPABILITY_TEXT_UNDERLINE_COLOR: MstnCapabilityValues

eCAPABILITY_TEXT_UNDERLINE_OFFSET: MstnCapabilityValues

eCAPABILITY_TEXT_UNDERLINE_STYLE: MstnCapabilityValues

eCAPABILITY_TEXT_UNDERLINE_WEIGHT: MstnCapabilityValues

eCAPABILITY_TEXT_UPSIDEDOWN: MstnCapabilityValues

eCAPABILITY_TEXT_VERTICAL: MstnCapabilityValues

eCAPABILITY_TEXT_WIDTH: MstnCapabilityValues

eCAPABILITY_TYPE2_CELL: MstnCapabilityValues

eCAPABILITY_TYPE87_RASTER: MstnCapabilityValues

eCAPABILITY_TYPE90_ALL: MstnCapabilityValues

eCAPABILITY_UI_ALWAYSSHOWADMINWORKFLOW: MstnCapabilityValues

eCAPABILITY_UI_IGNOREMENUSFROMDGNLIBS: MstnCapabilityValues

eCAPABILITY_UI_IGNOREMENUSFROMRSCMODFILE: MstnCapabilityValues

eCAPABILITY_UI_LOADFROMACTIVEFILE: MstnCapabilityValues

eCAPABILITY_UNITS_DGNCOORDREADOUT: MstnCapabilityValues

eCAPABILITY_UNITS_DGNFORMAT: MstnCapabilityValues

eCAPABILITY_UNITS_LABEL: MstnCapabilityValues

eCAPABILITY_UNITS_SCIENTIFIC_ACCURACY: MstnCapabilityValues

eCAPABILITY_UNITS_SUB: MstnCapabilityValues

eCAPABILITY_VIEWATTRIBUTES: MstnCapabilityValues

eCAPABILITY_VIEWGROUP_CREATION: MstnCapabilityValues

eCAPABILITY_VIEWGROUP_DELETION: MstnCapabilityValues

eCAPABILITY_VIEWGROUP_UPDATE: MstnCapabilityValues

eCAPABILITY_VIEW_CLIP: MstnCapabilityValues

eCAPABILITY_VIEW_ROTATE_SHEET_MODEL_VIEW: MstnCapabilityValues

eCAPABILITY_WORDPROCESSOR_USE_RSCFRACTIONS: MstnCapabilityValues

eCAPABILITY_WORDPROC_FIELD_CELLPLACEHOLDER: MstnCapabilityValues

eCAPABILITY_WORDPROC_FIELD_LINKPLACEHOLDER: MstnCapabilityValues

eCAPABILITY_WORDPROC_FIELD_MODELPROPERTIES: MstnCapabilityValues

eCAPABILITY_WORDPROC_FIELD_PRINTPROPERTIES: MstnCapabilityValues

eCAPABILITY_WORDPROC_FIELD_SIGNATUREPLACEHOLDER: MstnCapabilityValues

eCCW: PlotRotateDir

eCELL_LIBRARY_MSG_ERROR: CellLibAsyncMsgType

eCELL_LIBRARY_OPT_Include3d: CellLibraryOptions

eCELL_LIBRARY_OPT_IncludeAllLibraries: CellLibraryOptions

eCELL_LIBRARY_OPT_IncludeNonParametric: CellLibraryOptions

eCELL_LIBRARY_OPT_IncludeParametric: CellLibraryOptions

eCELL_LIBRARY_OPT_IncludeShared: CellLibraryOptions

eCELL_LIBRARY_OPT_None: CellLibraryOptions

eCELL_LIBRARY_POST_ATTACH: CellLibAsyncMsgType

eCELL_LIBRARY_POST_CREATE: CellLibAsyncMsgType

eCELL_LIBRARY_POST_DETACH: CellLibAsyncMsgType

eCELL_LIBRARY_PRE_ATTACH: CellLibAsyncMsgType

eCELL_LIBRARY_PRE_CREATE: CellLibAsyncMsgType

eCELL_LIBRARY_PRE_DETACH: CellLibAsyncMsgType

eCENTERONSCREEN: FileOpenExtAttr

eCHOOSEMASTERFILE_STATUS_Canceled: ChooseMasterFileStatus

eCHOOSEMASTERFILE_STATUS_Handled: ChooseMasterFileStatus

eCHOOSEMASTERFILE_STATUS_Invalid: ChooseMasterFileStatus

eCONTROL_STRIP_MENU: InputQueueSourceEnum

eCOORDFMT_DOUBLE: int

eCOORDFMT_LONG: int

eCOORDFMT_SHORT: int

eCORNER_ALL: int

eCORNER_ALL_RESIZED: int

eCORNER_LOWERLEFT: int

eCORNER_LOWERRIGHT: int

eCORNER_UPPERLEFT: int

eCORNER_UPPERRIGHT: int

eCREATE: FileListAttr

eCREATEFROMSEED: FileListAttr

eCT_AmbiguousMatch: CommandTableStatus

eCT_BadResource: CommandTableStatus

eCT_BadResourceType: CommandTableStatus

eCT_ERROR: CommandTableStatus

eCT_ExceedsMaximumNestLevel: CommandTableStatus

eCT_NoCommandMatch: CommandTableStatus

eCT_ResourceNotFound: CommandTableStatus

eCT_Success: CommandTableStatus

eCT_XmlBadFeatureAspect: CommandTableStatus

eCT_XmlDuplicateKeyinHandlersNode: CommandTableStatus

eCT_XmlDuplicateRootTable: CommandTableStatus

eCT_XmlDuplicateSubtable: CommandTableStatus

eCT_XmlMissingCommandWord: CommandTableStatus

eCT_XmlMissingFunctionNode: CommandTableStatus

eCT_XmlMissingKeyinNode: CommandTableStatus

eCT_XmlMissingRootTable: CommandTableStatus

eCT_XmlMissingSubtable: CommandTableStatus

eCURSOR_BUTTON_MENU: InputQueueSourceEnum

eCW: PlotRotateDir

eCadInputTypeAny: CadInputType

eCadInputTypeCommand: CadInputType

eCadInputTypeDataPoint: CadInputType

eCadInputTypeKeyin: CadInputType

eCadInputTypeNone: CadInputType

eCadInputTypeReset: CadInputType

eCenter: VertexType

eChamfer: SmartFeatureHandlerId

eChecked: UIItemStateType

eClashDetection: DgnLibSelector

eClearFeaturesAreaMode_All: ClearFeaturesAreaMode

eClearFeaturesAreaMode_Fence: ClearFeaturesAreaMode

eClearFeaturesAreaMode_SelectionSet: ClearFeaturesAreaMode

eClick: ButtonTrans

eCoincident: Constraint2dType

eColor: PlotRasterTransparency

eConcentric: Constraint2dType

eConfigFileDisplayLabel: PlotTagStr

eConnectionServerType_All: ConnectionServerType

eConnectionServerType_ArcGIS: ConnectionServerType

eConnectionServerType_WFS: ConnectionServerType

eCopyFeature: SmartFeatureHandlerId

eCreateFile: PlotError

eCropRasterTransparency: PlotTagBool

eCurrentReferenceScale: PlotTagDbl

eCurrentRenditionData: PlotTagPtr

eCurrentRenditionId: PlotTagInt

eCurveTolerance: PlotTagDbl

eCurve_Length: Constraint2dType

eCut: SmartFeatureHandlerId

eDCM3_ANGLE: Constraint3dType

eDCM3_COINCIDENT: Constraint3dType

eDCM3_COINCIDENT_AROUND_SPINE: Constraint3dType

eDCM3_COINCIDENT_WITH_SPINE: Constraint3dType

eDCM3_CONCENTRIC: Constraint3dType

eDCM3_CURVE_LENGTH: Constraint3dType

eDCM3_DEPENDENCE: Constraint3dType

eDCM3_DISTANCE: Constraint3dType

eDCM3_EQUAL_CURVATURE: Constraint3dType

eDCM3_EQUAL_CURVATURE_VECTOR: Constraint3dType

eDCM3_EQUAL_DIRECTION: Constraint3dType

eDCM3_EQUAL_FIRST_DERIVATIVE: Constraint3dType

eDCM3_EQUAL_HALF_ANGLE: Constraint3dType

eDCM3_EQUAL_PARAMETER: Constraint3dType

eDCM3_EQUAL_RADIUS: Constraint3dType

eDCM3_EQUAL_SECOND_DERIVATIVE: Constraint3dType

eDCM3_HALF_ANGLE: Constraint3dType

eDCM3_MAJOR_RADIUS: Constraint3dType

eDCM3_MIDPOINT: Constraint3dType

eDCM3_MINOR_RADIUS: Constraint3dType

eDCM3_PARALLEL: Constraint3dType

eDCM3_PERPENDICULAR: Constraint3dType

eDCM3_RADIUS: Constraint3dType

eDCM3_SYMMETRIC: Constraint3dType

eDCM3_TANGENT: Constraint3dType

eDEFAULT: FileListAttr

eDEFAULT_ByCellColor: int

eDEFAULT_ByCellStyle: int

eDEFAULT_ByCellWeight: int

eDGNApp: MdlApplicationClass

eDIALOGID_AboutConfiguration: DialogIds

eDIALOGID_AboutDigitalRights: DialogIds

eDIALOGID_AboutUstn: DialogIds

eDIALOGID_AboutUstnLicenseMore: DialogIds

eDIALOGID_AboutUstnMore: DialogIds

eDIALOGID_AboutWorkmode: DialogIds

eDIALOGID_AcademicAdvisory: DialogIds

eDIALOGID_AcceleratorPrefs: DialogIds

eDIALOGID_AccuSnap: DialogIds

eDIALOGID_ActiveAngle: DialogIds

eDIALOGID_ActiveScale: DialogIds

eDIALOGID_AdvancedColors: DialogIds

eDIALOGID_AdvisoryDisplay: DialogIds

eDIALOGID_AuxCoordSystems: DialogIds

eDIALOGID_BasicLocks: DialogIds

eDIALOGID_BothValidAndDifferent: DialogIds

eDIALOGID_BusyBar: DialogIds

eDIALOGID_ButtonAssignment: DialogIds

eDIALOGID_ButtonMap: DialogIds

eDIALOGID_CachedVisibleEdgeSettings: DialogIds

eDIALOGID_Camera: DialogIds

eDIALOGID_CellCreate: DialogIds

eDIALOGID_CellEdit: DialogIds

eDIALOGID_CellMaintenance: DialogIds

eDIALOGID_CellSelect: DialogIds

eDIALOGID_CellSelectorFileCreate: DialogIds

eDIALOGID_CellSelectorFileOpen: DialogIds

eDIALOGID_CfgVars: DialogIds

eDIALOGID_CloseToolBoxes: DialogIds

eDIALOGID_CmdBrowser: DialogIds

eDIALOGID_CmdBrowserApp: DialogIds

eDIALOGID_ColorBookEditor: DialogIds

eDIALOGID_ColorInterpolate: DialogIds

eDIALOGID_ColorPalInfo: DialogIds

eDIALOGID_ColorPalette: DialogIds

eDIALOGID_ColorSquare: DialogIds

eDIALOGID_CommonItems: DialogIds

eDIALOGID_CompletionBar: DialogIds

eDIALOGID_CoordReadout: DialogIds

eDIALOGID_CreateColorBook: DialogIds

eDIALOGID_CustomScale: DialogIds

eDIALOGID_CustomSheetSize: DialogIds

eDIALOGID_Customize: DialogIds

eDIALOGID_DBSettings: DialogIds

eDIALOGID_DWGAecFileAlert: DialogIds

eDIALOGID_DefineNamedLevels: DialogIds

eDIALOGID_DefineNamedLevelsSort: DialogIds

eDIALOGID_DeletingUsedStyles: DialogIds

eDIALOGID_DesignFileSettings: DialogIds

eDIALOGID_DesignLinksCreate: DialogIds

eDIALOGID_DesignOptions: DialogIds

eDIALOGID_DialogMessages: DialogIds

eDIALOGID_Digitizing: DialogIds

eDIALOGID_Display: DialogIds

eDIALOGID_DockableTemplate: DialogIds

eDIALOGID_DrawComp: DialogIds

eDIALOGID_ElementAttributes: DialogIds

eDIALOGID_ElementPreviewDialog: DialogIds

eDIALOGID_ElementQuickInfo: DialogIds

eDIALOGID_ExtendedFileOpen: DialogIds

eDIALOGID_FenceFrame: DialogIds

eDIALOGID_FileList: DialogIds

eDIALOGID_FileListDDMultiple: DialogIds

eDIALOGID_FileListDDSingle: DialogIds

eDIALOGID_FileListDirMultiple: DialogIds

eDIALOGID_FileListDirSingle: DialogIds

eDIALOGID_FileListMultiple: DialogIds

eDIALOGID_FileProperties: DialogIds

eDIALOGID_FileSaveAsOptions: DialogIds

eDIALOGID_FileWorkSetFound_InvalidActiveWorkSet: DialogIds

eDIALOGID_FileWorkSetNotFound_InvalidActiveWorkSet: DialogIds

eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet: DialogIds

eDIALOGID_FileWorkSetNotFound_ValidActiveWorkSet_ValidConfig: DialogIds

eDIALOGID_Font: DialogIds

eDIALOGID_FramedTemplate: DialogIds

eDIALOGID_FunctionKeys: DialogIds

eDIALOGID_GetSecurityKey: DialogIds

eDIALOGID_GraphicsFileExport: DialogIds

eDIALOGID_GraphicsFileOpen: DialogIds

eDIALOGID_GraphicsFileSaveAs: DialogIds

eDIALOGID_GridSettings: DialogIds

eDIALOGID_GroupEdit: DialogIds

eDIALOGID_HLineSettings: DialogIds

eDIALOGID_Help: DialogIds

eDIALOGID_HelpFind: DialogIds

eDIALOGID_HiddenLineSettings: DialogIds

eDIALOGID_Igen: DialogIds

eDIALOGID_Image: DialogIds

eDIALOGID_ImageSave: DialogIds

eDIALOGID_InputManager: DialogIds

eDIALOGID_KeyboardShortcuts: DialogIds

eDIALOGID_KeyinSettings: DialogIds

eDIALOGID_LargeAlert: DialogIds

eDIALOGID_LargeInfoBox: DialogIds

eDIALOGID_LevSymb: DialogIds

eDIALOGID_LevelEdit: DialogIds

eDIALOGID_LineStyleSelect: DialogIds

eDIALOGID_Locks: DialogIds

eDIALOGID_MDL: DialogIds

eDIALOGID_MDLDetail: DialogIds

eDIALOGID_MainFrame: DialogIds

eDIALOGID_MainWindow: DialogIds

eDIALOGID_MediumAlert: DialogIds

eDIALOGID_MediumInfoBox: DialogIds

eDIALOGID_ModelChoose: DialogIds

eDIALOGID_ModelManager: DialogIds

eDIALOGID_MoreWindows: DialogIds

eDIALOGID_MsgBoxLargeYesNo: DialogIds

eDIALOGID_MsgBoxMediumYesNo: DialogIds

eDIALOGID_MsgBoxMediumYesNoCancel: DialogIds

eDIALOGID_MsgBoxOK: DialogIds

eDIALOGID_MsgBoxOKCancel: DialogIds

eDIALOGID_MsgBoxYesAllNo: DialogIds

eDIALOGID_MsgBoxYesAllNoCancel: DialogIds

eDIALOGID_MsgBoxYesNo: DialogIds

eDIALOGID_MsgBoxYesNoCancel: DialogIds

eDIALOGID_MultiSnap: DialogIds

eDIALOGID_NamedFences: DialogIds

eDIALOGID_NamedLevels: DialogIds

eDIALOGID_NamedLevelsTargetGroup: DialogIds

eDIALOGID_OptionalInfoBox: DialogIds

eDIALOGID_OptionalOKCancelBox: DialogIds

eDIALOGID_OptionalOKCancelBoxWide: DialogIds

eDIALOGID_PaletteItems: DialogIds

eDIALOGID_PatternSettings: DialogIds

eDIALOGID_PointCloudFileBrowse: DialogIds

eDIALOGID_Preprocessor: DialogIds

eDIALOGID_PreviewPrint: DialogIds

eDIALOGID_PropertyBinding: DialogIds

eDIALOGID_RasterFileBrowse: DialogIds

eDIALOGID_RefColorAdjust: DialogIds

eDIALOGID_RefPresentation: DialogIds

eDIALOGID_ReferenceAttach: DialogIds

eDIALOGID_ReferenceDragDrop: DialogIds

eDIALOGID_ReferenceFile: DialogIds

eDIALOGID_ReferenceFileBrowse: DialogIds

eDIALOGID_ReferenceFileOpen: DialogIds

eDIALOGID_ReferenceFullSettings: DialogIds

eDIALOGID_ReferenceRotate: DialogIds

eDIALOGID_ReferenceScale: DialogIds

eDIALOGID_ResetMenuOptions: DialogIds

eDIALOGID_SavedViewDragDrop: DialogIds

eDIALOGID_SelectImagePreview: DialogIds

eDIALOGID_SetHiliteColor: DialogIds

eDIALOGID_SetVectorCursorColor: DialogIds

eDIALOGID_ShowClipboard: DialogIds

eDIALOGID_SnapButtonResizable: DialogIds

eDIALOGID_Snaps: DialogIds

eDIALOGID_StandardAlert: DialogIds

eDIALOGID_StandardInfoBox: DialogIds

eDIALOGID_StdFileOpen: DialogIds

eDIALOGID_StdFileSeedCreate: DialogIds

eDIALOGID_SubEditor: DialogIds

eDIALOGID_TaskNavigation: DialogIds

eDIALOGID_TextFileDisplay: DialogIds

eDIALOGID_TextStyleEditor: DialogIds

eDIALOGID_ToolBoxDummy: DialogIds

eDIALOGID_ToolBoxTemplate: DialogIds

eDIALOGID_ToolSettings: DialogIds

eDIALOGID_TrackBar: DialogIds

eDIALOGID_Transparency: DialogIds

eDIALOGID_TransparencyPriority: DialogIds

eDIALOGID_UnassociatedFile_Product_Mismatch: DialogIds

eDIALOGID_UnassociatedFile_ValidActiveWorkSet: DialogIds

eDIALOGID_UnsignedAppWarning: DialogIds

eDIALOGID_UpdateSequence: DialogIds

eDIALOGID_UserPreference: DialogIds

eDIALOGID_UstnMgr: DialogIds

eDIALOGID_V7CellLibConvert: DialogIds

eDIALOGID_V7DesignFileAlert: DialogIds

eDIALOGID_VariableDialog: DialogIds

eDIALOGID_View: DialogIds

eDIALOGID_ViewAreaBackground: DialogIds

eDIALOGID_ViewBrightness: DialogIds

eDIALOGID_ViewLevels: DialogIds

eDIALOGID_ViewRotation: DialogIds

eDIALOGID_ViewSettings: DialogIds

eDIALOGID_ViewToggles: DialogIds

eDIALOGID_WindowManMenu: DialogIds

eDIALOGID_WorkingUnits: DialogIds

eDIALOGID_YesAllNoAllCancelAlert: DialogIds

eDIALOGID_YesAllNoCancelAlert: DialogIds

eDIALOGID_YesNoCancelAlert: DialogIds

eDIMSTYLE_CHANGE_ACTIVE: DimensionStyleChangeType

eDIMSTYLE_CHANGE_PREACTIVE: DimensionStyleChangeType

eDIMSTYLE_CHANGE_SETTINGS: DimensionStyleChangeType

eDIMSTYLE_TABLE_CHANGE: DimensionStyleChangeType

eDITEM_COLORTYPE_AUXLABEL: ItemColorType

eDITEM_COLORTYPE_BACKGROUND: ItemColorType

eDITEM_COLORTYPE_BOTTOMSHADOW: ItemColorType

eDITEM_COLORTYPE_DARKSHADOW: ItemColorType

eDITEM_COLORTYPE_DLOGBACKGROUND: ItemColorType

eDITEM_COLORTYPE_FOREGROUND: ItemColorType

eDITEM_COLORTYPE_FRAME: ItemColorType

eDITEM_COLORTYPE_GRAYTEXT: ItemColorType

eDITEM_COLORTYPE_LIGHT: ItemColorType

eDITEM_COLORTYPE_MAXCOLOR: ItemColorType

eDITEM_COLORTYPE_NCOLORS: ItemColorType

eDITEM_COLORTYPE_SCROLLBAR: ItemColorType

eDITEM_COLORTYPE_SELECT: ItemColorType

eDITEM_COLORTYPE_SELECTTEXT: ItemColorType

eDITEM_COLORTYPE_TOOLTIPBG: ItemColorType

eDITEM_COLORTYPE_TOOLTIPTEXT: ItemColorType

eDITEM_COLORTYPE_TOPSHADOW: ItemColorType

eDITEM_COLORTYPE_TRAVHIGHLIGHT: ItemColorType

eDOCKEXTENT_DONTCARE: DockPriority

eDOCKEXTENT_FULLWIDTHORHEIGHT: DockPriority

eDOCKEXTENT_INVALIDREGION: DockPriority

eDOCKEXTENT_SPECIFIED: DockPriority

eDOCKPRIORITY_BASEBOTTOM: DockPriority

eDOCKPRIORITY_BASELEFT: DockPriority

eDOCKPRIORITY_BASERIGHT: DockPriority

eDOCKPRIORITY_BASETOP: DockPriority

eDOCKPRIORITY_CMDWINDOW: DockPriority

eDOCKPRIORITY_STATUS: DockPriority

eDOCK_BOTTOM: DockPosition

eDOCK_CENTER: DockPosition

eDOCK_FILL: DockPosition

eDOCK_LEFT: DockPosition

eDOCK_NOTDOCKED: DockPosition

eDOCK_NOTSHOWN: DockPosition

eDOCK_RIGHT: DockPosition

eDOCK_TOP: DockPosition

eDONTDEFAULTTODEFFILE: FileOpenExtAttr

eDPR: PlotDriver

eData: Constraint3dXAttributeIndex

eDefault: PlotUnits

eDefaultDesignScriptFile: PlotTagStr

eDefaultExtension: PlotTagStr

eDefaultForm: PlotTagIsDefinedInPltcfg

eDefaultLineCap: PlotTagInt

eDefaultLineJoin: PlotTagInt

eDefaultNumCopies: PlotTagInt

eDefaultOutputFile: PlotTagStr

eDefaultPenTableFile: PlotTagStr

eDefaultPrinter: PlotTagIsDefinedInPltcfg

eDefaultScale: PlotTagDbl

eDefaultTray: PlotTagIsDefinedInPltcfg

eDeleteFace: SmartFeatureHandlerId

eDeleteLump: SmartFeatureHandlerId

eDependence: Constraint2dType

eDesiredColorMode: PlotTagInt

eDetailingSymbolStylesOnly: DgnLibSelector

eDeviceResolution: PlotTagDPoint2d

eDimAlign_Drawing_X: DimensionAlignmentType

eDimAlign_Drawing_X_Reversed: DimensionAlignmentType

eDimAlign_Drawing_Y: DimensionAlignmentType

eDimAlign_Drawing_Y_Reversed: DimensionAlignmentType

eDimAlign_Unknown: DimensionAlignmentType

eDimensionStylesOnly: DgnLibSelector

eDisablePathSupport: PlotTagBool

eDiskFull: PlotError

eDisplayStylesOnly: DgnLibSelector

eDisplayUnits: PlotTagInt

eDistance: Constraint2dType

eDistanceCC: Constraint2dType

eDistanceCL: Constraint2dType

eDistanceCP: Constraint2dType

eDistanceLL: Constraint2dType

eDistancePL: Constraint2dType

eDistancePP: Constraint2dType

eDouble: PlotPropValueType

eDown: ButtonTrans

eDrawBorder: PlotTagBool

eDrawingSeedsOnly: DgnLibSelector

eDriverDisplayName: PlotTagStr

eDriverDllHmodule: PlotTagPtr

eDriverName: PlotTagStr

eDummy: Constraint2dType

eEAP1Hole: SmartFeatureHandlerId

eELEMHIGH: int

eELEMLOW: int

eEdge: VertexType

eEffectivePlotScale: PlotTagDPoint2d

eEject: PlotStartStopCmd

eElementStyles: DgnLibSelector

eElementTemplatesOnly: DgnLibSelector

eEllipseMajor1: VertexType

eEllipseMajor2: VertexType

eEllipseMajorEdge: VertexType

eEllipseMinor1: VertexType

eEllipseMinor2: VertexType

eEllipseMinorEdge: VertexType

eEllipsoid: SmartFeatureHandlerId

eEllipticalCone: SmartFeatureHandlerId

eEnableCurrentForm: PlotTagBool

eEnableDriverClipping: PlotTagBool

eEnableOrientation: PlotTagBool

eEnableOutputWidth: PlotTagBool

eEnablePssPassThru: PlotTagBool

eEnabled: UIItemStateType

eEnd: VertexType

eEndPlotCmd: PlotTagInt

eEqual: Constraint2dType

eEqual_Curvature: Constraint2dType

eEqual_Direction: Constraint2dType

eEqual_Distance: Constraint2dType

eEqual_First_Derivative: Constraint2dType

eEqual_Parameter: Constraint2dType

eEqual_Radius: Constraint2dType

eEqual_Relative_Transform: Constraint2dType

eEqual_Second_Derivative: Constraint2dType

eExiting: HideReasonCode

eExportElementFilterMode_ByElementTemplate: ExportElementFilterMode

eExportElementFilterMode_ByItemType: ExportElementFilterMode

eExportElementFilterMode_ByLevel: ExportElementFilterMode

eExportElementFilterMode_BySelectionSet: ExportElementFilterMode

eExportRenditionData: PlotTagBool

eExportRenditionId: PlotTagBool

eExternalEdgeProfile: SmartFeatureHandlerId

eExternalProfile: SmartFeatureHandlerId

eExternalSolid: SmartFeatureHandlerId

eExtrude: SmartFeatureHandlerId

eExtrudeAlongProfile: SmartFeatureHandlerId

eFFILTER_READONLY: int

eFFILTER_SUBDIR: int

eFILEOUTDATED_REF_FORCERELOAD: FileOutdatedCheck_Reason

eFILEOUTDATED_REF_QUERY: FileOutdatedCheck_Reason

eFILEOUTDATED_REF_RELOAD: FileOutdatedCheck_Reason

eFILL_NONE: int

eFILL_OPAQUE: int

eFILL_OUTLINED: int

eFILTER_CHANGE_ACTIVE: FilterChangeType

eFILTER_CHANGE_DESCRIPTION: FilterChangeType

eFILTER_CHANGE_EXPRESSION: FilterChangeType

eFILTER_CHANGE_FLAG: FilterChangeType

eFILTER_CHANGE_NAME: FilterChangeType

eFILTER_CHANGE_PARENT: FilterChangeType

eFILTER_CHANGE_PERSISTENT: FilterChangeType

eFILTER_CHANGE_TYPE: FilterChangeType

eFILTER_CREATE: FilterChangeType

eFILTER_DELETE: FilterChangeType

eFILTER_TABLE_CHANGE: FilterChangeType

eFILTER_TABLE_IMPORT: FilterChangeType

eFILTER_TABLE_REDO: FilterChangeType

eFILTER_TABLE_UNDO: FilterChangeType

eFIXEDDEPTH: int

eFONTNAMELISTMODEL_SortByName: int

eFORMAT_MULTIBYTE: int

eFORMAT_UNICODE: int

eFROM_APP: InputQueueSourceEnum

eFROM_CMDFILE: InputQueueSourceEnum

eFROM_DIALOG: InputQueueSourceEnum

eFROM_KEYBOARD: InputQueueSourceEnum

eFROM_MDL: InputQueueSourceEnum

eFROM_OPER_SYSTEM: InputQueueSourceEnum

eFROM_PRDFPI: InputQueueSourceEnum

eFROM_PROCESS: InputQueueSourceEnum

eFROM_STARTUP: InputQueueSourceEnum

eFROM_UCM: InputQueueSourceEnum

eFUNCKEY_MENU: InputQueueSourceEnum

eFalse: PlotTriState

eFence: PlotAreaMode

eFenceClip: SmartFeatureHandlerId

eFencePen: PlotTagInt

eFenceStretch: SmartFeatureHandlerId

eFix: Constraint2dType

eFixed: Constraint3dType

eFlat: PlotEdpLineCap

eForceNonrasterized: DriverOutputMode

eForceRasterized: DriverOutputMode

eFronContext: CellAddType

eGRAPHICSFILE_3DStudio: GraphicsFileType

eGRAPHICSFILE_CAD: GraphicsFileType

eGRAPHICSFILE_CEL: GraphicsFileType

eGRAPHICSFILE_CGM: GraphicsFileType

eGRAPHICSFILE_DWG: GraphicsFileType

eGRAPHICSFILE_DXB: GraphicsFileType

eGRAPHICSFILE_DXF: GraphicsFileType

eGRAPHICSFILE_DgnLib: GraphicsFileType

eGRAPHICSFILE_HLine: GraphicsFileType

eGRAPHICSFILE_IGES: GraphicsFileType

eGRAPHICSFILE_OBJ: GraphicsFileType

eGRAPHICSFILE_RDL: GraphicsFileType

eGRAPHICSFILE_SKP: GraphicsFileType

eGRAPHICSFILE_Sheet: GraphicsFileType

eGRAPHICSFILE_TriForma: GraphicsFileType

eGRAPHICSFILE_UStn: GraphicsFileType

eGRAPHICSFILE_UStnV7: GraphicsFileType

eGRAPHICSFILE_WildCard: GraphicsFileType

eGeneral: DragTransformType

eGeospatialContextStatus_ActivateConnectionFailed: GeospatialContextStatus

eGeospatialContextStatus_BadConnection: GeospatialContextStatus

eGeospatialContextStatus_BadImportType: GeospatialContextStatus

eGeospatialContextStatus_BadNamedBoundaryName: GeospatialContextStatus

eGeospatialContextStatus_BadServerType: GeospatialContextStatus

eGeospatialContextStatus_BadViewIndex: GeospatialContextStatus

eGeospatialContextStatus_ClearFailed: GeospatialContextStatus

eGeospatialContextStatus_ConnectionAlreadyActivated: GeospatialContextStatus

eGeospatialContextStatus_ConnectionNotActivated: GeospatialContextStatus

eGeospatialContextStatus_ConnectionNotFound: GeospatialContextStatus

eGeospatialContextStatus_CreateConnectionFailed: GeospatialContextStatus

eGeospatialContextStatus_CreateDefaultElementTemplatesFailed: GeospatialContextStatus

eGeospatialContextStatus_CreateExportSpecificationFailed: GeospatialContextStatus

eGeospatialContextStatus_CreateImportSpecificationFailed: GeospatialContextStatus

eGeospatialContextStatus_DeleteConnectionFailed: GeospatialContextStatus

eGeospatialContextStatus_EditConnectionFailed: GeospatialContextStatus

eGeospatialContextStatus_ExportFailed: GeospatialContextStatus

eGeospatialContextStatus_ImportFailed: GeospatialContextStatus

eGeospatialContextStatus_InvalidFolder: GeospatialContextStatus

eGeospatialContextStatus_Malloc: GeospatialContextStatus

eGeospatialContextStatus_MstnInDwgWorkMode: GeospatialContextStatus

eGeospatialContextStatus_NoActiveConnections: GeospatialContextStatus

eGeospatialContextStatus_NoActiveFence: GeospatialContextStatus

eGeospatialContextStatus_NoActiveModel: GeospatialContextStatus

eGeospatialContextStatus_NoActiveSelectionSet: GeospatialContextStatus

eGeospatialContextStatus_NoChange: GeospatialContextStatus

eGeospatialContextStatus_NoClearableFeatures: GeospatialContextStatus

eGeospatialContextStatus_NoCoordSysAttach: GeospatialContextStatus

eGeospatialContextStatus_NoEraseableFeatures: GeospatialContextStatus

eGeospatialContextStatus_NoExistingConnection: GeospatialContextStatus

eGeospatialContextStatus_NoImportableFeatures: GeospatialContextStatus

eGeospatialContextStatus_NoLastError: GeospatialContextStatus

eGeospatialContextStatus_NoQueryableFeatures: GeospatialContextStatus

eGeospatialContextStatus_NotAFeature: GeospatialContextStatus

eGeospatialContextStatus_QueryFailed: GeospatialContextStatus

eGeospatialContextStatus_Success: GeospatialContextStatus

eGeospatialContextStatus_UserAbort: GeospatialContextStatus

eGrayscale: PlotColorMode

eGuiLibs: DgnLibSelector

eHANDLETYPE_BSHBITMAP: int

eHANDLETYPE_BSHDC: int

eHANDLETYPE_HDC: int

eHANDLETYPE_HWND: int

eHIERARCHICAL_MENU: InputQueueSourceEnum

eHILITE_XORDRAW: GuiDrawMode

eHILITE_XORINCLUDEBACKSTORE: GuiDrawMode

eHPGL2: PlotDriver

eHPGLRTL: PlotDriver

eHPLJET3: PlotterModel

eHideWindow: HideReasonCode

eHighestColorMode: PlotTagInt

eHole: SmartFeatureHandlerId

eHollow: SmartFeatureHandlerId

eHonorRasterTransparency: PlotTagBool

eHorizontal: Constraint2dType

eHpglQuality: PlotTagInt

eICON_STYLE_DGREY: IconStyle

eICON_STYLE_DISABLED: IconStyle

eICON_STYLE_HIGHLIGHT: IconStyle

eICON_STYLE_LGREY: IconStyle

eICON_STYLE_NORMAL: IconStyle

eINPUTQ_EOQ: MSInputQueuePos

eINPUTQ_HEAD: MSInputQueuePos

eINPUT_ACCEPT: InputFilterReturnValue

eINPUT_COMMAND_ACCEPT: CommandFilterReturnValue

eINPUT_COMMAND_CHANGED: CommandFilterReturnValue

eINPUT_COMMAND_REJECT: CommandFilterReturnValue

eINPUT_REJECT: InputFilterReturnValue

eINVISGEOM_ALWAYS: int

eINVISGEOM_BYELEMENT: int

eINVISGEOM_NEVER: int

eIdentical: Constraint2dType

eIllegalWrite: PlotError

eImprintElement: SmartFeatureHandlerId

eImprintOffset: SmartFeatureHandlerId

eInitApp: MdlApplicationClass

eInitial: Constraint3dStorageVersion

eInteger: PlotPropValueType

eInternal: PlotError

eInvalidScale: PlotError

eIsPlotTo3d: PlotTagBool

eIsPrintSetCapable: PlotTagBool

eIsSystemPrinter: PlotTagBool

eItemTypesOnly: DgnLibSelector

eLEVEL_CHANGE_ACTIVE: LevelChangeType

eLEVEL_CHANGE_ATTRIBUTE: LevelChangeType

eLEVEL_CHANGE_CODE: LevelChangeType

eLEVEL_CHANGE_DISPLAY: LevelChangeType

eLEVEL_CHANGE_ELEMENT_COUNT: LevelChangeType

eLEVEL_CHANGE_NAME: LevelChangeType

eLEVEL_CHANGE_PARENT: LevelChangeType

eLEVEL_CHANGE_USAGE: LevelChangeType

eLEVEL_COUNT_TYPE_ALL: LevelCountType

eLEVEL_COUNT_TYPE_HIDDEN: LevelCountType

eLEVEL_COUNT_TYPE_UNUSED: LevelCountType

eLEVEL_COUNT_TYPE_USED: LevelCountType

eLEVEL_CREATE: LevelChangeType

eLEVEL_DELETE: LevelChangeType

eLEVEL_DESCRIPTION_LINKAGE: int

eLEVEL_FROZEN_TYPE_EFFECTIVE: LevelFrozenType

eLEVEL_FROZEN_TYPE_GLOBAL: LevelFrozenType

eLEVEL_FROZEN_TYPE_VP_FREEZE: LevelFrozenType

eLEVEL_ITERATE_TYPE_ALL_LEVELS: LevelIterateType

eLEVEL_ITERATE_TYPE_UNUSED_LEVELS: LevelIterateType

eLEVEL_ITERATE_TYPE_USED_LEVELS: LevelIterateType

eLEVEL_LIBRARY_ATTACH: LevelChangeType

eLEVEL_LIBRARY_COUNT_TYPE_ALL: LevelLibraryCountType

eLEVEL_LIBRARY_COUNT_TYPE_AUTO_ATTACHED: LevelLibraryCountType

eLEVEL_LIBRARY_COUNT_TYPE_MANUAL_ATTACHED: LevelLibraryCountType

eLEVEL_LIBRARY_DETACH: LevelChangeType

eLEVEL_LIBRARY_FORMAT_ANY: LevelLibraryFormat

eLEVEL_LIBRARY_FORMAT_CSV: LevelLibraryFormat

eLEVEL_LIBRARY_FORMAT_DGN: LevelLibraryFormat

eLEVEL_LIBRARY_FORMAT_DWG: LevelLibraryFormat

eLEVEL_LIBRARY_FORMAT_V7_LVL: LevelLibraryFormat

eLEVEL_LIBRARY_FORMAT_XML: LevelLibraryFormat

eLEVEL_LIBRARY_IMPORT_BY_ANY: LevelLibraryImportMethod

eLEVEL_LIBRARY_IMPORT_BY_CODE: LevelLibraryImportMethod

eLEVEL_LIBRARY_IMPORT_BY_NAME: LevelLibraryImportMethod

eLEVEL_NAME_LINKAGE: int

eLEVEL_PRE_CHANGE_ACTIVE: LevelChangeType

eLEVEL_PRE_DELETE: LevelChangeType

eLEVEL_REWRITE: LevelChangeType

eLEVEL_TABLE_IMPORT: LevelChangeType

eLEVEL_TABLE_REDO: LevelChangeType

eLEVEL_TABLE_REWRITE: LevelChangeType

eLEVEL_TABLE_UNDO: LevelChangeType

eLOCATE_Component: int

eLOCATE_Header: int

eLOCATE_NestCell: int

eLOCATE_NoCellHeader: int

eLOCKCHANGED_ACSContext: LockChanged_Events

eLOCKCHANGED_Angle: LockChanged_Events

eLOCKCHANGED_Association: LockChanged_Events

eLOCKCHANGED_Axis: LockChanged_Events

eLOCKCHANGED_CellStretch: LockChanged_Events

eLOCKCHANGED_ConstructionPlane: LockChanged_Events

eLOCKCHANGED_ConstructionPlanePerp: LockChanged_Events

eLOCKCHANGED_Depth: LockChanged_Events

eLOCKCHANGED_ElementTemplateAssociation: LockChanged_Events

eLOCKCHANGED_FenceMode: LockChanged_Events

eLOCKCHANGED_GraphicGroup: LockChanged_Events

eLOCKCHANGED_Grid: LockChanged_Events

eLOCKCHANGED_Isometric: LockChanged_Events

eLOCKCHANGED_IsometricPlane: LockChanged_Events

eLOCKCHANGED_Level: LockChanged_Events

eLOCKCHANGED_Scale: LockChanged_Events

eLOCKCHANGED_SharedCells: LockChanged_Events

eLOCKCHANGED_Snap: LockChanged_Events

eLOCKCHANGED_Textnode: LockChanged_Events

eLOCKCHANGED_Unit: LockChanged_Events

eLOCKCHANGED_UseAnnotationScale: LockChanged_Events

eLORIP: PlotDriver

eLandscape: PlotOrientation

eLatest: Constraint3dStorageVersion

eLeft: DimensionHalfSpace

eLevelOfDetailMode: PlotTagInt

eLevelsOnly: DgnLibSelector

eLicenseApp: MdlApplicationClass

eLineStylesOnly: DgnLibSelector

eLineTo: PlotPathOperator

eLinks: DgnLibSelector

eLocalToPlot: PlotTagTransform

eLocalToWorld: PlotTagTransform

eLoftSurface: SmartFeatureHandlerId

eLowerLeft: DriverCoordSysOrigin

eMARK_NONE: MenuMarkType

eMARK_RADIO_IN: MenuMarkType

eMARK_RADIO_OUT: MenuMarkType

eMARK_RIGHT_ARROW: MenuMarkType

eMARK_TOGGLE_IN: MenuMarkType

eMARK_TOGGLE_OUT: MenuMarkType

eMAXKEYINPROMPT: int

eMAX_CAPABILITIES: MstnCapabilityValues

eMAX_COMMAND_BYTES: int

eMAX_COMMAND_CHARS: int

eMAX_DOCKREGIONS: int

eMAX_DOWNUP_PER_LINESTYLE: int

eMAX_FILTER_DESCRIPTION_BYTES: int

eMAX_FILTER_DESCRIPTION_LENGTH: int

eMAX_FILTER_EXPRESSION_BYTES: int

eMAX_FILTER_EXPRESSION_LENGTH: int

eMAX_FILTER_LIBRARY_NAME_BYTES: int

eMAX_FILTER_LIBRARY_NAME_LENGTH: int

eMAX_FILTER_MEMBER_NAME_BYTES: int

eMAX_FILTER_MEMBER_NAME_LENGTH: int

eMAX_FILTER_NAME_BYTES: int

eMAX_FILTER_NAME_LENGTH: int

eMAX_FILTER_TABLE_NAME_BYTES: int

eMAX_FILTER_TABLE_NAME_LENGTH: int

eMAX_FONTS: int

eMAX_FONT_NAME_BYTES: int

eMAX_FONT_NAME_LENGTH: int

eMAX_KmlNodeChars: int

eMAX_LINESTYLES: int

eMAX_LINEWEIGHTS: int

eMAX_LOCATE_PATH_DESCRIPTION: int

eMAX_PHYSSCREEN: int

eMAX_POINTSTACKSIZE: int

eMAX_TASKNAVIGATION_PATH_LENGTH: int

eMAX_UNPARSED_BYTES: int

eMAX_UNPARSED_LENGTH: int

eMDLERR_2D3D_MISMATCH: MdlErrorValues

eMDLERR_3DREF2DMASTER: MdlErrorValues

eMDLERR_ACCESSVIOLATION: MdlErrorValues

eMDLERR_ACCUDRAWNOTENABLED: MdlErrorValues

eMDLERR_ACSNOTFOUND: MdlErrorValues

eMDLERR_ACSREPLACED: MdlErrorValues

eMDLERR_ADDINGCOMPLEXELEMENT: MdlErrorValues

eMDLERR_ADDRNOTKNOWN: MdlErrorValues

eMDLERR_ADDRNOTVALID: MdlErrorValues

eMDLERR_ALLMODELSFILTEREDOUT: MdlErrorValues

eMDLERR_ALREADYEXISTS: MdlErrorValues

eMDLERR_ALREADYINUSE: MdlErrorValues

eMDLERR_ALREADYLOADED: MdlErrorValues

eMDLERR_ALREADYOPEN: MdlErrorValues

eMDLERR_AMBIGUOUS: MdlErrorValues

eMDLERR_ANONYMOUS_SHAREDCELL: MdlErrorValues

eMDLERR_ARRAYWRONGSIZE: MdlErrorValues

eMDLERR_ATTRBADASSOC: MdlErrorValues

eMDLERR_ATTRBADRPTFILE: MdlErrorValues

eMDLERR_ATTRBADRPTKEYWORD: MdlErrorValues

eMDLERR_ATTRNOTARGET: MdlErrorValues

eMDLERR_ATTRNOTFOUND: MdlErrorValues

eMDLERR_ATTRNOTINSET: MdlErrorValues

eMDLERR_ATTRPREVDEFINED: MdlErrorValues

eMDLERR_ATTRSETNAMELONG: MdlErrorValues

eMDLERR_ATTRSETNOTFOUND: MdlErrorValues

eMDLERR_ATTRSETPREVDEFINED: MdlErrorValues

eMDLERR_ATTRSETTOOBIG: MdlErrorValues

eMDLERR_ATTRUNDEFTYPE: MdlErrorValues

eMDLERR_BADARG: MdlErrorValues

eMDLERR_BADBSPELM: MdlErrorValues

eMDLERR_BADCHARCONS: MdlErrorValues

eMDLERR_BADCOLORDESCR: MdlErrorValues

eMDLERR_BADCOLORPALETTE: MdlErrorValues

eMDLERR_BADCOLORPALETTEDATA: MdlErrorValues

eMDLERR_BADCOLORPALETTEINDEX: MdlErrorValues

eMDLERR_BADCOLORTABLE: MdlErrorValues

eMDLERR_BADCONTINUITY: MdlErrorValues

eMDLERR_BADCOPYPARALLEL: MdlErrorValues

eMDLERR_BADDATADEF: MdlErrorValues

eMDLERR_BADELEMENT: MdlErrorValues

eMDLERR_BADELEMENTTYPE: MdlErrorValues

eMDLERR_BADFILE: MdlErrorValues

eMDLERR_BADFILENUMBER: MdlErrorValues

eMDLERR_BADFILETYPE: MdlErrorValues

eMDLERR_BADFLOAT: MdlErrorValues

eMDLERR_BADFONT: MdlErrorValues

eMDLERR_BADFORMAT: MdlErrorValues

eMDLERR_BADHEX: MdlErrorValues

eMDLERR_BADINDEX: MdlErrorValues

eMDLERR_BADKNOTS: MdlErrorValues

eMDLERR_BADLINKERINFO: MdlErrorValues

eMDLERR_BADMODELID: MdlErrorValues

eMDLERR_BADMODELREF: MdlErrorValues

eMDLERR_BADNAME: MdlErrorValues

eMDLERR_BADOCTAL: MdlErrorValues

eMDLERR_BADORDER: MdlErrorValues

eMDLERR_BADPARAMETER: MdlErrorValues

eMDLERR_BADPERIODICITY: MdlErrorValues

eMDLERR_BADPOLES: MdlErrorValues

eMDLERR_BADRASTER: MdlErrorValues

eMDLERR_BADRASTERFORMAT: MdlErrorValues

eMDLERR_BADRSCTYPE: MdlErrorValues

eMDLERR_BADSCANLIST: MdlErrorValues

eMDLERR_BADSCREENNUMBER: MdlErrorValues

eMDLERR_BADSETMETHODID: MdlErrorValues

eMDLERR_BADSLOT: MdlErrorValues

eMDLERR_BADSPIRALDEFINITION: MdlErrorValues

eMDLERR_BADSTRING: MdlErrorValues

eMDLERR_BADTEXTSTYLE: MdlErrorValues

eMDLERR_BADTYPE: MdlErrorValues

eMDLERR_BADVERSION: MdlErrorValues

eMDLERR_BADVIEWNUMBER: MdlErrorValues

eMDLERR_BADVRBLARRAYSIZE: MdlErrorValues

eMDLERR_BADWEIGHTS: MdlErrorValues

eMDLERR_BADWORDSTOFOLLOW: MdlErrorValues

eMDLERR_BUFFERALIGNMENTSDIFFER: MdlErrorValues

eMDLERR_CACHEINUSE: MdlErrorValues

eMDLERR_CACHELOADERROR: MdlErrorValues

eMDLERR_CACHENOTENABLED: MdlErrorValues

eMDLERR_CACHENOTFILLED: MdlErrorValues

eMDLERR_CACHENOTFOUND: MdlErrorValues

eMDLERR_CANNOTDELETEDEFAULTMODEL: MdlErrorValues

eMDLERR_CANNOTDEREF: MdlErrorValues

eMDLERR_CANNOTFINDMACRO: MdlErrorValues

eMDLERR_CANNOTIMPORTSEED: MdlErrorValues

eMDLERR_CANNOTLOADMACROHOST: MdlErrorValues

eMDLERR_CANNOTOPENFILE: MdlErrorValues

eMDLERR_CANNOTOPENSEED: MdlErrorValues

eMDLERR_CANNOTSETVALUE: MdlErrorValues

eMDLERR_CANTCREATEFILE: MdlErrorValues

eMDLERR_CANTSAVEFILE: MdlErrorValues

eMDLERR_CAPABILITYRESTRICTION: MdlErrorValues

eMDLERR_CELLEXISTS: MdlErrorValues

eMDLERR_CELLLIB2DGN3: MdlErrorValues

eMDLERR_CELLNOTFOUND: MdlErrorValues

eMDLERR_CELLTOOLARGE: MdlErrorValues

eMDLERR_CIRCULARDEPENDENCY: MdlErrorValues

eMDLERR_CLOSEDGROUP: MdlErrorValues

eMDLERR_COINCIDENTSELFREF: MdlErrorValues

eMDLERR_COLORMGRNOTINITIALIZED: MdlErrorValues

eMDLERR_COMMANDRECEIVED: MdlErrorValues

eMDLERR_COMPRESSIONERROR: MdlErrorValues

eMDLERR_CONNECTIONERROR: MdlErrorValues

eMDLERR_COPYERROR: MdlErrorValues

eMDLERR_DATADEFNOTFOUND: MdlErrorValues

eMDLERR_DGNFILEOBJINUSE: MdlErrorValues

eMDLERR_DISKFULL: MdlErrorValues

eMDLERR_DIVIDEBYZERO: MdlErrorValues

eMDLERR_DLMNOTALLOWED: MdlErrorValues

eMDLERR_DOCMGR_CREATE_FAILED: MdlErrorValues

eMDLERR_DUPLICATELOGICAL: MdlErrorValues

eMDLERR_DUPLICATEMEMBER: MdlErrorValues

eMDLERR_DUPTASKID: MdlErrorValues

eMDLERR_ELEMENTFROZEN: MdlErrorValues

eMDLERR_ELEMENTISHOLED: MdlErrorValues

eMDLERR_ELEMTOOLARGE: MdlErrorValues

eMDLERR_ELMENTNOTFOUND: MdlErrorValues

eMDLERR_ELMFILLED: MdlErrorValues

eMDLERR_ELMNOTFILLED: MdlErrorValues

eMDLERR_ELMNOTPLANAR: MdlErrorValues

eMDLERR_ELMTOOLARGE: MdlErrorValues

eMDLERR_EMPTYSOURCE: MdlErrorValues

eMDLERR_ENDOFFILE: MdlErrorValues

eMDLERR_EXCEPTION: MdlErrorValues

eMDLERR_FARASSOCREQUIRED: MdlErrorValues

eMDLERR_FARREFERENCE: MdlErrorValues

eMDLERR_FILE2SUB3: MdlErrorValues

eMDLERR_FILEEXISTS: MdlErrorValues

eMDLERR_FILENOTFOUND: MdlErrorValues

eMDLERR_FILEREADONLY: MdlErrorValues

eMDLERR_FIRSTEXPRERROR: MdlErrorValues

eMDLERR_GEOCOORD_NEEDSRECALCULATION: MdlErrorValues

eMDLERR_GEOCOORD_NOGEOCODE: MdlErrorValues

eMDLERR_GEOCOORD_NOMASTERGCS: MdlErrorValues

eMDLERR_GEOCOORD_NOREFGCS: MdlErrorValues

eMDLERR_GEOCOORD_NOTGEOTRANSFORMED: MdlErrorValues

eMDLERR_GEOCOORD_REFTRANSFORMDISABLED: MdlErrorValues

eMDLERR_GEOCOORD_UNITSWRONG: MdlErrorValues

eMDLERR_GROUPOPINPROGRESS: MdlErrorValues

eMDLERR_HASCHANGES: MdlErrorValues

eMDLERR_HISTORYREVISIONNOTFOUND: MdlErrorValues

eMDLERR_IDEXISTS: MdlErrorValues

eMDLERR_IDNOTFOUND: MdlErrorValues

eMDLERR_ILLEGALCHAR: MdlErrorValues

eMDLERR_INPUTBUFFERWRONGALIGNMENT: MdlErrorValues

eMDLERR_INSFINFO: MdlErrorValues

eMDLERR_INSFMEMORY: MdlErrorValues

eMDLERR_INTEGRALNEEDED: MdlErrorValues

eMDLERR_INTERSECTSITSELF: MdlErrorValues

eMDLERR_INVALIDACCESSMODE: MdlErrorValues

eMDLERR_INVALIDACSTYPE: MdlErrorValues

eMDLERR_INVALIDBUTTON: MdlErrorValues

eMDLERR_INVALIDCELL: MdlErrorValues

eMDLERR_INVALIDCLIP: MdlErrorValues

eMDLERR_INVALIDCOLORMODE: MdlErrorValues

eMDLERR_INVALIDDEPENDENCY: MdlErrorValues

eMDLERR_INVALIDFORFLOAT: MdlErrorValues

eMDLERR_INVALIDFORFUNC: MdlErrorValues

eMDLERR_INVALIDFORNEUTRALMDL: MdlErrorValues

eMDLERR_INVALIDFORSTRUCT: MdlErrorValues

eMDLERR_INVALIDFORTYPE: MdlErrorValues

eMDLERR_INVALIDLIBRARY: MdlErrorValues

eMDLERR_INVALIDLOGICALNAME: MdlErrorValues

eMDLERR_INVALIDMASTERORG: MdlErrorValues

eMDLERR_INVALIDOPERATIONFORNESTED: MdlErrorValues

eMDLERR_INVALIDOPERATIONFORNONNESTED: MdlErrorValues

eMDLERR_INVALIDPAGE: MdlErrorValues

eMDLERR_INVALIDPASSWORD: MdlErrorValues

eMDLERR_INVALIDPATSPACE: MdlErrorValues

eMDLERR_INVALIDPLATFORMID: MdlErrorValues

eMDLERR_INVALIDREF: MdlErrorValues

eMDLERR_INVALIDREFORG: MdlErrorValues

eMDLERR_INVALIDSYMBOL: MdlErrorValues

eMDLERR_INVALID_COLOR: MdlErrorValues

eMDLERR_INVALID_FOR_RESTRICTED_PRODUCT: MdlErrorValues

eMDLERR_INVREGEX: MdlErrorValues

eMDLERR_LASTEXPRERROR: MdlErrorValues

eMDLERR_LICHANDLENOTFOUND: MdlErrorValues

eMDLERR_LINKAGENOTFOUND: MdlErrorValues

eMDLERR_LOADINGINTERFACE: MdlErrorValues

eMDLERR_MACRONOTSTARTED: MdlErrorValues

eMDLERR_MACROSTILLRUNNING: MdlErrorValues

eMDLERR_MACROVARNOTDEFINED: MdlErrorValues

eMDLERR_MAXMCSLTASKS: MdlErrorValues

eMDLERR_MISSINGIMAGEBAND: MdlErrorValues

eMDLERR_MODELERNOTLOADED: MdlErrorValues

eMDLERR_MODELIDEXISTS: MdlErrorValues

eMDLERR_MODELNAMEEXISTS: MdlErrorValues

eMDLERR_MODELNOTEMPTY: MdlErrorValues

eMDLERR_MODELNOTFOUND: MdlErrorValues

eMDLERR_MODIFYCOMPLEX: MdlErrorValues

eMDLERR_MSELEMENTDESCRCOLLECTOR_TERMINATE_COLLECTION: MdlErrorValues

eMDLERR_MULTIPLE_TRANSPARENCY: MdlErrorValues

eMDLERR_MUNOTLARGERTHANSU: MdlErrorValues

eMDLERR_NAMENOTUNIQUE: MdlErrorValues

eMDLERR_NAMETOOLONG: MdlErrorValues

eMDLERR_NEEDEXPONENT: MdlErrorValues

eMDLERR_NEEDINT: MdlErrorValues

eMDLERR_NOACSDEFINED: MdlErrorValues

eMDLERR_NOASSOCIATEDTEMPLATE: MdlErrorValues

eMDLERR_NOBOUNDS: MdlErrorValues

eMDLERR_NOBSPHEADER: MdlErrorValues

eMDLERR_NOCELLLIBRARY: MdlErrorValues

eMDLERR_NOCHANGE: MdlErrorValues

eMDLERR_NOCLIPVOLUME: MdlErrorValues

eMDLERR_NOEXTPGMSTACK: MdlErrorValues

eMDLERR_NOFENCE: MdlErrorValues

eMDLERR_NOGRAPHICGROUP: MdlErrorValues

eMDLERR_NOINTERNALMATERIALS: MdlErrorValues

eMDLERR_NOKEYS: MdlErrorValues

eMDLERR_NOKNOTS: MdlErrorValues

eMDLERR_NOLEVELMASK: MdlErrorValues

eMDLERR_NOLICENSEAVAILABLE: MdlErrorValues

eMDLERR_NOMASTERFILE: MdlErrorValues

eMDLERR_NOMATCH: MdlErrorValues

eMDLERR_NOMDLPLOTDRIVERINPLT: MdlErrorValues

eMDLERR_NOMESSAGE: MdlErrorValues

eMDLERR_NOMODEL: MdlErrorValues

eMDLERR_NOMODELINFO: MdlErrorValues

eMDLERR_NONCLOSEDELM: MdlErrorValues

eMDLERR_NONCLOSEDPATELM: MdlErrorValues

eMDLERR_NONCOPLANARSHAPES: MdlErrorValues

eMDLERR_NONPLANARELEMENT: MdlErrorValues

eMDLERR_NONSOLIDPATELM: MdlErrorValues

eMDLERR_NONUMBOUNDS: MdlErrorValues

eMDLERR_NOOFFSETINTERSECTION: MdlErrorValues

eMDLERR_NOPARENTMODEL: MdlErrorValues

eMDLERR_NOPOLES: MdlErrorValues

eMDLERR_NOQUEUEENTRIES: MdlErrorValues

eMDLERR_NOREFSLOTS: MdlErrorValues

eMDLERR_NOSELECTIONSET: MdlErrorValues

eMDLERR_NOSUCHAPPLICATION: MdlErrorValues

eMDLERR_NOSUCHMODEL: MdlErrorValues

eMDLERR_NOSYMBOL: MdlErrorValues

eMDLERR_NOTATOMICDATATYPE: MdlErrorValues

eMDLERR_NOTAVAILABLE: MdlErrorValues

eMDLERR_NOTAVALIDSHAPEFILE: MdlErrorValues

eMDLERR_NOTCMPLXHDR: MdlErrorValues

eMDLERR_NOTCOMPLEXHEADER: MdlErrorValues

eMDLERR_NOTCONVRULES: MdlErrorValues

eMDLERR_NOTDESIGNFILE: MdlErrorValues

eMDLERR_NOTDIRECTATTACHMENT: MdlErrorValues

eMDLERR_NOTFUNCTION: MdlErrorValues

eMDLERR_NOTLOADED: MdlErrorValues

eMDLERR_NOTLOCKED: MdlErrorValues

eMDLERR_NOTMEMBER: MdlErrorValues

eMDLERR_NOTOPEN: MdlErrorValues

eMDLERR_NOTRANSFORM: MdlErrorValues

eMDLERR_NOTSAMEUNITBASE: MdlErrorValues

eMDLERR_NOTSINGLEVIEW: MdlErrorValues

eMDLERR_NOTSTRUCT: MdlErrorValues

eMDLERR_NOTSUPPORTED: MdlErrorValues

eMDLERR_NOTSUPPORTEDACTIVATEDREF: MdlErrorValues

eMDLERR_NOTVALIDEXPRESS: MdlErrorValues

eMDLERR_NOWEIGHTS: MdlErrorValues

eMDLERR_NO_GEOCODINGELM: MdlErrorValues

eMDLERR_NO_TRANSPARENCY: MdlErrorValues

eMDLERR_NULLOUTPUTBUFFER: MdlErrorValues

eMDLERR_NULLSOLUTION: MdlErrorValues

eMDLERR_OLDMATERIALTABLE: MdlErrorValues

eMDLERR_OPERATIONCANCELED: MdlErrorValues

eMDLERR_OPERVIOLATESCONSTRAINTS: MdlErrorValues

eMDLERR_OUTPUTBUFFERWRONGALIGNMENT: MdlErrorValues

eMDLERR_OVERSIZE_ELEMENT: MdlErrorValues

eMDLERR_PALETTEWRONGSIZE: MdlErrorValues

eMDLERR_PARASOLID_ERROR: MdlErrorValues

eMDLERR_PROGRAMTERMINATED: MdlErrorValues

eMDLERR_QUEUEERROR: MdlErrorValues

eMDLERR_QUEUEFULL: MdlErrorValues

eMDLERR_READFAILED: MdlErrorValues

eMDLERR_RECURSELIMIT: MdlErrorValues

eMDLERR_REDUNDANTREF: MdlErrorValues

eMDLERR_REJECTED: MdlErrorValues

eMDLERR_REJECTEDBYINIT: MdlErrorValues

eMDLERR_RELATIVECELLLEVELNOTFOUND: MdlErrorValues

eMDLERR_RELOADNOTNEEDED: MdlErrorValues

eMDLERR_RENAMEERROR: MdlErrorValues

eMDLERR_REPLACING_DELETED: MdlErrorValues

eMDLERR_RESOURCENOTFOUND: MdlErrorValues

eMDLERR_RIGHT_NOT_GRANTED: MdlErrorValues

eMDLERR_RIGHT_NOT_GRANTED_FOR_OPERATION: MdlErrorValues

eMDLERR_RSCADDRINVALID: MdlErrorValues

eMDLERR_RSCALIASREQUIRED: MdlErrorValues

eMDLERR_RSCALREADYEXISTS: MdlErrorValues

eMDLERR_RSCBADRANGETREE: MdlErrorValues

eMDLERR_RSCBADRSCSIZE: MdlErrorValues

eMDLERR_RSCBADVERSION: MdlErrorValues

eMDLERR_RSCCONDITIONFALSE: MdlErrorValues

eMDLERR_RSCDIRECTADDPEND: MdlErrorValues

eMDLERR_RSCERROR: MdlErrorValues

eMDLERR_RSCFILECORRUPT: MdlErrorValues

eMDLERR_RSCFILEERROR: MdlErrorValues

eMDLERR_RSCFILEHANDLETABLEFULL: MdlErrorValues

eMDLERR_RSCFILENOTFOUND: MdlErrorValues

eMDLERR_RSCFILENOTOPEN: MdlErrorValues

eMDLERR_RSCFOPENFAILURE: MdlErrorValues

eMDLERR_RSCHANDLEINVALID: MdlErrorValues

eMDLERR_RSCINSFMEM: MdlErrorValues

eMDLERR_RSCINUSE: MdlErrorValues

eMDLERR_RSCINVALIDFILEHANDLE: MdlErrorValues

eMDLERR_RSCNOTFOUND: MdlErrorValues

eMDLERR_RSCQRYIDINVALID: MdlErrorValues

eMDLERR_RSCSTRINGNOTFOUND: MdlErrorValues

eMDLERR_RSCTYPEINVALID: MdlErrorValues

eMDLERR_RSCWRITEERROR: MdlErrorValues

eMDLERR_RSCWRITEVIOLATION: MdlErrorValues

eMDLERR_SERVER_MAX_USER_REACHED: MdlErrorValues

eMDLERR_SHAPEALREADYEXISTS: MdlErrorValues

eMDLERR_SHAPEFILEFULL: MdlErrorValues

eMDLERR_SHARINGVIOLATION: MdlErrorValues

eMDLERR_SHMEMNOTFOUND: MdlErrorValues

eMDLERR_SIGNATURE_NOT_FOUND: MdlErrorValues

eMDLERR_SIGNATURE_NOT_RECOGNIZED: MdlErrorValues

eMDLERR_SIGNATURE_NOT_VERIFIED: MdlErrorValues

eMDLERR_SIGNATURE_SILENT: MdlErrorValues

eMDLERR_STRUCTNEEDED: MdlErrorValues

eMDLERR_STYLEISUSED: MdlErrorValues

eMDLERR_STYLENOTFOUND: MdlErrorValues

eMDLERR_SYMBOLNOTRESOLVED: MdlErrorValues

eMDLERR_SYMBOLTOOLONG: MdlErrorValues

eMDLERR_SYNTAXERROR: MdlErrorValues

eMDLERR_SYSTEMERROR: MdlErrorValues

eMDLERR_THREADUNKNOWN: MdlErrorValues

eMDLERR_TIMEOUT: MdlErrorValues

eMDLERR_TOOCOMPLEX: MdlErrorValues

eMDLERR_TOOFEWARGUMENTS: MdlErrorValues

eMDLERR_TOOFEWPOLES: MdlErrorValues

eMDLERR_TOOLARGE: MdlErrorValues

eMDLERR_TOOMANYARGUMENTS: MdlErrorValues

eMDLERR_TOOMANYITERATIONS: MdlErrorValues

eMDLERR_TOOMANYKNOTS: MdlErrorValues

eMDLERR_TOOMANYOPENFILES: MdlErrorValues

eMDLERR_TOOMANYPOLES: MdlErrorValues

eMDLERR_TOOMANYSURFACEELMS: MdlErrorValues

eMDLERR_TYPESINCOMPATIBLE: MdlErrorValues

eMDLERR_UNBOUNDEDSOLUTION: MdlErrorValues

eMDLERR_UNDERSIZE_ELEMENT: MdlErrorValues

eMDLERR_UNKNOWNERROR: MdlErrorValues

eMDLERR_UNKNOWNFORMAT: MdlErrorValues

eMDLERR_UNSUPPORTED: MdlErrorValues

eMDLERR_USERABORT: MdlErrorValues

eMDLERR_V7CELLLIBRARY: MdlErrorValues

eMDLERR_V8B2CELLLIBRARY: MdlErrorValues

eMDLERR_VARWRONGSIZE: MdlErrorValues

eMDLERR_VIEWGROUPNOTFOUND: MdlErrorValues

eMDLERR_VIEWNOTDISPLAYED: MdlErrorValues

eMDLERR_VIEWNOTFOUND: MdlErrorValues

eMDLERR_VOIDDATATYPE: MdlErrorValues

eMDLERR_WRITEFAILED: MdlErrorValues

eMDLERR_WRITEINHIBIT: MdlErrorValues

eMDLERR_WRONGELEMID: MdlErrorValues

eMESSAGE_DEST_MessageCenter: MessageDestination

eMESSAGE_DEST_None: MessageDestination

eMESSAGE_DEST_WarningDialog: MessageDestination

eMIN_ELEMDATA_SCANBUF_SIZE: int

eMLINESTYLE_PostActivate: MlineStyleMsgType

eMLINESTYLE_PostAdd: MlineStyleMsgType

eMLINESTYLE_PostChange: MlineStyleMsgType

eMLINESTYLE_PostDelete: MlineStyleMsgType

eMLINESTYLE_PreActivate: MlineStyleMsgType

eMLINESTYLE_PreActivateByName: MlineStyleMsgType

eMLINESTYLE_RedoAdd: MlineStyleMsgType

eMLINESTYLE_RedoDelete: MlineStyleMsgType

eMLINESTYLE_RedoModify: MlineStyleMsgType

eMLINESTYLE_UndoAdd: MlineStyleMsgType

eMLINESTYLE_UndoDelete: MlineStyleMsgType

eMLINESTYLE_UndoModify: MlineStyleMsgType

eMODEL_CHANGE_Active: ModelChangeType

eMODEL_CHANGE_BeforeActive: ModelChangeType

eMODEL_CHANGE_BeforeCopy: ModelChangeType

eMODEL_CHANGE_BeforeCreate: ModelChangeType

eMODEL_CHANGE_BeforeDelete: ModelChangeType

eMODEL_CHANGE_BeforeName: ModelChangeType

eMODEL_CHANGE_BeforeProperties: ModelChangeType

eMODEL_CHANGE_BeforeSettings: ModelChangeType

eMODEL_CHANGE_BeforeUnCreate: ModelChangeType

eMODEL_CHANGE_BeforeUnDelete: ModelChangeType

eMODEL_CHANGE_BeforeUndoProperties: ModelChangeType

eMODEL_CHANGE_Copied: ModelChangeType

eMODEL_CHANGE_Create: ModelChangeType

eMODEL_CHANGE_Delete: ModelChangeType

eMODEL_CHANGE_Name: ModelChangeType

eMODEL_CHANGE_PropagateAnnotationScale: ModelChangeType

eMODEL_CHANGE_Properties: ModelChangeType

eMODEL_CHANGE_Settings: ModelChangeType

eMODEL_CHANGE_UnCreate: ModelChangeType

eMODEL_CHANGE_UnDelete: ModelChangeType

eMODEL_CHANGE_UndoProperties: ModelChangeType

eMONITOR_ALL: InputMonitorFilter

eMONITOR_FROM_APP: InputMonitorFilter

eMONITOR_NOT_FROM_APP: InputMonitorFilter

eMSRequired: MdlApplicationClass

eMajor_Radius: DragTransformType

eMalloc: PlotError

eManaged: MdlApplicationClass

eMask: PlotRasterTransparency

eMaxMiterAngleRads: PlotTagDbl

eMdlUnload: HideReasonCode

eMergeExportedRaster: PlotTagBool

eMidpoint: Constraint2dType

eMinimumLevelOfDetail: PlotTagDbl

eMinor_Radius: DragTransformType

eMiter: PlotEdpLineJoin

eMiterBevel: PlotLineJoin

eMiterLimit: PlotTagDbl

eModifyEdge: SmartFeatureHandlerId

eModifyVertex: SmartFeatureHandlerId

eMonochrome: PlotColorMode

eMotion: ButtonTrans

eMoveMode: PlotTagInt

eMoveTo: PlotPathOperator

eNONE: FileOpenExtAttr

eNamedExpressions: DgnLibSelector

eNegative: Constraint3dHalfSpace

eNever: PlotEdpFillDisplay

eNoChange: MdlApplicationClass

eNoDgnFile: HideReasonCode

eNoError: PlotError

eNoPlotFile: PlotTagBool

eNoPlotOrigin: PlotTagBool

eNon_Algebraic: Constraint2dStatus

eNone: PlotEdpLineCap

eNone_: UIItemStateType

eNormal: PlotHwTextMode

eNormalAllFonts: PlotHwTextMode

eNormalCell: CellAddType

eNotSpecified: Constraint3dHalfSpace

eNot_Changed: Constraint2dStatus

eNot_Consistent: Constraint2dStatus

eNot_Consistent_Dimensions: Constraint2dStatus

eNot_Consistent_Other: Constraint2dStatus

eNot_Consistent_Unknown: Constraint2dStatus

eNot_Solved: Constraint2dStatus

eNumForms: PlotTagInt

eNumPens: PlotTagInt

eOPEN: FileListAttr

eOPENCREATE: FileListAttr

eOUTPUTDEVICE_backingStore: int

eOUTPUTDEVICE_doubleBuffer: int

eOUTPUTDEVICE_max: int

eOUTPUTDEVICE_screen: int

eOff: PlotFilterLodMode

eOffset: Constraint2dType

eOffsetFace: SmartFeatureHandlerId

eOffset_Dimension: Constraint2dType

eOffset_Distance: DragTransformType

eOn: LevelMaskOperation

eOpenFile: PlotError

eOptimizeRasterColorDepth: PlotTagBool

eOver_Defined: Constraint2dStatus

eP1: PlotTagDPoint2d

eP2: PlotTagDPoint2d

ePALETTE_MENU: InputQueueSourceEnum

ePDF: PlotDriver

ePDFEditable: PlotHwTextMode

ePLOTSTYLE_BYCELL: int

ePLOTSTYLE_BYLEVEL: int

ePOST_COMPRESS_DGNFILE: CompressType

ePRESERVEZRANGE_USEHIGH: int

ePRESERVEZRANGE_USELOW: int

ePRE_COMPRESS_DGNFILE: CompressType

ePROCESSSTATE_AnalyzeFile: BatchProcessing_States

ePROCESSSTATE_Cancelled: BatchProcessing_States

ePROCESSSTATE_ClosedFile: BatchProcessing_States

ePROCESSSTATE_Done: BatchProcessing_States

ePROCESSSTATE_Inactive: BatchProcessing_States

ePROCESSSTATE_OpeningFile: BatchProcessing_States

ePROCESSSTATE_Paused: BatchProcessing_States

ePROCESSSTATE_Processing: BatchProcessing_States

ePSCRIPT: PlotDriver

ePULLDOWN_MENU: InputQueueSourceEnum

eParallel: Constraint2dType

eParallel_AntiClockwise: SectorAngleType

eParallel_Clockwise: SectorAngleType

eParameter: VertexType

ePattern_2d_value_1: Constraint2dType

ePattern_2d_value_2: Constraint2dType

ePattern_Value: Constraint2dType

ePatterned: Constraint2dType

ePatterned_2d: Constraint2dType

ePause: PlotStartStopCmd

ePerimeter: Constraint2dType

ePermissionDenied: PlotError

ePerpendicular: Constraint2dType

ePlanarFace: VertexType

ePlanar_Distance: Constraint2dType

ePlotDriver: MdlApplicationClass

ePlotFileHandle: PlotTagInt

ePlotOrigin: PlotTagDPoint2d

ePlotRotationRads: PlotTagDbl

ePlotScale: PlotTagDPoint2d

ePlotSize: PlotTagDPoint2d

ePlotViewIndex: PlotTagInt

ePlotterModel: PlotTagInt

ePointCell: CellAddType

ePointIndex: VertexType

ePolarArray: SmartFeatureHandlerId

ePortrait: PlotOrientation

ePositive: Constraint3dHalfSpace

ePostPlotBorderText: PlotTagBool

ePreferNonrasterized: DriverOutputMode

ePreferRasterized: DriverOutputMode

ePrefixFile: PlotTagFileSpec

ePrintBorderFile: PlotTagBool

ePrintBorderModel: PlotTagBool

ePrintBorderOutline: PlotTagBool

ePrintBorderTime: PlotTagBool

ePrintFence: PlotTagBool

ePrintPoints: PlotTagBool

ePrintStyleName: PlotTagStr

ePrinting: DgnLibSelector

ePrologFile: PlotTagFileSpec

ePropFilterFile: PropPubMethod

eProtrusion: SmartFeatureHandlerId

eQueryFeaturesAreaMode_All: QueryFeaturesAreaMode

eQueryFeaturesAreaMode_Fence: QueryFeaturesAreaMode

eRASTMODE_BYTE_FIXEDCOLOR: int

eRASTMODE_BYTE_MONO: int

eRASTMODE_BYTE_PALETTE_INDEX: int

eRASTMODE_BYTE_V4_COLOR: int

eRASTMODE_COLORDESCR: int

eRASTMODE_LONG_DRAWINDEX: int

eRASTMODE_LONG_PALETTE_INDEX: int

eRASTMODE_WORD_PALETTE_INDEX: int

eRGBA: PlotRasterFormat

eRGBSeparate: PlotRasterFormat

eRadius: DragTransformType

eRasterizeUsingBands: PlotTagBool

eRasterized: PlotTagBool

eRectangularArray: SmartFeatureHandlerId

eRelative: PlotMoveMode

eRendering: DgnLibSelector

eRenderingAttributesFile: PlotTagFileSpec

eRenditionDataSize: PlotTagInt

eReplTransMaskWithTransColor: PlotTagTriState

eReplot: PlotStartStopCmd

eRequiredOrientation: PlotTagInt

eRevolve: SmartFeatureHandlerId

eRgbRasterOnly: PlotTagBool

eRgbaRasterOnly: PlotTagBool

eRibbonProvider: MdlApplicationClass

eRight: DimensionHalfSpace

eRollOrientation: PlotTagInt

eRot180: PlotRotateDir

eRound: PlotEdpLineCap

eSCREEN_MENU: InputQueueSourceEnum

eSECURITY_LEVEL_HIGH: int

eSECURITY_LEVEL_LOW: int

eSECURITY_LEVEL_MEDIUM: int

eSECURITY_LEVEL_NONE: int

eSET_ALLOWBGCOLOR: GuiDrawMode

eSUBSTELEM_STATUS_Block: SubstituteElemStatus

eSUBSTELEM_STATUS_Normal: SubstituteElemStatus

eSYSCOLOR_BACKGROUND_PALEYELLOW: SysColor

eSYSCOLOR_FIXED_BASE: SysColor

eSYSCOLOR_FIXED_BLACK: SysColor

eSYSCOLOR_FIXED_BLUE: SysColor

eSYSCOLOR_FIXED_CYAN: SysColor

eSYSCOLOR_FIXED_DARKBLUE: SysColor

eSYSCOLOR_FIXED_DARKGREEN: SysColor

eSYSCOLOR_FIXED_DARKYELLOW: SysColor

eSYSCOLOR_FIXED_DGREY: SysColor

eSYSCOLOR_FIXED_GREEN: SysColor

eSYSCOLOR_FIXED_LGREY: SysColor

eSYSCOLOR_FIXED_MAGENTA: SysColor

eSYSCOLOR_FIXED_MAROON: SysColor

eSYSCOLOR_FIXED_MAXCOLORS: SysColor

eSYSCOLOR_FIXED_MGREY: SysColor

eSYSCOLOR_FIXED_PSEUDOWHITE: SysColor

eSYSCOLOR_FIXED_RED: SysColor

eSYSCOLOR_FIXED_TURQUOISE: SysColor

eSYSCOLOR_FIXED_VIOLET: SysColor

eSYSCOLOR_FIXED_WHITE: SysColor

eSYSCOLOR_FIXED_YELLOW: SysColor

eSYSCOLOR_MAXCOLOR: SysColor

eSYSCOLOR_NCOLORS: SysColor

eSYSCOLOR_WINDOWS_APPWORKSPACE: SysColor

eSYSCOLOR_WINDOWS_BASE: SysColor

eSYSCOLOR_WINDOWS_BORDER: SysColor

eSYSCOLOR_WINDOWS_BTNFACE: SysColor

eSYSCOLOR_WINDOWS_BTNHIGHLIGHT: SysColor

eSYSCOLOR_WINDOWS_BTNSHADOW: SysColor

eSYSCOLOR_WINDOWS_BTNTEXT: SysColor

eSYSCOLOR_WINDOWS_DARKSHADOW: SysColor

eSYSCOLOR_WINDOWS_DESKTOP: SysColor

eSYSCOLOR_WINDOWS_DIALOGAREABG: SysColor

eSYSCOLOR_WINDOWS_DLOGBACKGROUND: SysColor

eSYSCOLOR_WINDOWS_GRADIENTITITLEBAR: SysColor

eSYSCOLOR_WINDOWS_GRADIENTTITLEBAR: SysColor

eSYSCOLOR_WINDOWS_GRAYTEXT: SysColor

eSYSCOLOR_WINDOWS_HIGHLIGHT: SysColor

eSYSCOLOR_WINDOWS_HIGHLIGHTTEXT: SysColor

eSYSCOLOR_WINDOWS_IBORDER: SysColor

eSYSCOLOR_WINDOWS_ITITLEBAR: SysColor

eSYSCOLOR_WINDOWS_ITITLEBARTEXT: SysColor

eSYSCOLOR_WINDOWS_LIGHT: SysColor

eSYSCOLOR_WINDOWS_MAXCOLORS: SysColor

eSYSCOLOR_WINDOWS_MENU: SysColor

eSYSCOLOR_WINDOWS_MENUBAR: SysColor

eSYSCOLOR_WINDOWS_MENUHILIGHT: SysColor

eSYSCOLOR_WINDOWS_MENUTEXT: SysColor

eSYSCOLOR_WINDOWS_RIBBONBG: SysColor

eSYSCOLOR_WINDOWS_SCROLLBAR: SysColor

eSYSCOLOR_WINDOWS_STATUSBAR: SysColor

eSYSCOLOR_WINDOWS_TITLEBAR: SysColor

eSYSCOLOR_WINDOWS_TITLEBARTEXT: SysColor

eSYSCOLOR_WINDOWS_TOOLBARAREABG: SysColor

eSYSCOLOR_WINDOWS_TOOLTIPBG: SysColor

eSYSCOLOR_WINDOWS_TOOLTIPTEXT: SysColor

eSYSCOLOR_WINDOWS_WINBACKGROUND: SysColor

eSYSCOLOR_WINDOWS_WINFRAME: SysColor

eSYSCOLOR_WINDOWS_WINTEXT: SysColor

eSYSPRINTER: PlotDriver

eSYSTEM_FENCE_CLEARED: FenceChangedType

eSYSTEM_FENCE_CREATED: FenceChangedType

eSYSTEM_NEWFILE_CLOSE: NewDesignFileReason

eSYSTEM_NEWFILE_COMPLETE: NewDesignFileReason

eSYSTEM_REFATTACHQUEUE_Done: SystemRefAttachQueueState

eSYSTEM_REFATTACHQUEUE_Start: SystemRefAttachQueueState

eSYSTEM_TERMINATED_BY_APP: UnloadProgramReason

eSYSTEM_TERMINATED_COMMAND: UnloadProgramReason

eSYSTEM_TERMINATED_ENTERING_RESTRICTED_RIGHTS_MODE: UnloadProgramReason

eSYSTEM_TERMINATED_EXCEPTION: UnloadProgramReason

eSYSTEM_TERMINATED_EXIT: UnloadProgramReason

eSYSTEM_TERMINATED_FATAL: UnloadProgramReason

eSYSTEM_TERMINATED_LIBRARY_UNLOAD: UnloadProgramReason

eSYSTEM_TERMINATED_SHUTDOWN: UnloadProgramReason

eSYSTEM_TERMINATED_UNLOADING_APPDOMAIN: UnloadProgramReason

eSYSTEM_TERMINATED_UNLOAD_UI_SERVERS: UnloadProgramReason

eScaleAdjustmentFactor: PlotTagDPoint2d

eSheet: PlotAreaMode

eShowNothing: PlotFilterLodMode

eShowRange: PlotFilterLodMode

eSimple_Dependence: Constraint2dType

eSizeFilter: SmartFeatureHandlerId

eSolved: Constraint2dStatus

eSpinFace: SmartFeatureHandlerId

eSquare: PlotEdpLineCap

eStart: VertexType

eStartDrag: ButtonTrans

eStartPlotCmd: PlotTagInt

eStayResidentServer: MdlApplicationClass

eString: PlotPropValueType

eStrokeBezierCurves: PlotTagBool

eStrokeRaster: PlotTagBool

eSuffixFile: PlotTagFileSpec

eSupportsCopies: PlotTagBool

eSupportsExtLineStyles: PlotTagBool

eSupportsNoneForm: PlotTagBool

eSupportsOutputOle: PlotTagBool

eSupportsOutputPdf: PlotTagBool

eSupportsPlotMetadata: PlotTagBool

eSupportsPlotTo3d: PlotTagBool

eSweepEdge: SmartFeatureHandlerId

eSymmetric: Constraint2dType

eSysprinter: PlotterModel

eSysprinterFormName: PlotTagStr

eSysprinterFullSheet: PlotTagBool

eSysprinterMaxCopies: PlotTagInt

eSysprinterMetafile: PlotterModel

eSysprinterName: PlotTagStr

eSysprinterNumCopies: PlotTagInt

eSysprinterOrientation: PlotTagInt

eSysprinterTrayName: PlotTagStr

eSystem: DgnLibSelector

eSystemGuiLibs: DgnLibSelector

eTABLET_MENU: InputQueueSourceEnum

eTASK_ID_SIZE: int

eTEMPERASE: GuiDrawMode

eTEXTSTYLE_CHANGE_ADD: TextStyleChangeType

eTEXTSTYLE_CHANGE_BEFORE_ADD: TextStyleChangeType

eTEXTSTYLE_CHANGE_BEFORE_DELETE: TextStyleChangeType

eTEXTSTYLE_CHANGE_BEFORE_MODIFY: TextStyleChangeType

eTEXTSTYLE_CHANGE_DELETE: TextStyleChangeType

eTEXTSTYLE_CHANGE_DELETEUNUSED: TextStyleChangeType

eTEXTSTYLE_CHANGE_MODIFY: TextStyleChangeType

eTIFF: PlotDriver

eTRANSIENT_FLAG_DISPLAYFIRST: int

eTRANSIENT_FLAG_DONTINCLUDEINFIT: int

eTRANSIENT_FLAG_INCLUDEINPLOT: int

eTRANSIENT_FLAG_OVERLAY: int

eTRANSIENT_FLAG_SNAPPABLE: int

eTRANSIENT_FLAG_VIEWMASKFROMMODELREF: int

eTRUECOLOR_RGB: int

eTRUECOLOR_RGBA: int

eTRUECOLOR_Separate: int

eTRUECOLOR_Seperate: int

eTangent: Constraint2dType

eTaperFace: SmartFeatureHandlerId

eTextFavoritesOnly: DgnLibSelector

eTextStylesOnly: DgnLibSelector

eThicken: SmartFeatureHandlerId

eTimeout: ButtonTrans

eToDevice: PlotDestination

eToIpserver: PlotDestination

eToMetaFile: PlotDestination

eToPlotFile: PlotDestination

eToggle: LevelMaskOperation

eTranslateFace: SmartFeatureHandlerId

eTranslation: DragTransformType

eTriangle: PlotEdpLineCap

eTrim: SmartFeatureHandlerId

eTrue: PlotTriState

eTrueColor: PlotColorMode

eUIServer: MdlApplicationClass

eUndefined: ButtonTrans

eUnknown: PlotDriver

eUnspecified: SmartFeatureHandlerId

eUp: ButtonTrans

eUpperLeft: DriverCoordSysOrigin

eUseDefaultScale: PlotTagBool

eUseLocalTempFileForPseudoOutputFile: PlotTagBool

eUseModelForDefaultPlotFileName: PlotTagBool

eUseScreenedVectors: PlotTagBool

eUseSimpleGdi: PlotTagBool

eUser: MdlApplicationClass

eUserAbort: PlotError

eUserClose: HideReasonCode

eVIEWGROUP_CACHE_CHANGE_ACTIVATE: ViewGroupChangeType

eVIEWGROUP_CACHE_CHANGE_CREATE: ViewGroupChangeType

eVIEWGROUP_CACHE_CHANGE_DELETE: ViewGroupChangeType

eVIEWGROUP_CACHE_CHANGE_PROPERTY_EDIT: ViewGroupChangeType

eVIEWGROUP_CACHE_CHANGE_REDIRECT: ViewGroupChangeType

eVIEW_INGLOBALCOORDS: int

eVIEW_INLOCALCOORDS: int

eVariableDependency: Constraint3dXAttributeIndex

eVertical: Constraint2dType

eView: PlotAreaMode

eViewDeltaUors: PlotTagDPoint3d

eViewOriginUors: PlotTagDPoint3d

eViewToPlot: PlotTagTransform

eVisible: PlotTagInt

eWINDOWGETSTATE_ICONIFIED: int

eWINDOWGETSTATE_MAXIMIZED: int

eWINDOWGETSTATE_MINIMIZED: int

eWINDOW_ICON: InputQueueSourceEnum

eWINUPD_ALLPARTS: int

eWINUPD_BORDERS: int

eWINUPD_NONVIEWCONTENTS: int

eWORKMODE_DGN: Workmode

eWORKMODE_DWG: Workmode

eWORKMODE_V7: Workmode

eWindowClose: HideReasonCode

eWorldToPlot: PlotTagTransform

eWorldToView: PlotTagTransform

eWriteFile: PlotError

eXAxis: PlotAutoAlignMode

eXORDRAW: GuiDrawMode

eXORINCLUDEBACKSTORE: GuiDrawMode

eYAxis: PlotAutoAlignMode

ecm: PlotUnits

edm: PlotUnits

edots: PlotUnits

eft: PlotUnits

ein: PlotUnits

em: PlotUnits

emm: PlotUnits

etenthsmm: PlotUnits

class fitViewOptions:
    """
    None
    """

    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
    @property
    def disableCenterCamera(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @disableCenterCamera.setter
    def disableCenterCamera(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def dontIncludeParentsOfNestedRefs(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @dontIncludeParentsOfNestedRefs.setter
    def dontIncludeParentsOfNestedRefs(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def expandClippingPlanes(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @expandClippingPlanes.setter
    def expandClippingPlanes(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def forceActiveZToCenter(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @forceActiveZToCenter.setter
    def forceActiveZToCenter(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def ignoreCallouts(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @ignoreCallouts.setter
    def ignoreCallouts(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def ignoreTransients(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @ignoreTransients.setter
    def ignoreTransients(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def optionPadding(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @optionPadding.setter
    def optionPadding(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def optionPadding2(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @optionPadding2.setter
    def optionPadding2(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
    @property
    def rasterElementsOnly(arg0: MSPyMstnPlatform.fitViewOptions) -> int:
        ...
    @rasterElementsOnly.setter
    def rasterElementsOnly(arg0: MSPyMstnPlatform.fitViewOptions, arg1: int) -> None:
        ...
    
class mdlElmdscrFunc:
    """
    None
    """

    @staticmethod
    def Add(elemDscr: MSPyDgnPlatform.MSElementDescr) -> int:
        """
        @description Adds the new element(s) contained in the element
        descriptor pointed to by elemDescr to the design file. You should use
        MSElementDescr.Add when creating new elements. Before writing the element
        to the file, MSElementDescr.Add sets the properties bits in the element
        header to not locked, new element, and not modified.
        
        Remark:
        s The MSElementDescr.Add and MSElementDescr.Append functions validate the
        element descriptor before adding it to the file.
        
        Remark:
        s MicroStation remembers the MSElementDescr.Add and MSElementDescr.Append
        functions, so the user can undo them.
        
        :param elemDescr:
        added to file
        
        :returns:
        Returns the file position of the first element added to the design
        file. If an error occurs, the file position is set to zero and the
        global variable mdlErrno is set to the specific error cause.
        Possible values for mdlErrno are MDLERR_READONLY, MDLERR_DISKFULL,
        MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT and MDLERR_WRITEFAILED.
        
        See also:
        MSElementDescr.Rewrite Element.Add Element.Append
        """
        ...
    
    @staticmethod
    def AddFill(edP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def AddToChain(chainDscr: MSPyDgnPlatform.MSElementDescr, newElem: MSPyDgnPlatform.MSElementDescr) -> None:
        ...
    
    @staticmethod
    def Append(elemDscr: MSPyDgnPlatform.MSElementDescr) -> int:
        """
        @description Adds the modified element(s) contained in the element
        descriptor pointed to by elemDscr to the design file. You should use
        MSElementDescr.Append if you are modifying an element and changing its
        size. The MSElementDescr.Rewrite function is also useful for this purpose,
        but requires that the old file position be known.
        
        Remark:
        s The MSElementDescr.Add and MSElementDescr.Append functions validate the
        element descriptor before adding it to the file.
        
        Remark:
        s MicroStation remembers the MSElementDescr.Add and MSElementDescr.Append
        functions, so the user can undo them.
        
        :param elemDescrP:
        appended to file
        
        :returns:
        Returns the file position of the first element added to the design
        file. If an error occurs, the file position is set to zero and the
        global variable mdlErrno is set to the specific error cause.
        Possible values for mdlErrno are MDLERR_READONLY, MDLERR_DISKFULL,
        MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT and MDLERR_WRITEFAILED.
        
        See also:
        MSElementDescr.Rewrite Element.Add Element.Append MSElementDescr.Add
        MSElementDescr.AppendByModelRef
        
        Remark:
        """
        ...
    
    @staticmethod
    def AppendAttributes(elDescr: MSPyDgnPlatform.MSElementDescr, attributes: MSPyBentleyGeom.UInt16Array) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def AppendByModelRef(elemDscr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @description This function is identical to MSElementDescr.Append except
        for the addition of a modelRef argument that allows elements to be
        appended to models other than the active model. If the model specified
        is the active model then the two functions are identical. If the
        element is from the active design file the various asynch hooks are
        called and the element is recorded in the undo buffer. The supplied
        modelRef must be open for write access.
        
        :param elemDescr:
        appended to file
        
        :param modelRef:
        the model to append to.
        
        :returns:
        Returns SUCCESS if the element is appended successfully and ERROR
        otherwise. If an error occurs, the file position is set to zero
        and the global variable mdlErrno is set to the specific error
        cause. Possible values for mdlErrno are MDLERR_READONLY,
        MDLERR_DISKFULL, MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT and
        MDLERR_WRITEFAILED.
        
        See also:
        MSElementDescr.Append
        
        Remark:
        """
        ...
    
    @staticmethod
    def AppendDscr(existingElmDscr: MSPyDgnPlatform.MSElementDescr, newDscr: MSPyDgnPlatform.MSElementDescr) -> int:
        ...
    
    @staticmethod
    def AppendElement(existingElmDscr: MSPyDgnPlatform.MSElementDescr, element: MSPyDgnPlatform.MSElement) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def AssembleChains(edP: MSPyDgnPlatform.MSElementDescr, closureTolerance: float, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def ClearPersistentInfo(elDscr: MSPyDgnPlatform.MSElementDescr) -> None:
        ...
    
    @staticmethod
    def Close(inEdP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def ConvertTo2D(oldDescr: MSPyDgnPlatform.MSElementDescr, view: int, transform: MSPyBentleyGeom.Transform, sourceModelRef: MSPyDgnPlatform.DgnModelRef, destModelRef: MSPyDgnPlatform.DgnModelRef, preserveZRange: bool) -> tuple:
        ...
    
    @staticmethod
    def ConvertTo3D(oldDescr: MSPyDgnPlatform.MSElementDescr, elType: int, elevation: float, transform: MSPyBentleyGeom.Transform, sourceModelRef: MSPyDgnPlatform.DgnModelRef, destModelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def CopyParallel(inDscr: MSPyDgnPlatform.MSElementDescr, point: MSPyBentleyGeom.DPoint3d, distance: float, normal: MSPyBentleyGeom.DPoint3d) -> tuple:
        ...
    
    @staticmethod
    def CopyXAttributes(toElDscr: MSPyDgnPlatform.MSElementDescr, fromElDscr: MSPyDgnPlatform.MSElementDescr, copyChildXAttributes: bool) -> int:
        ...
    
    @staticmethod
    def CreateShapeWithHoles(solidEdP: MSPyDgnPlatform.MSElementDescr, holeEdP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def DeleteByModelRef(elemDescr: MSPyDgnPlatform.MSElementDescr, filePos: int, modelRef: MSPyDgnPlatform.DgnModelRef, display: bool) -> int:
        """
        @description Deletes the element(s) pointed to by elemDscrP at file
        position filePos in the model specified by modelRef. The deletion will
        be undoable if the model is in the current master file. If it is,
        MicroStation needs the element(s) to save in the undo buffer. If the
        element descriptor does not exist, pass NULL for elemDscrP and
        MicroStation will re-read the elements from the cache. Doing so adds
        some overhead, so always pass the element descriptor if it exists.
        
        :param elemDescr:
        element descr to delete
        
        :param filePos:
        file position
        
        :param modelRef:
        the model containing the element(s)
        
        :param display:
        If display is true, MicroStation erases the elements from the
        screen as it deletes them. Otherwise, it does not erase them.
        
        Remark:
        s MicroStation remembers the MSElementDescr.UndoableDelete function,
        so the user can undo it.
        
        :returns:
        If the element is deleted, returns SUCCESS. If it fails, it sets
        mdlErrno and returns one of the following:MDLERR_READONLY,
        MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT or MDLERR_MODIFYCOMPLEX.
        
        See also:
        MSElementDescr.UndoableDelete
        
        Remark:
        """
        ...
    
    @staticmethod
    def DifferenceShapes(minuend: MSPyDgnPlatform.MSElementDescr, subtrahend: MSPyDgnPlatform.MSElementDescr, tol: float) -> tuple:
        ...
    
    @staticmethod
    def Display(elemDscr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef, drawMode: int) -> None:
        """
        @description Displays the element descriptor pointed to by elemDscrP
        in all active views.
        
        :param elemDescr:
        elements to display
        
        :param modelRef:
        determines the display transformation and clipping to be applied
        to the element(s) as they are drawn.
        
        :param drawMode:
        determines how MicroStation displays the element(s). @Remarks
        Possible values for drawMode are as follows:<table border=" 1 ">
        <caption></caption> <tr> <th>drawMode</th> <th>drawMode field
        meaning</th> </tr> <tr> <td>DRAW_MODE_Normal</td> <td>Draw the
        element(s) in its normal color.</td> </tr> <tr> <td>ERASE</td>
        <td>Erase the element(s).</td> </tr> <tr> <td>HILITE</td> <td>Draw
        the element(s) in the current highlight color.</td> </tr> </table>
        
        See also:
        MSElementDescr.DisplaySingle Element.Display
        MSElementDescr.DisplayInSelectedViews MSElementDescr.DisplayFromFileViews
        MSElementDescr.DisplayFromFile
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayAllReferences(elemDscr: MSPyDgnPlatform.MSElementDescr, drawMode: int, activeModel: MSPyDgnPlatform.DgnModelRef, viewMask: int) -> None:
        """
        @description Displays the element descriptor pointed to by elemDscrP
        in the views specified by viewMask if the descriptors modelRef can be
        reached from the root modelRef of the view. Useful for displaying
        changes in dependency callbacks.
        
        :param elemDescr:
        elements to display
        
        :param drawMode:
        determines how MicroStation displays the element(s).
        
        :param activeModel:
        determines the display transformation and clipping to be applied
        to the element(s) as they are drawn.
        
        :param viewMask:
        which views to display in @Remarks Possible values for drawMode
        are as follows:<table border=" 1 "> <caption></caption> <tr>
        <th>drawMode</th> <th>drawMode field meaning</th> </tr> <tr>
        <td>DRAW_MODE_Normal</td> <td>Draw the element(s) in its normal
        color.</td> </tr> <tr> <td>ERASE</td> <td>Erase the
        element(s).</td> </tr> <tr> <td>HILITE</td> <td>Draw the
        element(s) in the current highlight color.</td> </tr> </table>
        
        See also:
        MSElementDescr.DisplaySingle Element.Display
        MSElementDescr.DisplayInSelectedViews MSElementDescr.DisplayFromFileViews
        MSElementDescr.DisplayFromFile
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayFromFile(filePos: int, modelRef: MSPyDgnPlatform.DgnModelRef, el: MSPyDgnPlatform.MSElement, drawMode: int) -> int:
        """
        @description This function is similar to ElmDscr.Display, but
        operates on elements in the design file rather than from an element
        descriptor supplied by the application. el is an optional parameter
        that points to the element at position filePos from modelRef. If the
        element does not exist, pass NULL.
        
        
        :param filePos:
        file position
        
        :param modelRef:
        element source
        
        :param el:
        element (or NULL)
        
        :param drawMode:
        determines how MicroStation displays the element(s). @Remarks
        Possible values for drawMode are as follows:<table border=" 1 ">
        <caption></caption> <tr> <th>drawMode</th> <th>drawMode field
        meaning</th> </tr> <tr> <td>DRAW_MODE_Normal</td> <td>Draw the
        element(s) in its normal color.</td> </tr> <tr> <td>ERASE</td>
        <td>Erase the element(s).</td> </tr> <tr> <td>HILITE</td> <td>Draw
        the element(s) in the current highlight color.</td> </tr> </table>
        
        :returns:
        Returns SUCCESS if the element is read and displayed and ERROR if
        filePos is invalid.
        
        See also:
        MSElementDescr.DisplaySingle Element.Display
        MSElementDescr.DisplayInSelectedViews MSElementDescr.DisplayFromFileViews
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayFromFileViews(filePos: int, modelRef: MSPyDgnPlatform.DgnModelRef, elP: MSPyDgnPlatform.MSElement, drawMode: int, viewMask: int) -> int:
        """
        @description This function is identical to MSElementDescr.DisplayFromFile,
        except that the viewMask argument determines the views in which
        element descriptor is displayed (see Element.DisplayInSelectedViews
        for a discussion of viewMask).
        
        :param filePos:
        file position of element
        
        :param modelRef:
        element source
        
        :param elP:
        optional
        
        :param drawMode:
        drawing mode
        
        :param viewMask:
        one bit per view
        
        :returns:
        Returns SUCCESS if the element is displayed and ERROR if filePos
        is invalid.
        
        See also:
        MSElementDescr.Display MSElementDescr.DisplayFromFile
        MSElementDescr.DisplayInSelectedViews
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayInSelectedViews(elemDescr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef, drawMode: int, viewMask: int) -> None:
        """
        @description This function is identical to MSElementDescr.Display, except
        that the viewMask argument determines the views in which element
        descriptor is displayed (see Element.DisplayInSelectedViews for a
        discussion of viewMask).
        
        :param elemDescr:
        pointer to elemDscr displayed
        
        :param modelRef:
        element source
        
        :param drawMode:
        drawing mode
        
        :param viewMask:
        one bit per view
        
        See also:
        MSElementDescr.Display MSElementDescr.DisplayFromFile
        MSElementDescr.DisplayFromFileViews
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayInView(edP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef, drawMode: MSPyDgnPlatform.DgnDrawMode, gwP: MSWindow) -> None:
        """
        @description Used to display the contents of the specified element
        descriptor in the specified view window using the given drawing mode.
        
        :param edP:
        is the element descriptor indicating the element to draw in the
        given view.
        
        :param modelRef:
        indicates the model containing the element.
        
        :param drawMode:
        is one of the drawing mode values. @Remarks Possible values for
        drawMode are as follows:<table border=" 1 "> <caption></caption>
        <tr> <th>drawMode</th> <th>drawMode field meaning</th> </tr> <tr>
        <td>DRAW_MODE_Normal</td> <td>Draw the element(s) in its normal
        color.</td> </tr> <tr> <td>ERASE</td> <td>Erase the
        element(s).</td> </tr> <tr> <td>HILITE</td> <td>Draw the
        element(s) in the current highlight color.</td> </tr> </table>
        
        :param gwP:
        window to display element in
        
        See also:
        MSElementDescr.Show
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplaySingle(elemDescr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef, drawMode: int) -> None:
        """
        @description This function is identical to MSElementDescr.Display except
        that it displays a single element descriptor and will not display the
        elements pointed to by elemDescr->next.
        
        :param elemDescr:
        element to display
        
        :param modelRef:
        element source
        
        :param drawMode:
        display mode @Remarks Possible values for drawMode are as follows:
        <table border=" 1 "> <caption></caption> <tr> <th>drawMode</th>
        <th>drawMode field meaning</th> </tr> <tr>
        <td>DRAW_MODE_Normal</td> <td>Draw the element(s) in its normal
        color.</td> </tr> <tr> <td>ERASE</td> <td>Erase the
        element(s).</td> </tr> <tr> <td>HILITE</td> <td>Draw the
        element(s) in the current highlight color.</td> </tr> </table>
        
        See also:
        MSElementDescr.Display
        
        Remark:
        """
        ...
    
    @staticmethod
    def DisplayToWindow(window: MSWindow, rect: MSPyDgnPlatform.BSIRect, viewFlags: MSPyDgnPlatform.ViewFlags, elemDescr: MSPyDgnPlatform.MSElementDescr, rotMatrix: MSPyBentleyGeom.RotMatrix, origin: MSPyBentleyGeom.DPoint3d, range: MSPyBentleyGeom.DPoint3d, threeD: int, menuColor: int) -> int:
        ...
    
    @staticmethod
    def DistanceAtPoint(position: MSPyBentleyGeom.DPoint3d, tangent: MSPyBentleyGeom.DPoint3d, edP: MSPyDgnPlatform.MSElementDescr, inputPoint: MSPyBentleyGeom.DPoint3d, inputTolerance: float) -> tuple:
        ...
    
    @staticmethod
    def Duplicate(oldDscr: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def DuplicateEx(oldDscr: MSPyDgnPlatform.MSElementDescr, copyScheduledXaChanges: bool = True, loadPersistentXasAsChanges: bool = True) -> tuple:
        ...
    
    @staticmethod
    def DuplicateSingle(oldDscr: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def DuplicateSingleEx(oldDscr: MSPyDgnPlatform.MSElementDescr, copyScheduledXaChanges: bool, loadPersistentXasAsChanges: bool) -> tuple:
        ...
    
    @staticmethod
    def EvaluateCurveSpace(descr: MSPyDgnPlatform.MSElementDescr, origin: MSPyBentleyGeom.DPoint3d, matrix: MSPyBentleyGeom.RotMatrix) -> tuple:
        ...
    
    @staticmethod
    def ExtendedDisplayToWindow(window: MSWindow, rect: MSPyDgnPlatform.BSIRect, viewFlags: MSPyDgnPlatform.ViewFlags, elemDescr: MSPyDgnPlatform.MSElementDescr, rotMatrix: MSPyBentleyGeom.RotMatrix, origin: MSPyBentleyGeom.DPoint3d, range: MSPyBentleyGeom.DPoint3d, threeD: int, menuColor: int, colorMap: capsule, clearFirst: bool, backgroundImage: int) -> int:
        ...
    
    @staticmethod
    def ExtractAttributes(attributes: MSPyBentleyGeom.UInt16Array, elDscr: MSPyDgnPlatform.MSElementDescr) -> None:
        ...
    
    @staticmethod
    def ExtractEndPoints(startP: MSPyBentleyGeom.DPoint3d, startTangentP: MSPyBentleyGeom.DPoint3d, endP: MSPyBentleyGeom.DPoint3d, endTangentP: MSPyBentleyGeom.DPoint3d, edP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @description Returns the start and end points (in start and end) for
        the open element, edP. Valid element types include lines, linestrings,
        arcs, curves, B-spline curves, multilines, complex chains and complex
        shapes.
        
        :param startP:
        the starting point for the curve; pass NULL for argument if you do
        not need or want this value.
        
        :param startTangentP:
        start tangent
        
        :param endP:
        the ending point for the curve; pass NULL for argument if you do
        not need or want this value.
        
        :param endTangentP:
        end tangent
        
        :param edP:
        element descriptor
        
        :param modelRef:
        is used only if the input element is a multiline.
        
        Remark:
        s This function is included in the object library mdllib.ml. This
        library must be linked into any application calling this function.
        
        :returns:
        Returns SUCCESS if the element is successfully reversed and
        MDLERR_BADTYPE if the element type is invalid.
        
        Remark:
        """
        ...
    
    @staticmethod
    def ExtractNormal(normal: MSPyBentleyGeom.DPoint3d, point: MSPyBentleyGeom.DPoint3d, edP: MSPyDgnPlatform.MSElementDescr, inputDefaultNormal: MSPyBentleyGeom.DPoint3d) -> int:
        """
        @description Used to find the normal vector of an element, using the
        incredibly coarse classic IGDS/Microstation tolerance of 100 UORS. Use
        MSElementDescr.ExtractNormalTight to get a tighter tolerance.
        
        :param normal:
        is a vector normal to the element.
        
        :param point:
        is a point on the element.
        
        :param edP:
        is the element to which the normal will be found.
        
        :param inputDefaultNormal:
        is a reference vector used only if the element normal is
        ambiguous, as is the case for a line element. In this case,
        inputDefaultNormal is a default vector in the plane of the line
        and the returned normal.
        
        :returns:
        SUCCESS if the normal vector is returned, MDLERR_NONPLANARELEMENT
        if an average normal vector is returned.
        
        Remark:
        
        
        See also:
        MSElementDescr.ExtractNormal2 MSElementDescr.ExtractNormalTight2
        """
        ...
    
    @staticmethod
    def ExtractNormalTight(normal: MSPyBentleyGeom.DPoint3d, point: MSPyBentleyGeom.DPoint3d, edP: MSPyDgnPlatform.MSElementDescr, inputDefaultNormal: MSPyBentleyGeom.DPoint3d) -> int:
        """
        @description Used to find the normal vector of an element, with tight
        tolerance for planarity test.
        
        :param normal:
        is a vector normal to the element.
        
        :param point:
        is a point on the element.
        
        :param edP:
        is the element to which the normal will be found.
        
        :param inputDefaultNormal:
        is a reference vector used only if the element normal is
        ambiguous, as is the case for a line element. In this case,
        inputDefaultNormal is a default vector in the plane of the line
        and the returned normal.
        
        :returns:
        SUCCESS if the normal vector is returned, MDLERR_NONPLANARELEMENT
        if an average normal vector is returned.
        
        Remark:
        
        
        See also:
        MSElementDescr.ExtractNormal2 MSElementDescr.ExtractNormal
        """
        ...
    
    @staticmethod
    def ExtractNormalWithTolerance(normal: MSPyBentleyGeom.DPoint3d, point: MSPyBentleyGeom.DPoint3d, edP: MSPyDgnPlatform.MSElementDescr, inputDefaultNormal: MSPyBentleyGeom.DPoint3d, absTol: float, localRelTol: float, globalRelTol: float) -> int:
        """
        @description Used to find the normal vector of an element, with user-
        defined tolerance for planarity test.
        
        :param normal:
        is a vector normal to the element.
        
        :param point:
        is a point on the element.
        
        :param edP:
        is the element to which the normal will be found.
        
        :param inputDefaultNormal:
        is a reference vector used only if the element normal is
        ambiguous, as is the case for a line element. In this case,
        inputDefaultNormal is a default vector in the plane of the line
        and the returned normal.
        
        :param absTol:
        is a user-defined absTol tolerance.
        
        :param localRelTol:
        is a user-defined local tolerance.
        
        :param globalRelTol:
        is a user-defined global tolerance.
        
        :returns:
        SUCCESS if the normal vector is returned, MDLERR_NONPLANARELEMENT
        if an average normal vector is returned.
        
        Remark:
        
        
        See also:
        MSElementDescr.ExtractNormal2 MSElementDescr.ExtractNormal
        """
        ...
    
    @staticmethod
    def Fillet(fillet: MSPyDgnPlatform.MSElement, template: MSPyDgnPlatform.MSElement, in0EdP: MSPyDgnPlatform.MSElementDescr, in1EdP: MSPyDgnPlatform.MSElementDescr, inputRadius: float, inputPoint: MSPyBentleyGeom.DPoint3d, inputRotMatrix: MSPyBentleyGeom.RotMatrix) -> int:
        """
        @description Used to create a two dimensional circular fillet between
        the specified elements. Optionally, a template element can be
        specified from which the symbology settings are copied.
        
        :param fillet:
        is the element descriptor for the fillet arc element after it is
        created.
        
        :param pTemplate:
        is an element from which the symbology settings are copied to the
        fillet arc.
        
        :param in0EdP:
        is the first element to fillet.
        
        :param in1EdP:
        is the second element to fillet.
        
        :param inputRadius:
        is the desired fillet arc radius.
        
        :param inputPoint:
        indicates which fillet is desired by proximity. For example, if
        the elements to fillet include two intersecting lines, there are
        four possible fillets that could be created (assuming the radius
        value does not preclude any of the four). The fillet closest to
        the given point is the fillet that is selected and created.
        
        :param inputRotMatrix:
        is the rotation matrix to apply to the fillet. This may be NULL.
        
        :returns:
        SUCCESS if the fillet can be created, otherwise ERROR.
        
        Remark:
        """
        ...
    
    @staticmethod
    def FreeAll(elemDescr: MSPyDgnPlatform.MSElementDescr) -> None:
        ...
    
    @staticmethod
    def FromCompoundElement(elemP: MSPyDgnPlatform.MSElement, modelRef: MSPyDgnPlatform.DgnModelRef, graphicGroup: int, transformToWorld: bool, expandNested: bool) -> tuple:
        ...
    
    @staticmethod
    def FromSelectionSet() -> tuple:
        ...
    
    @staticmethod
    def GeneratePartial(elemDescr: MSPyDgnPlatform.MSElementDescr, t1: float, t2: float, splineParameters: bool) -> tuple:
        ...
    
    @staticmethod
    def GetByElemRef(elemRef: MSPyDgnPlatform.ElementRefBase, modelRef: MSPyDgnPlatform.DgnModelRef, expendSharedCells: int) -> tuple:
        ...
    
    @staticmethod
    def GetFilePos(elDscr: MSPyDgnPlatform.MSElementDescr) -> int:
        ...
    
    @staticmethod
    def GetProperties(edP: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def GetThicknessEdP(edP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> MSPyDgnPlatform.MSElementDescr:
        """
        @description Get a surface or solid element that represents a planar
        element with thickness. Element thickness is a new concept introduced
        in V8. The presence of a thickness linkage on a planar element implies
        that the element is extruded by the thickness distance. The
        MSElementDescr.GetThicknessEdP function will return a solid or surface
        element that represents an element with thickness
        
        :param edP:
        a planar element with a non-zero thickness.
        
        :param modelRef:
        the modelRef for the element.
        
        :returns:
        If the element has a non-zero thickness then a surface or solid
        element representing the extrusion, else NULL is returned.
        
        Remark:
        """
        ...
    
    @staticmethod
    def HasLineStyle(lineStyleEdP: MSPyDgnPlatform.MSElementDescr) -> bool:
        """
        @description Queries if an element descriptor has line style.
        
        :param lineStyleEdP:
        is the element descriptor to query.
        
        :returns:
        true if the elements descriptor has line style.
        
        Remark:
        """
        ...
    
    @staticmethod
    def InitOrAddToChain(edP: MSPyDgnPlatform.MSElementDescr, newElem: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def InitOrAddToChainWithTail(headDescr: MSPyDgnPlatform.MSElementDescr, tailDescr: MSPyDgnPlatform.MSElementDescr, descr: MSPyDgnPlatform.MSElementDescr) -> tuple:
        ...
    
    @staticmethod
    def InsertElement(existingElement: MSPyDgnPlatform.MSElementDescr, element: MSPyDgnPlatform.MSElement) -> int:
        ...
    
    @staticmethod
    def IntersectShapes(shape1: MSPyDgnPlatform.MSElementDescr, shape2: MSPyDgnPlatform.MSElementDescr, tol: float) -> tuple:
        ...
    
    @staticmethod
    def IsClosed(edP: MSPyDgnPlatform.MSElementDescr) -> bool:
        """
        @description Queries if an element descriptor is a closed element;
        i.e., a shape, complex shape, ellipse or closed B-spline curve.
        
        :param edP:
        is the element descriptor to query.
        
        :returns:
        true if the element descriptor is a closed element.
        
        See also:
        MSElementDescr.Open MSElementDescr.Close MSElementDescr.CreateShapeWithHolesC
        MSElementDescr.IsOpen MSElementDescr.IsGroupedHole
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsGroupedHole(groupEdP: MSPyDgnPlatform.MSElementDescr) -> bool:
        """
        @description Queries if an element descriptor is a grouped hole
        element; i.e., an element that has a hole punched in it (such as can
        be created with MSElementDescr.CreateShapeWithHoles).
        
        :param groupEdP:
        is the element descriptor to query.
        
        :returns:
        true if the elements descriptor is a grouped hole element.
        
        See also:
        MSElementDescr.Open MSElementDescr.Close MSElementDescr.CreateShapeWithHoles
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsOpen(edP: MSPyDgnPlatform.MSElementDescr) -> bool:
        """
        @description Queries if an element descriptor is an open element;
        i.e., a line, line string, curve, open B-Spline curve or complex
        chain.
        
        :param edP:
        is the element descriptor to query.
        
        :returns:
        true if the element descriptor is an open element.
        
        See also:
        MSElementDescr.Open MSElementDescr.Close MSElementDescr.CreateShapeWithHoles
        MSElementDescr.IsClosed MSElementDescr.IsGroupedHole
        
        Remark:
        """
        ...
    
    @staticmethod
    def IsPersistent(elDscr: MSPyDgnPlatform.MSElementDescr) -> bool:
        ...
    
    @staticmethod
    def New(elDescr: MSPyDgnPlatform.MSElementDescr, elemHeader: MSPyDgnPlatform.MSElementDescr, element: MSPyDgnPlatform.MSElement) -> tuple:
        ...
    
    @staticmethod
    def Open(inEdP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def OrientationExt(transform: MSPyBentleyGeom.Transform, sourceDescr: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> int:
        """
        @description return a natural coordinate frame for the element.
        
        :param pTransform:
        coordinate frame.
        
        :param pSourceDescr:
        source element
        
        :param modelRef:
        source model ref.
        
        :returns:
        SUCCESS for graphic elements which allow an orientation.
        
        Remark:
        """
        ...
    
    @staticmethod
    def PartialDelete(inEdP: MSPyDgnPlatform.MSElementDescr, point1: MSPyBentleyGeom.DPoint3d, point2: MSPyBentleyGeom.DPoint3d, point3: MSPyBentleyGeom.DPoint3d, view: int) -> tuple:
        ...
    
    @staticmethod
    def PointAtDistance(position: MSPyBentleyGeom.DPoint3d, tangent: MSPyBentleyGeom.DPoint3d, inputDistance: float, edP: MSPyDgnPlatform.MSElementDescr, inputTolerance: float) -> int:
        """
        @description Returns the point and tangent vector at distance along
        the element. All input parameters are specified in the current
        coordinate system.
        
        :param position:
        point on element
        
        :param tangent:
        tangent direction
        
        :param inputDistance:
        distance along elm
        
        :param edP:
        element
        
        :param inputTolerance:
        stroking tolerance
        
        :returns:
        Returns SUCCESS if it functions correctly and a non-zero error
        status otherwise.
        
        Remark:
        """
        ...
    
    @staticmethod
    def Read(filePos: int, modelRef: MSPyDgnPlatform.DgnModelRef, expendSharedCells: int) -> tuple:
        ...
    
    @staticmethod
    def ReadComponentToMaster(path: MSPyDgnPlatform.DisplayPath, elementNumber: int, expendSharedCells: int, returnNonCellHeader: bool, allowGroupHoles: bool, startFilePos: int) -> tuple:
        ...
    
    @staticmethod
    def ReadToMaster(filePos: int, modelRef: MSPyDgnPlatform.DgnModelRef, expendSharedCells: int) -> tuple:
        ...
    
    @staticmethod
    def RemoveElement(elemDescr: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def ReplaceDscr(existingDescr: MSPyDgnPlatform.MSElementDescr, newDscr: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def ReplaceElement(existingDescr: MSPyDgnPlatform.MSElementDescr, element: MSPyDgnPlatform.MSElement) -> tuple:
        ...
    
    @staticmethod
    def Reverse(inEdP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def ReverseNormal(inEdP: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> tuple:
        ...
    
    @staticmethod
    def Rewrite(newElemDescr: MSPyDgnPlatform.MSElementDescr, oldElemDescr: MSPyDgnPlatform.MSElementDescr, filePos: int) -> int:
        """
        @description Overwrites the existing MicroStation element(s) pointed
        to by oldElemDscrP with the new element(s) pointed to by newElemDscrP
        at file position filePos.
        
        :param newElemDscr:
        new elements
        
        :param oldElemDscr:
        for compatibility with previous releases. Ignored, just pass NULL!
        
        :param filePos:
        file position
        
        Remark:
        s If the sizes of the two element descriptors differ, MicroStation
        deletes the old one and appends the new one to the end of the
        file. Otherwise, it overwrites the old element(s) in the same
        position.
        
        Remark:
        s MicroStation saves the old element(s) in the undo buffer. If a
        copy of the old element descriptor does not exist, pass NULL for
        oldElemDscrP and MicroStation will re-read the old element(s) from
        the cache. Unless you are certain that you have the unmodified
        element descriptor, pass NULL for oldElmDscrP.
        
        Remark:
        s MicroStation remembers the MSElementDescr.Rewrite function, so the
        user can undo it.
        
        :returns:
        Returns the file position of the element added to the design file.
        If the two elements are the same size, this file position is the
        same as filePos.
        
        Remark:
        s If an error occurs, the file position is set to zero and the
        global variable mdlErrno is set to the specific error cause.
        Possible values for mdlErrno are MDLERR_READONLY, MDLERR_DISKFULL,
        MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT and MDLERR_WRITEFAILED.
        
        See also:
        MSElementDescr.Add MSElementDescr.Append
        """
        ...
    
    @staticmethod
    def Show(edP: MSPyDgnPlatform.MSElementDescr, currentIndent: str) -> int:
        """
        @description Used to print information from the element descriptor
        header in a formatted fashion. The printed values include the element
        type, its complex status, its 3d status, and if it is a graphic
        element the symbology values for color, weight, style, level, graphic
        group number and class. If the element is not a graphic element only
        its level will be printed.
        
        :param edP:
        is the element descriptor to get the information from to print.
        
        :param currentIndent:
        is the number of character spaces to indent the information before
        printing.
        
        :returns:
        Always returns SUCCESS
        
        Remark:
        """
        ...
    
    @staticmethod
    def SignedOffset(curveDescr: MSPyDgnPlatform.MSElementDescr, distance: float, normal: MSPyBentleyGeom.DVec3d) -> tuple:
        ...
    
    @staticmethod
    def SpaceFillet(template: MSPyDgnPlatform.MSElement, curveA: MSPyDgnPlatform.MSElementDescr, curveB: MSPyDgnPlatform.MSElementDescr, radius: float, centerSelect: MSPyBentleyGeom.DPoint3d) -> tuple:
        ...
    
    @staticmethod
    def StripAttributes(elDescr: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def StripFill(elDescr: MSPyDgnPlatform.MSElementDescr) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def Stroke(*args, **kwargs):
        """
        Overloaded function.
        
        1. Stroke(points: MSPyBentleyGeom.DPoint3dArray, edP: MSPyDgnPlatform.MSElementDescr, tol: float) -> int
        
        2. Stroke(points: list, edP: MSPyDgnPlatform.MSElementDescr, tol: float) -> int
        """
        ...
    
    @staticmethod
    def Transform(edP: MSPyDgnPlatform.MSElementDescr, userTrans: MSPyBentleyGeom.Transform) -> tuple:
        ...
    
    @staticmethod
    def TransformAllowModification(edP: MSPyDgnPlatform.MSElementDescr, userTrans: MSPyBentleyGeom.Transform, sourceModelRef: MSPyDgnPlatform.DgnModelRef, destModelRef: MSPyDgnPlatform.DgnModelRef, options: int) -> MSPyDgnPlatform.MSElementDescr:
        ...
    
    @staticmethod
    def UndoableDelete(elemDescr: MSPyDgnPlatform.MSElementDescr, filePos: int, display: bool) -> int:
        """
        @description Deletes the element(s) pointed to by elemDscrP at file
        position filePos. MicroStation needs the element(s) to save in the
        undo buffer. If the element descriptor does not exist, pass NULL for
        elemDscrP and MicroStation will re-read the elements from the cache.
        Doing so adds some overhead to MSElementDescr.UndoableDelete, so always
        pass the element descriptor if it exists.
        
        :param elemDescrP:
        element descr to delete
        
        :param filePos:
        file position
        
        :param display:
        If display is true, MicroStation erases the elements from the
        screen as it deletes them. Otherwise, it does not erase them.
        
        Remark:
        s MicroStation remembers the MSElementDescr.UndoableDelete function,
        so the user can undo it.
        
        :returns:
        If the element is deleted, returns SUCCESS. If it fails, it sets
        mdlErrno and returns one of the following:MDLERR_READONLY,
        MDLERR_WRITEINHIBIT, MDLERR_BADELEMENT or MDLERR_MODIFYCOMPLEX.
        
        See also:
        Element.UndoableDelete
        
        Remark:
        """
        ...
    
    @staticmethod
    def UnionShapes(shape1: MSPyDgnPlatform.MSElementDescr, shape2: MSPyDgnPlatform.MSElementDescr, tol: float) -> tuple:
        ...
    
    @staticmethod
    def Validate(p: MSPyDgnPlatform.MSElementDescr, modelRef: MSPyDgnPlatform.DgnModelRef) -> None:
        ...
    
    def __init__(*args, **kwargs):
        """
        Initialize self.  See help(type(self)) for accurate signature.
        """
        ...
    
